{"version":3,"sources":["../src/contracts/index.ts","../src/DelegationFramework/DelegationManager/index.ts","../src/DelegationFramework/DelegationManager/constants.ts","../src/DelegationFramework/DelegationManager/encode.ts","../src/DelegationFramework/DelegationManager/methods/disableDelegation.ts","../src/DelegationFramework/DelegationManager/methods/enableDelegation.ts","../src/DelegationFramework/DelegationManager/methods/redeemDelegations.ts","../src/DelegationFramework/DelegationManager/execute.ts","../src/DelegationFramework/DelegationManager/read.ts","../src/DelegationFramework/DelegationManager/methods/disabledDelegations.ts","../src/DelegationFramework/DelegationManager/methods/getAnyDelegate.ts","../src/DelegationFramework/DelegationManager/methods/getRootAuthority.ts","../src/DelegationFramework/DelegationManager/simulate.ts","../src/DelegationFramework/DeleGatorCore/index.ts","../src/DelegationFramework/DeleGatorCore/execute.ts","../src/DelegationFramework/DeleGatorCore/simulate.ts","../src/DelegationFramework/EIP712/index.ts","../src/DelegationFramework/EIP712/read.ts","../src/DelegationFramework/EIP712/methods/getContractName.ts","../src/DelegationFramework/EIP712/methods/getContractVersion.ts","../src/DelegationFramework/EIP712/methods/getDomainVersion.ts","../src/DelegationFramework/EntryPoint/index.ts","../src/DelegationFramework/EntryPoint/read.ts","../src/DelegationFramework/EntryPoint/methods/getNonce.ts","../src/DelegationFramework/ERC20TransferAmountEnforcer/index.ts","../src/DelegationFramework/ERC20TransferAmountEnforcer/read.ts","../src/DelegationFramework/ERC20TransferAmountEnforcer/methods/getSpentAmount.ts","../src/DelegationFramework/ERC20TransferAmountEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/HybridDeleGator/index.ts","../src/DelegationFramework/HybridDeleGator/read.ts","../src/DelegationFramework/HybridDeleGator/methods/getKey.ts","../src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashes.ts","../src/DelegationFramework/HybridDeleGator/methods/getKeyIdHashesCount.ts","../src/DelegationFramework/HybridDeleGator/simulate.ts","../src/DelegationFramework/HybridDeleGator/constants.ts","../src/DelegationFramework/IdEnforcer/index.ts","../src/DelegationFramework/IdEnforcer/read.ts","../src/DelegationFramework/IdEnforcer/methods/getIsUsed.ts","../src/DelegationFramework/IdEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/LimitedCallsEnforcer/index.ts","../src/DelegationFramework/LimitedCallsEnforcer/read.ts","../src/DelegationFramework/LimitedCallsEnforcer/methods/callCounts.ts","../src/DelegationFramework/LimitedCallsEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/MultiSigDeleGator/index.ts","../src/DelegationFramework/MultiSigDeleGator/read.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getMaxNumberOfSigners.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getSigners.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getSignersCount.ts","../src/DelegationFramework/MultiSigDeleGator/methods/getThreshold.ts","../src/DelegationFramework/MultiSigDeleGator/methods/isSigner.ts","../src/DelegationFramework/MultiSigDeleGator/simulate.ts","../src/DelegationFramework/MultiSigDeleGator/constants.ts","../src/DelegationFramework/NativeTokenTransferAmountEnforcer/index.ts","../src/DelegationFramework/NativeTokenTransferAmountEnforcer/read.ts","../src/DelegationFramework/NativeTokenTransferAmountEnforcer/methods/getSpentAmount.ts","../src/DelegationFramework/NativeTokenTransferAmountEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/NonceEnforcer/index.ts","../src/DelegationFramework/NonceEnforcer/encode.ts","../src/DelegationFramework/NonceEnforcer/methods/incrementNonce.ts","../src/DelegationFramework/NonceEnforcer/execute.ts","../src/DelegationFramework/NonceEnforcer/read.ts","../src/DelegationFramework/NonceEnforcer/methods/currentNonce.ts","../src/DelegationFramework/NonceEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/NonceEnforcer/simulate.ts","../src/DelegationFramework/Ownable2Step/index.ts","../src/DelegationFramework/Ownable2Step/read.ts","../src/DelegationFramework/Ownable2Step/methods/getOwner.ts","../src/DelegationFramework/Ownable2Step/methods/getPendingOwner.ts","../src/DelegationFramework/Ownable2Step/execute.ts","../src/DelegationFramework/Ownable2Step/methods/acceptOwnership.ts","../src/DelegationFramework/Ownable2Step/methods/renounceOwnership.ts","../src/DelegationFramework/Ownable2Step/methods/transferOwnership.ts","../src/DelegationFramework/Ownable2Step/encode.ts","../src/DelegationFramework/Ownable2Step/simulate.ts","../src/DelegationFramework/Pausable/index.ts","../src/DelegationFramework/Pausable/read.ts","../src/DelegationFramework/Pausable/methods/isPaused.ts","../src/DelegationFramework/Pausable/execute.ts","../src/DelegationFramework/Pausable/methods/pause.ts","../src/DelegationFramework/Pausable/methods/unpause.ts","../src/DelegationFramework/Pausable/encode.ts","../src/DelegationFramework/Pausable/simulate.ts","../src/DelegationFramework/SimpleFactory/index.ts","../src/DelegationFramework/SimpleFactory/execute.ts","../src/DelegationFramework/SimpleFactory/read.ts","../src/DelegationFramework/SimpleFactory/methods/getCreate2Address.ts","../src/DelegationFramework/SimpleFactory/simulate.ts","../src/DelegationFramework/SpecificActionERC20TransferBatchEnforcer/index.ts","../src/DelegationFramework/SpecificActionERC20TransferBatchEnforcer/read.ts","../src/DelegationFramework/SpecificActionERC20TransferBatchEnforcer/methods/getTermsInfo.ts","../src/DelegationFramework/SpecificActionERC20TransferBatchEnforcer/methods/usedDelegations.ts"],"sourcesContent":["import * as DelegationManager from '../DelegationFramework/DelegationManager';\nimport * as DeleGatorCore from '../DelegationFramework/DeleGatorCore';\nimport * as EIP712 from '../DelegationFramework/EIP712';\nimport * as EntryPoint from '../DelegationFramework/EntryPoint';\nimport * as ERC20PeriodTransferEnforcer from '../DelegationFramework/ERC20PeriodTransferEnforcer';\nimport * as ERC20StreamingEnforcer from '../DelegationFramework/ERC20StreamingEnforcer';\nimport * as ERC20TransferAmountEnforcer from '../DelegationFramework/ERC20TransferAmountEnforcer';\nimport * as HybridDeleGator from '../DelegationFramework/HybridDeleGator';\nimport * as IdEnforcer from '../DelegationFramework/IdEnforcer';\nimport * as LimitedCallsEnforcer from '../DelegationFramework/LimitedCallsEnforcer';\nimport * as MultiSigDeleGator from '../DelegationFramework/MultiSigDeleGator';\nimport * as MultiTokenPeriodEnforcer from '../DelegationFramework/MultiTokenPeriodEnforcer';\nimport * as NativeTokenPeriodTransferEnforcer from '../DelegationFramework/NativeTokenPeriodTransferEnforcer';\nimport * as NativeTokenStreamingEnforcer from '../DelegationFramework/NativeTokenStreamingEnforcer';\nimport * as NativeTokenTransferAmountEnforcer from '../DelegationFramework/NativeTokenTransferAmountEnforcer';\nimport * as NonceEnforcer from '../DelegationFramework/NonceEnforcer';\nimport * as Ownable2Step from '../DelegationFramework/Ownable2Step';\nimport * as Pausable from '../DelegationFramework/Pausable';\nimport * as SimpleFactory from '../DelegationFramework/SimpleFactory';\nimport * as SpecificActionERC20TransferBatchEnforcer from '../DelegationFramework/SpecificActionERC20TransferBatchEnforcer';\n\nexport {\n  isContractDeployed,\n  isImplementationExpected,\n  encodeProxyCreationCode,\n} from '../DelegationFramework/utils';\n\nexport type { NarrowAbiToFunction } from '../DelegationFramework/utils';\n\nexport {\n  DelegationManager,\n  DeleGatorCore,\n  EIP712,\n  EntryPoint,\n  HybridDeleGator,\n  IdEnforcer,\n  LimitedCallsEnforcer,\n  MultiSigDeleGator,\n  NonceEnforcer,\n  Ownable2Step,\n  Pausable,\n  SimpleFactory,\n  SpecificActionERC20TransferBatchEnforcer,\n  ERC20PeriodTransferEnforcer,\n  ERC20StreamingEnforcer,\n  ERC20TransferAmountEnforcer,\n  MultiTokenPeriodEnforcer,\n  NativeTokenPeriodTransferEnforcer,\n  NativeTokenStreamingEnforcer,\n  NativeTokenTransferAmountEnforcer,\n};\n\nexport type {\n  P256Owner,\n  InitializedClient,\n} from '../DelegationFramework/types';\n\nexport type { Redemption } from '../types';\n","import * as constants from './constants';\nimport * as encode from './encode';\nimport * as execute from './execute';\nimport * as read from './read';\nimport * as simulate from './simulate';\n\nexport { encode, execute, read, simulate, constants };\n","export { ROOT_AUTHORITY, ANY_BENEFICIARY } from '../../delegation';\n\nexport const NAME = 'DelegationManager';\nexport const VERSION = '1.3.0';\nexport const DOMAIN_VERSION = '1';\n","import { encode as disableDelegation } from './methods/disableDelegation';\nimport { encode as enableDelegation } from './methods/enableDelegation';\nimport { encode as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { toDelegationStruct } from '../../../delegation';\nimport type { Delegation } from '../../../types';\nimport type { InitializedClient } from '../../types';\nimport type { NarrowAbiToFunction } from '../../utils';\n\nexport type EncodeDisableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type SimulateDisableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeDisableDelegationParameters;\n\nexport type ExecuteDisableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeDisableDelegationParameters;\n\nexport const simulate = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateDisableDelegationParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'disableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteDisableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeDisableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'disableDelegation',\n    args: [delegationStruct],\n  });\n};\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { toDelegationStruct } from '../../../delegation';\nimport type { Delegation } from '../../../types';\nimport type { InitializedClient } from '../../types';\nimport type { NarrowAbiToFunction } from '../../utils';\n\nexport type EncodeEnableDelegationParameters = {\n  delegation: Delegation;\n};\n\nexport type SimulateEnableDelegationParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeEnableDelegationParameters;\n\nexport type ExecuteEnableDelegationParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeEnableDelegationParameters;\n\nexport const simulate = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: SimulateEnableDelegationParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'enableDelegation'\n  >;\n\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegation,\n}: ExecuteEnableDelegationParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegation,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({ delegation }: EncodeEnableDelegationParameters) => {\n  const delegationStruct = toDelegationStruct(delegation);\n\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'enableDelegation',\n    args: [delegationStruct],\n  });\n};\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport { encodePermissionContexts } from '../../../delegation';\nimport { encodeExecutionCalldatas } from '../../../executions';\nimport type { ExecutionMode, ExecutionStruct } from '../../../executions';\nimport type { Delegation } from '../../../types';\nimport type { InitializedClient } from '../../types';\nimport type { NarrowAbiToFunction } from '../../utils';\n\nexport type EncodeRedeemDelegationsParameters = {\n  delegations: Delegation[][];\n  modes: ExecutionMode[];\n  executions: ExecutionStruct[][];\n};\n\nexport type SimulateRedeemDelegationsParameters = {\n  client: Client;\n  delegationManagerAddress: Address;\n} & EncodeRedeemDelegationsParameters;\n\nexport type ExecuteRedeemDelegationsParameters = {\n  client: InitializedClient;\n  delegationManagerAddress: Address;\n} & EncodeRedeemDelegationsParameters;\n\nexport const simulate = async ({\n  client,\n  delegationManagerAddress,\n  delegations,\n  modes,\n  executions,\n}: SimulateRedeemDelegationsParameters) => {\n  const abi = DelegationManager.abi as any as NarrowAbiToFunction<\n    typeof DelegationManager.abi,\n    'redeemDelegations'\n  >;\n\n  return simulateContract(client, {\n    address: delegationManagerAddress,\n    abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n\nexport const execute = async ({\n  client,\n  delegationManagerAddress,\n  delegations,\n  modes,\n  executions,\n}: ExecuteRedeemDelegationsParameters) => {\n  const { request } = await simulate({\n    client,\n    delegationManagerAddress,\n    delegations,\n    modes,\n    executions,\n  });\n\n  return writeContract(client, request);\n};\n\nexport const encode = ({\n  delegations,\n  modes,\n  executions,\n}: EncodeRedeemDelegationsParameters) => {\n  return encodeFunctionData({\n    abi: DelegationManager.abi,\n    functionName: 'redeemDelegations',\n    args: [\n      encodePermissionContexts(delegations),\n      modes,\n      encodeExecutionCalldatas(executions),\n    ],\n  });\n};\n","import { execute as disableDelegation } from './methods/disableDelegation';\nimport { execute as enableDelegation } from './methods/enableDelegation';\nimport { execute as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","import { read as disabledDelegations } from './methods/disabledDelegations';\nimport { read as getAnyDelegate } from './methods/getAnyDelegate';\nimport { read as getRootAuthority } from './methods/getRootAuthority';\n\nexport { getAnyDelegate, getRootAuthority, disabledDelegations };\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadDisabledDelegationsParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationHash: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationHash,\n}: ReadDisabledDelegationsParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'disabledDelegations',\n    args: [delegationHash],\n  });\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetAnyDelegateParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetAnyDelegateParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ANY_DELEGATE',\n  });\n","import { DelegationManager } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetRootAuthorityParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetRootAuthorityParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: DelegationManager.abi,\n    functionName: 'ROOT_AUTHORITY',\n  });\n","import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as redeemDelegations } from './methods/redeemDelegations';\n\nexport { disableDelegation, enableDelegation, redeemDelegations };\n","import * as encode from './encode';\nimport * as execute from './execute';\nimport * as read from './read';\nimport * as simulate from './simulate';\n\nexport { encode, simulate, read, execute };\n","import { execute as disableDelegation } from './methods/disableDelegation';\nimport { execute as enableDelegation } from './methods/enableDelegation';\nimport { execute } from './methods/execute';\nimport { execute as executeWithMode } from './methods/executeWithMode';\nimport { execute as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n","import { simulate as disableDelegation } from './methods/disableDelegation';\nimport { simulate as enableDelegation } from './methods/enableDelegation';\nimport { simulate as execute } from './methods/execute';\nimport { simulate as executeWithMode } from './methods/executeWithMode';\nimport { simulate as upgradeToAndCall } from './methods/upgradeToAndCall';\n\nexport {\n  disableDelegation,\n  enableDelegation,\n  execute,\n  executeWithMode,\n  upgradeToAndCall,\n};\n","export * as read from './read';\n","import { read as getContractName } from './methods/getContractName';\nimport { read as getContractVersion } from './methods/getContractVersion';\nimport { read as getDomainVersion } from './methods/getDomainVersion';\n\nexport { getContractName, getContractVersion, getDomainVersion };\n","import type { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetContractNameParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetContractNameParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'NAME',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'NAME',\n  });\n","import type { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetContractVersionParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetContractVersionParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'VERSION',\n  });\n","import type { Client, Address } from 'viem';\nimport { readContract } from 'viem/actions';\n\n// NOTE: ABIs have been extracted and minimized for reuse across contracts. These methods are included in our contracts but are not a part of the EIP712 standard itself.\n\nexport type ReadGetDomainVersionParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetDomainVersionParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: [\n      {\n        type: 'function',\n        name: 'DOMAIN_VERSION',\n        inputs: [],\n        outputs: [\n          {\n            name: '',\n            type: 'string',\n            internalType: 'string',\n          },\n        ],\n        stateMutability: 'view',\n      },\n    ],\n    functionName: 'DOMAIN_VERSION',\n  });\n","import * as read from './read';\n\nexport { read };\n","import { read as entryPointGetNonce } from './methods/getNonce';\n\nexport { entryPointGetNonce };\n","import { EntryPoint } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetNonceParameters = {\n  client: Client;\n  entryPoint: Address;\n  contractAddress: Address;\n  key: bigint;\n};\n\nexport const read = async ({\n  client,\n  entryPoint,\n  contractAddress,\n  key,\n}: ReadGetNonceParameters) =>\n  await readContract(client, {\n    address: entryPoint,\n    abi: EntryPoint.abi,\n    functionName: 'getNonce',\n    args: [contractAddress, key],\n  });\n","import * as read from './read';\n\nexport { read };\n","import { read as getSpentAmount } from './methods/getSpentAmount';\nimport { read as getTermsInfo } from './methods/getTermsInfo';\n\nexport { getTermsInfo, getSpentAmount };\n","import { ERC20TransferAmountEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSpentAmountParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegationHash: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegationHash,\n}: ReadGetSpentAmountParameters): Promise<bigint> => {\n  const amount = await readContract(client, {\n    address: contractAddress,\n    abi: ERC20TransferAmountEnforcer.abi,\n    functionName: 'spentMap',\n    args: [delegationManager, delegationHash],\n  });\n\n  return amount;\n};\n","import { ERC20TransferAmountEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport type TermsData = {\n  allowedContract: Address;\n  maxTokens: bigint;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<TermsData> => {\n  const [allowedContract, maxTokens] = await readContract(client, {\n    address: contractAddress,\n    abi: ERC20TransferAmountEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return {\n    allowedContract,\n    maxTokens,\n  };\n};\n","export * as read from './read';\nexport * as encode from './encode';\nexport * as simulate from './simulate';\nexport * as constants from './constants';\n","import { read as getKey } from './methods/getKey';\nimport { read as getKeyIdHashes } from './methods/getKeyIdHashes';\nimport { read as getKeyIdHashesCount } from './methods/getKeyIdHashesCount';\n\nexport { getKey, getKeyIdHashes, getKeyIdHashesCount };\n","import { HybridDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n  keyId: string;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n  keyId,\n}: ReadGetKeyParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKey',\n    args: [keyId],\n  });\n","import { HybridDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyIdHashesParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n}: ReadGetKeyIdHashesParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashes',\n  });\n","import { HybridDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetKeyIdHashesCountParameters = {\n  client: Client;\n  hybridDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  hybridDeleGatorAddress,\n}: ReadGetKeyIdHashesCountParameters) =>\n  await readContract(client, {\n    address: hybridDeleGatorAddress,\n    abi: HybridDeleGator.abi,\n    functionName: 'getKeyIdHashesCount',\n  });\n","import { simulate as addKey } from './methods/addKey';\nimport { simulate as initializeHybridDeleGator } from './methods/initialize';\nimport { simulate as reinitializeHybridDeleGator } from './methods/reinitialize';\nimport { simulate as removeKey } from './methods/removeKey';\nimport { simulate as updateSigners } from './methods/updateSigners';\n\nexport {\n  addKey,\n  initializeHybridDeleGator,\n  reinitializeHybridDeleGator,\n  removeKey,\n  updateSigners,\n};\n","export { ROOT_AUTHORITY, ANY_BENEFICIARY } from '../../delegation';\n\nexport const NAME = 'HybridDeleGator';\nexport const VERSION = '1.3.0';\nexport const DOMAIN_VERSION = '1';\n","import * as read from './read';\n\nexport { read };\n","import { read as getIsUsed } from './methods/getIsUsed';\nimport { read as getTermsInfo } from './methods/getTermsInfo';\n\nexport { getTermsInfo, getIsUsed };\n","import { IdEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetIsUsedParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegator: Address;\n  id: bigint;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegator,\n  id,\n}: ReadGetIsUsedParameters): Promise<boolean> => {\n  const isUsed = await readContract(client, {\n    address: contractAddress,\n    abi: IdEnforcer.abi,\n    functionName: 'getIsUsed',\n    args: [delegationManager, delegator, id],\n  });\n\n  return isUsed;\n};\n","import { IdEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<bigint> => {\n  const id = await readContract(client, {\n    address: contractAddress,\n    abi: IdEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return id;\n};\n","import * as read from './read';\n\nexport { read };\n","import { read as callCounts } from './methods/callCounts';\nimport { read as getTermsInfo } from './methods/getTermsInfo';\n\nexport { callCounts, getTermsInfo };\n","import { LimitedCallsEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadCallCountsParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegationHash: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegationHash,\n}: ReadCallCountsParameters): Promise<bigint> => {\n  const count = await readContract(client, {\n    address: contractAddress,\n    abi: LimitedCallsEnforcer.abi,\n    functionName: 'callCounts',\n    args: [delegationManager, delegationHash],\n  });\n\n  return count;\n};\n","import { LimitedCallsEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<bigint> => {\n  const limit = await readContract(client, {\n    address: contractAddress,\n    abi: LimitedCallsEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return limit;\n};\n","export * as read from './read';\nexport * as encode from './encode';\nexport * as simulate from './simulate';\nexport * as constants from './constants';\n","import { read as getMaxNumberOfSigners } from './methods/getMaxNumberOfSigners';\nimport { read as getSigners } from './methods/getSigners';\nimport { read as getSignersCount } from './methods/getSignersCount';\nimport { read as getThreshold } from './methods/getThreshold';\nimport { read as isSigner } from './methods/isSigner';\n\nexport {\n  getSigners,\n  getSignersCount,\n  getThreshold,\n  isSigner,\n  getMaxNumberOfSigners,\n};\n","import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetMaxNumberOfSignersParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetMaxNumberOfSignersParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'MAX_NUMBER_OF_SIGNERS',\n  });\n","import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSignersParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetSignersParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSigners',\n  });\n","import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSignersCountParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetSignersCountParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getSignersCount',\n  });\n","import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetThresholdParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n}: ReadGetThresholdParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'getThreshold',\n  });\n","import { MultiSigDeleGator } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadIsSignerParameters = {\n  client: Client;\n  multiSigDeleGatorAddress: Address;\n  signer: Address;\n};\n\nexport const read = async ({\n  client,\n  multiSigDeleGatorAddress,\n  signer,\n}: ReadIsSignerParameters) =>\n  await readContract(client, {\n    address: multiSigDeleGatorAddress,\n    abi: MultiSigDeleGator.abi,\n    functionName: 'isSigner',\n    args: [signer],\n  });\n","import { simulate as addSigner } from './methods/addSigner';\nimport { simulate as initializeMultiSigDeleGator } from './methods/initialize';\nimport { simulate as reinitializeMultiSigDeleGator } from './methods/reinitialize';\nimport { simulate as removeSigner } from './methods/removeSigner';\nimport { simulate as replaceSigner } from './methods/replaceSigner';\nimport { simulate as updateMultiSigParameters } from './methods/updateMultiSigParameters';\nimport { simulate as updateThreshold } from './methods/updateThreshold';\n\nexport {\n  addSigner,\n  initializeMultiSigDeleGator,\n  reinitializeMultiSigDeleGator,\n  removeSigner,\n  replaceSigner,\n  updateMultiSigParameters,\n  updateThreshold,\n};\n","export const MAX_NUMBER_OF_SIGNERS = 30;\n","import * as read from './read';\n\nexport { read };\n","import { read as getSpentAmount } from './methods/getSpentAmount';\nimport { read as getTermsInfo } from './methods/getTermsInfo';\n\nexport { getSpentAmount, getTermsInfo };\n","import { NativeTokenTransferAmountEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetSpentAmountParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegationHash: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegationHash,\n}: ReadGetSpentAmountParameters): Promise<bigint> => {\n  const amount = await readContract(client, {\n    address: contractAddress,\n    abi: NativeTokenTransferAmountEnforcer.abi,\n    functionName: 'spentMap',\n    args: [delegationManager, delegationHash],\n  });\n\n  return amount;\n};\n","import { NativeTokenTransferAmountEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<bigint> => {\n  const allowance = await readContract(client, {\n    address: contractAddress,\n    abi: NativeTokenTransferAmountEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return allowance;\n};\n","import * as encode from './encode';\nimport * as execute from './execute';\nimport * as read from './read';\nimport * as simulate from './simulate';\n\nexport { encode, execute, read, simulate };\n","import { encode as incrementNonce } from './methods/incrementNonce';\n\nexport { incrementNonce };\n","import { NonceEnforcer } from '@metamask/delegation-abis';\nimport type { Account, Address, Chain, Client, Transport } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nexport type SimulateIncrementNonceParameters = {\n  client: Client<Transport, Chain, Account>;\n  contractAddress: Address;\n  delegationManager: Address;\n};\n\nexport const encode = (delegationManager: Address) => {\n  return encodeFunctionData({\n    abi: NonceEnforcer.abi,\n    functionName: 'incrementNonce',\n    args: [delegationManager],\n  });\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n  delegationManager,\n}: SimulateIncrementNonceParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: NonceEnforcer.abi,\n    functionName: 'incrementNonce',\n    args: [delegationManager],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  delegationManager,\n}: SimulateIncrementNonceParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    delegationManager,\n  });\n  return writeContract(client, request);\n};\n","import { execute as incrementNonce } from './methods/incrementNonce';\n\nexport { incrementNonce };\n","import { read as currentNonce } from './methods/currentNonce';\nimport { read as getTermsInfo } from './methods/getTermsInfo';\n\nexport { currentNonce, getTermsInfo };\n","import { NonceEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadCurrentNonceParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegator: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegator,\n}: ReadCurrentNonceParameters): Promise<bigint> => {\n  const nonce = await readContract(client, {\n    address: contractAddress,\n    abi: NonceEnforcer.abi,\n    functionName: 'currentNonce',\n    args: [delegationManager, delegator],\n  });\n\n  return nonce;\n};\n","import { NonceEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<bigint> => {\n  const nonce = await readContract(client, {\n    address: contractAddress,\n    abi: NonceEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return nonce;\n};\n","import { simulate as incrementNonce } from './methods/incrementNonce';\n\nexport { incrementNonce };\n","export * as read from './read';\nexport * as execute from './execute';\nexport * as encode from './encode';\nexport * as simulate from './simulate';\n","import { read as getOwner } from './methods/getOwner';\nimport { read as getPendingOwner } from './methods/getPendingOwner';\n\nexport { getPendingOwner, getOwner };\n","import { Ownable2Step } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetOwnerParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetOwnerParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'owner',\n  });\n","import { Ownable2Step } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetPendingOwnerParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadGetPendingOwnerParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'pendingOwner',\n  });\n","import { execute as acceptOwnership } from './methods/acceptOwnership';\nimport { execute as renounceOwnership } from './methods/renounceOwnership';\nimport { execute as transferOwnership } from './methods/transferOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","import { Ownable2Step } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport type { InitializedClient } from '../../types';\n\nexport type SimulateAcceptOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteAcceptOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n}: SimulateAcceptOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteAcceptOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'acceptOwnership',\n  });\n};\n","import { Ownable2Step } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport type { InitializedClient } from '../../types';\n\nexport type SimulateRenounceOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteRenounceOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n}: SimulateRenounceOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteRenounceOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'renounceOwnership',\n  });\n};\n","import { Ownable2Step } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport type { InitializedClient } from '../../types';\n\nexport type SimulateTransferOwnershipParameters = {\n  client: Client;\n  contractAddress: Address;\n  account: Address;\n};\n\nexport type ExecuteTransferOwnershipParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n  account: Address;\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n  account,\n}: SimulateTransferOwnershipParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n  account,\n}: ExecuteTransferOwnershipParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n    account,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = (account: Address) => {\n  return encodeFunctionData({\n    abi: Ownable2Step.abi,\n    functionName: 'transferOwnership',\n    args: [account],\n  });\n};\n","import { encode as acceptOwnership } from './methods/acceptOwnership';\nimport { encode as renounceOwnership } from './methods/renounceOwnership';\nimport { encode as transferOwnership } from './methods/transferOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","import { simulate as acceptOwnership } from './methods/acceptOwnership';\nimport { simulate as renounceOwnership } from './methods/renounceOwnership';\nimport { simulate as transferOwnership } from './methods/transferOwnership';\n\nexport { transferOwnership, renounceOwnership, acceptOwnership };\n","export * as read from './read';\nexport * as execute from './execute';\nexport * as encode from './encode';\nexport * as simulate from './simulate';\n","import { read as isPaused } from './methods/isPaused';\n\nexport { isPaused };\n","import { Pausable } from '@metamask/delegation-abis';\nimport type { Address, Client } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadIsPausedParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n}: ReadIsPausedParameters) =>\n  await readContract(client, {\n    address: contractAddress,\n    abi: Pausable.abi,\n    functionName: 'paused',\n  });\n","import { execute as pause } from './methods/pause';\nimport { execute as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport type { InitializedClient } from '../../types';\n\nconst PauseAbi = [\n  {\n    type: 'function',\n    name: 'pause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport type SimulatePauseParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecutePauseParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n}: SimulatePauseParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecutePauseParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: PauseAbi,\n    functionName: 'pause',\n  });\n};\n","import type { Address, Client } from 'viem';\nimport { encodeFunctionData } from 'viem';\nimport { simulateContract, writeContract } from 'viem/actions';\n\nimport type { InitializedClient } from '../../types';\n\nconst UnpauseAbi = [\n  {\n    type: 'function',\n    name: 'unpause',\n    inputs: [],\n    outputs: [],\n    stateMutability: 'nonpayable',\n  },\n];\n\nexport type SimulateUnpauseParameters = {\n  client: Client;\n  contractAddress: Address;\n};\n\nexport type ExecuteUnpauseParameters = {\n  client: InitializedClient;\n  contractAddress: Address;\n};\n\nexport const simulate = async ({\n  client,\n  contractAddress,\n}: SimulateUnpauseParameters) => {\n  return simulateContract(client, {\n    address: contractAddress,\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n\nexport const execute = async ({\n  client,\n  contractAddress,\n}: ExecuteUnpauseParameters) => {\n  const { request } = await simulate({\n    client,\n    contractAddress,\n  });\n  return writeContract(client, request);\n};\n\nexport const encode = () => {\n  return encodeFunctionData({\n    abi: UnpauseAbi,\n    functionName: 'unpause',\n  });\n};\n","import { encode as pause } from './methods/pause';\nimport { encode as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import { simulate as pause } from './methods/pause';\nimport { simulate as unpause } from './methods/unpause';\n\nexport { pause, unpause };\n","import * as encode from './encode';\nimport * as execute from './execute';\nimport * as read from './read';\nimport * as simulate from './simulate';\n\nexport { read, simulate, execute, encode };\n","import { execute as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n","import { read as getCreate2Address } from './methods/getCreate2Address';\n\nexport { getCreate2Address };\n","import { SimpleFactory } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport const read = async (\n  client: Client,\n  factoryAddress: Address,\n  creationCode: Hex,\n  salt: Hex,\n) => {\n  return readContract(client, {\n    address: factoryAddress,\n    abi: SimpleFactory.abi,\n    functionName: 'computeAddress',\n    args: [creationCode, salt],\n  });\n};\n","import { simulate as create2Deploy } from './methods/create2Deploy';\n\nexport { create2Deploy };\n","import * as read from './read';\n\nexport { read };\n","import { read as getTermsInfo } from './methods/getTermsInfo';\nimport { read as usedDelegations } from './methods/usedDelegations';\n\nexport { getTermsInfo, usedDelegations };\n","import { SpecificActionERC20TransferBatchEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadGetTermsInfoParameters = {\n  client: Client;\n  contractAddress: Address;\n  terms: Hex;\n};\n\nexport type TermsData = {\n  tokenAddress: Address;\n  recipient: Address;\n  amount: bigint;\n  firstTarget: Address;\n  firstCalldata: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  terms,\n}: ReadGetTermsInfoParameters): Promise<TermsData> => {\n  const termsData = await readContract(client, {\n    address: contractAddress,\n    abi: SpecificActionERC20TransferBatchEnforcer.abi,\n    functionName: 'getTermsInfo',\n    args: [terms],\n  });\n\n  return termsData as TermsData;\n};\n","import { SpecificActionERC20TransferBatchEnforcer } from '@metamask/delegation-abis';\nimport type { Address, Client, Hex } from 'viem';\nimport { readContract } from 'viem/actions';\n\nexport type ReadUsedDelegationsParameters = {\n  client: Client;\n  contractAddress: Address;\n  delegationManager: Address;\n  delegationHash: Hex;\n};\n\nexport const read = async ({\n  client,\n  contractAddress,\n  delegationManager,\n  delegationHash,\n}: ReadUsedDelegationsParameters): Promise<boolean> => {\n  const isUsed = await readContract(client, {\n    address: contractAddress,\n    abi: SpecificActionERC20TransferBatchEnforcer.abi,\n    functionName: 'usedDelegations',\n    args: [delegationManager, delegationHash],\n  });\n\n  return isUsed;\n};\n"],"mappings":"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","names":["encode_exports","read_exports","encode_exports","encode","simulate","execute","DelegationManager","encodeFunctionData","simulateContract","writeContract","simulate","DelegationManager","simulateContract","execute","writeContract","encode","encodeFunctionData","DelegationManager","encodeFunctionData","simulateContract","writeContract","simulate","DelegationManager","simulateContract","execute","writeContract","encode","encodeFunctionData","execute","read_exports","read","DelegationManager","DelegationManager","readContract","read","DelegationManager","readContract","read","simulate","encode_exports","execute_exports","simulate_exports","execute_exports","execute","simulate_exports","simulate","read_exports","read_exports","read","readContract","read","readContract","read","readContract","read","read_exports","read_exports","read","readContract","read","read_exports","read_exports","read","readContract","read","ERC20TransferAmountEnforcer","readContract","read","constants_exports","read_exports","simulate_exports","read_exports","read","readContract","read","HybridDeleGator","readContract","read","HybridDeleGator","readContract","read","simulate_exports","simulate","constants_exports","DOMAIN_VERSION","NAME","VERSION","NAME","VERSION","DOMAIN_VERSION","read_exports","read_exports","read","readContract","read","IdEnforcer","readContract","read","read_exports","read_exports","read","readContract","read","LimitedCallsEnforcer","readContract","read","constants_exports","encode_exports","read_exports","simulate_exports","read_exports","read","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","MultiSigDeleGator","readContract","read","simulate_exports","simulate","constants_exports","read_exports","read_exports","read","readContract","read","NativeTokenTransferAmountEnforcer","readContract","read","encode_exports","execute_exports","read_exports","simulate_exports","encode_exports","encode","encodeFunctionData","simulateContract","writeContract","encode","simulate","execute","execute_exports","execute","read_exports","read","NonceEnforcer","readContract","read","NonceEnforcer","readContract","read","simulate_exports","simulate","encode_exports","execute_exports","read_exports","simulate_exports","read_exports","read","readContract","read","Ownable2Step","readContract","read","execute_exports","execute","Ownable2Step","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","Ownable2Step","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","Ownable2Step","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encode_exports","encode","simulate_exports","simulate","encode_exports","execute_exports","read_exports","simulate_exports","read_exports","read","readContract","read","execute_exports","execute","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encodeFunctionData","simulateContract","writeContract","simulate","execute","encode","encode_exports","encode","simulate_exports","simulate","encode_exports","execute_exports","read_exports","simulate_exports","execute_exports","read_exports","read","readContract","read","simulate_exports","simulate","read_exports","read_exports","read","readContract","read","SpecificActionERC20TransferBatchEnforcer","readContract","read"]}