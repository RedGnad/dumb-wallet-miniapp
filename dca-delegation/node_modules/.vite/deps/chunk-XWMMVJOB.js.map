{
  "version": 3,
  "sources": ["../../viem/actions/getContract.ts", "../../viem/utils/siwe/parseSiweMessage.ts", "../../viem/utils/siwe/validateSiweMessage.ts", "../../viem/actions/siwe/verifySiweMessage.ts", "../../viem/clients/decorators/public.ts", "../../viem/clients/createPublicClient.ts", "../../viem/clients/decorators/test.ts", "../../viem/clients/createTestClient.ts", "../../viem/clients/decorators/wallet.ts", "../../viem/clients/createWalletClient.ts", "../../viem/clients/transports/createTransport.ts", "../../viem/clients/transports/custom.ts", "../../viem/clients/transports/fallback.ts", "../../viem/errors/transport.ts", "../../viem/clients/transports/http.ts", "../../viem/clients/transports/webSocket.ts", "../../viem/types/eip1193.ts", "../../viem/utils/abi/decodeDeployData.ts", "../../viem/utils/blob/fromBlobs.ts", "../../viem/utils/blob/sidecarsToVersionedHashes.ts", "../../viem/utils/ens/toCoinType.ts", "../../viem/utils/kzg/defineKzg.ts", "../../viem/utils/kzg/setupKzg.ts", "../../viem/utils/signature/compactSignatureToSignature.ts", "../../viem/utils/signature/parseCompactSignature.ts", "../../viem/utils/signature/recoverTransactionAddress.ts", "../../viem/utils/signature/serializeCompactSignature.ts", "../../viem/utils/signature/signatureToCompactSignature.ts"],
  "sourcesContent": ["import type {\n  Abi,\n  AbiEvent,\n  AbiFunction,\n  AbiParametersToPrimitiveTypes,\n  Address,\n  ExtractAbiEvent,\n  ExtractAbiEventNames,\n  ExtractAbiFunction,\n  ExtractAbiFunctionNames,\n} from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { Client } from '../clients/createClient.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Chain } from '../types/chain.js'\nimport type {\n  AbiEventParametersToPrimitiveTypes,\n  ContractEventName,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  MaybeExtractEventArgsFromAbi,\n} from '../types/contract.js'\nimport type {\n  IsNarrowable,\n  IsNever,\n  IsUndefined,\n  Or,\n  Prettify,\n  UnionOmit,\n} from '../types/utils.js'\nimport { getAction } from '../utils/getAction.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from './public/createContractEventFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from './public/estimateContractGas.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from './public/getContractEvents.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from './public/readContract.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from './public/simulateContract.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from './public/watchContractEvent.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from './wallet/writeContract.js'\n\ntype KeyedClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> =\n  | {\n      public?: Client<transport, chain> | undefined\n      wallet: Client<transport, chain, account>\n    }\n  | {\n      public: Client<transport, chain>\n      wallet?: Client<transport, chain, account> | undefined\n    }\n\nexport type GetContractParameters<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  abi extends Abi | readonly unknown[] = Abi,\n  client extends\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account> =\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>,\n  address extends Address = Address,\n> = {\n  /** Contract ABI */\n  abi: abi\n  /** Contract address */\n  address: address\n  /** The Client.\n   *\n   * If you pass in a [`publicClient`](https://viem.sh/docs/clients/public), the following methods are available:\n   *\n   * - [`createEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\n   * - [`getEvents`](https://viem.sh/docs/contract/getContractEvents)\n   * - [`read`](https://viem.sh/docs/contract/readContract)\n   * - [`simulate`](https://viem.sh/docs/contract/simulateContract)\n   * - [`watchEvent`](https://viem.sh/docs/contract/watchContractEvent)\n   *\n   * If you pass in a [`walletClient`](https://viem.sh/docs/clients/wallet), the following methods are available:\n   *\n   * - [`estimateGas`](https://viem.sh/docs/contract/estimateContractGas)\n   * - [`write`](https://viem.sh/docs/contract/writeContract)\n   */\n  client: client\n}\n\nexport type GetContractReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  client extends Client | KeyedClient = Client | KeyedClient,\n  address extends Address = Address,\n  //\n  _eventNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiEventNames<abi>\n    : string,\n  _readFunctionNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiFunctionNames<abi, 'pure' | 'view'>\n    : string,\n  _writeFunctionNames extends string = abi extends Abi\n    ? Abi extends abi\n      ? string\n      : ExtractAbiFunctionNames<abi, 'nonpayable' | 'payable'>\n    : string,\n  _narrowable extends boolean = IsNarrowable<abi, Abi>,\n  _publicClient extends Client | unknown = client extends {\n    public: Client\n  }\n    ? client['public']\n    : client,\n  _walletClient extends Client | unknown = client extends {\n    wallet: Client\n  }\n    ? client['wallet']\n    : client,\n> = Prettify<\n  Prettify<\n    (_publicClient extends Client\n      ? (IsNever<_readFunctionNames> extends true\n          ? unknown\n          : {\n              /**\n               * Calls a read-only function on a contract, and returns the response.\n               *\n               * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n               *\n               * Internally, `read` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n               *\n               * @example\n               * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const publicClient = createPublicClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi([\n               *     'function balanceOf(address owner) view returns (uint256)',\n               *   ]),\n               *   client: publicClient,\n               * })\n               * const result = await contract.read.balanceOf(['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'])\n               * // 424122n\n               */\n              read: {\n                [functionName in _readFunctionNames]: GetReadFunction<\n                  _narrowable,\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'pure' | 'view'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n            }) &\n          (IsNever<_writeFunctionNames> extends true\n            ? unknown\n            : {\n                /**\n                 * Estimates the gas necessary to complete a transaction without submitting it to the network.\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['function mint() public']),\n                 *   client: publicClient,\n                 * })\n                 * const gas = await contract.estimateGas.mint({\n                 *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n                 * })\n                 */\n                estimateGas: {\n                  [functionName in _writeFunctionNames]: GetEstimateFunction<\n                    _narrowable,\n                    _publicClient['chain'],\n                    undefined,\n                    abi,\n                    functionName extends ContractFunctionName<\n                      abi,\n                      'nonpayable' | 'payable'\n                    >\n                      ? functionName\n                      : never\n                  >\n                }\n                /**\n                 * Simulates/validates a contract interaction. This is useful for retrieving return data and revert reasons of contract write functions.\n                 *\n                 * This function does not require gas to execute and does not change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n                 *\n                 * Internally, `simulate` uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['function mint() public']),\n                 *   client: publicClient,\n                 * })\n                 * const result = await contract.simulate.mint({\n                 *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n                 * })\n                 */\n                simulate: {\n                  [functionName in _writeFunctionNames]: GetSimulateFunction<\n                    _narrowable,\n                    _publicClient['chain'],\n                    _walletClient extends Client\n                      ? _walletClient['account']\n                      : _publicClient['account'],\n                    abi,\n                    functionName extends ContractFunctionName<\n                      abi,\n                      'nonpayable' | 'payable'\n                    >\n                      ? functionName\n                      : never\n                  >\n                }\n              }) &\n          (IsNever<_eventNames> extends true\n            ? unknown\n            : {\n                /**\n                 * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 */\n                createEventFilter: {\n                  [EventName in _eventNames]: GetEventFilter<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n                /**\n                 * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 */\n                getEvents: {\n                  [EventName in _eventNames]: GetEventsFunction<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n                /**\n                 * Watches and returns emitted contract event logs.\n                 *\n                 * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n                 *\n                 * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n                 *\n                 * @example\n                 * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n                 * import { mainnet } from 'viem/chains'\n                 *\n                 * const publicClient = createPublicClient({\n                 *   chain: mainnet,\n                 *   transport: http(),\n                 * })\n                 * const contract = getContract({\n                 *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n                 *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n                 *   client: publicClient,\n                 * })\n                 * const filter = await contract.createEventFilter.Transfer()\n                 * const unwatch = contract.watchEvent.Transfer(\n                 *   { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n                 *   { onLogs: (logs) => console.log(logs) },\n                 * )\n                 */\n                watchEvent: {\n                  [EventName in _eventNames]: GetWatchEvent<\n                    _narrowable,\n                    abi,\n                    EventName extends ContractEventName<abi> ? EventName : never\n                  >\n                }\n              })\n      : unknown) &\n      (_walletClient extends Client\n        ? IsNever<_writeFunctionNames> extends true\n          ? unknown\n          : {\n              /**\n               * Estimates the gas necessary to complete a transaction without submitting it to the network.\n               *\n               * @example\n               * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const walletClient = createWalletClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint() public']),\n               *   client: walletClient,\n               * })\n               * const gas = await contract.estimateGas.mint({\n               *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n               * })\n               */\n              estimateGas: {\n                [functionName in _writeFunctionNames]: GetEstimateFunction<\n                  _narrowable,\n                  _walletClient['chain'],\n                  _walletClient['account'],\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'nonpayable' | 'payable'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n              /**\n               * Executes a write function on a contract.\n               *\n               * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n               *\n               * Internally, `write` uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n               *\n               * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n               *\n               * @example\n               * import { createWalletClient, getContract, http, parseAbi } from 'viem'\n               * import { mainnet } from 'viem/chains'\n               *\n               * const walletClient = createWalletClient({\n               *   chain: mainnet,\n               *   transport: http(),\n               * })\n               * const contract = getContract({\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n               *   client: walletClient,\n               * })\n               * const hash = await contract.write.min([69420], {\n               *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n               * })\n               */\n              write: {\n                [functionName in _writeFunctionNames]: GetWriteFunction<\n                  _narrowable,\n                  _walletClient['chain'],\n                  _walletClient['account'],\n                  abi,\n                  functionName extends ContractFunctionName<\n                    abi,\n                    'nonpayable' | 'payable'\n                  >\n                    ? functionName\n                    : never\n                >\n              }\n            }\n        : unknown)\n  > & { address: address; abi: abi }\n>\n\nexport type GetContractErrorType = ErrorType\n\n/**\n * Gets type-safe interface for performing contract-related actions with a specific `abi` and `address`.\n *\n * - Docs https://viem.sh/docs/contract/getContract\n *\n * Using Contract Instances can make it easier to work with contracts if you don't want to pass the `abi` and `address` properties every time you perform contract actions, e.g. [`readContract`](https://viem.sh/docs/contract/readContract), [`writeContract`](https://viem.sh/docs/contract/writeContract), [`estimateContractGas`](https://viem.sh/docs/contract/estimateContractGas), etc.\n *\n * @example\n * import { createPublicClient, getContract, http, parseAbi } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const publicClient = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const contract = getContract({\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n *   abi: parseAbi([\n *     'function balanceOf(address owner) view returns (uint256)',\n *     'function ownerOf(uint256 tokenId) view returns (address)',\n *     'function totalSupply() view returns (uint256)',\n *   ]),\n *   client: publicClient,\n * })\n */\nexport function getContract<\n  transport extends Transport,\n  address extends Address,\n  const abi extends Abi | readonly unknown[],\n  const client extends\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>({\n  abi,\n  address,\n  client: client_,\n}: GetContractParameters<\n  transport,\n  chain,\n  account,\n  abi,\n  client,\n  address\n>): GetContractReturnType<abi, client, address> {\n  const client = client_ as\n    | Client<transport, chain, account>\n    | KeyedClient<transport, chain, account>\n\n  const [publicClient, walletClient] = (() => {\n    if (!client) return [undefined, undefined]\n    if ('public' in client && 'wallet' in client)\n      return [client.public as Client, client.wallet as Client]\n    if ('public' in client) return [client.public as Client, undefined]\n    if ('wallet' in client) return [undefined, client.wallet as Client]\n    return [client, client]\n  })()\n\n  const hasPublicClient = publicClient !== undefined && publicClient !== null\n  const hasWalletClient = walletClient !== undefined && walletClient !== null\n\n  const contract: {\n    [_ in\n      | 'abi'\n      | 'address'\n      | 'createEventFilter'\n      | 'estimateGas'\n      | 'getEvents'\n      | 'read'\n      | 'simulate'\n      | 'watchEvent'\n      | 'write']?: unknown\n  } = {}\n\n  let hasReadFunction = false\n  let hasWriteFunction = false\n  let hasEvent = false\n  for (const item of abi as Abi) {\n    if (item.type === 'function')\n      if (item.stateMutability === 'view' || item.stateMutability === 'pure')\n        hasReadFunction = true\n      else hasWriteFunction = true\n    else if (item.type === 'event') hasEvent = true\n    // Exit early if all flags are `true`\n    if (hasReadFunction && hasWriteFunction && hasEvent) break\n  }\n\n  if (hasPublicClient) {\n    if (hasReadFunction)\n      contract.read = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | undefined,\n                options?: UnionOmit<\n                  ReadContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                readContract,\n                'readContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as ReadContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasWriteFunction)\n      contract.simulate = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  SimulateContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                publicClient,\n                simulateContract,\n                'simulateContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n              } as SimulateContractParameters)\n            }\n          },\n        },\n      )\n\n    if (hasEvent) {\n      contract.createEventFilter = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  CreateContractEventFilterParameters,\n                  'abi' | 'address' | 'eventName' | 'args'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                createContractEventFilter,\n                'createContractEventFilter',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as CreateContractEventFilterParameters)\n            }\n          },\n        },\n      )\n      contract.getEvents = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  GetContractEventsParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                getContractEvents,\n                'getContractEvents',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as GetContractEventsParameters)\n            }\n          },\n        },\n      )\n      contract.watchEvent = new Proxy(\n        {},\n        {\n          get(_, eventName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[] | object,\n                options?: Omit<\n                  WatchContractEventParameters,\n                  'abi' | 'address' | 'eventName'\n                >,\n              ]\n            ) => {\n              const abiEvent = (abi as readonly AbiEvent[]).find(\n                (x: AbiEvent) => x.type === 'event' && x.name === eventName,\n              )\n              const { args, options } = getEventParameters(\n                parameters,\n                abiEvent!,\n              )\n              return getAction(\n                publicClient,\n                watchContractEvent,\n                'watchContractEvent',\n              )({\n                abi,\n                address,\n                eventName,\n                args,\n                ...options,\n              } as unknown as WatchContractEventParameters)\n            }\n          },\n        },\n      )\n    }\n  }\n\n  if (hasWalletClient) {\n    if (hasWriteFunction)\n      contract.write = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  WriteContractParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              return getAction(\n                walletClient,\n                writeContract,\n                'writeContract',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...(options as any),\n              })\n            }\n          },\n        },\n      )\n  }\n\n  if (hasPublicClient || hasWalletClient)\n    if (hasWriteFunction)\n      contract.estimateGas = new Proxy(\n        {},\n        {\n          get(_, functionName: string) {\n            return (\n              ...parameters: [\n                args?: readonly unknown[],\n                options?: UnionOmit<\n                  EstimateContractGasParameters,\n                  'abi' | 'address' | 'functionName' | 'args'\n                >,\n              ]\n            ) => {\n              const { args, options } = getFunctionParameters(parameters)\n              const client = (publicClient ?? walletClient)!\n              return getAction(\n                client,\n                estimateContractGas,\n                'estimateContractGas',\n              )({\n                abi,\n                address,\n                functionName,\n                args,\n                ...options,\n                account:\n                  (options as EstimateContractGasParameters).account ??\n                  (walletClient as unknown as Client).account,\n              } as any)\n            }\n          },\n        },\n      )\n  contract.address = address\n  contract.abi = abi\n\n  return contract as unknown as GetContractReturnType<abi, client, address>\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getFunctionParameters(\n  values: [args?: readonly unknown[] | undefined, options?: object | undefined],\n) {\n  const hasArgs = values.length && Array.isArray(values[0])\n  const args = hasArgs ? values[0]! : []\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\n/**\n * @internal exporting for testing only\n */\nexport function getEventParameters(\n  values: [args?: object | unknown[], options?: object],\n  abiEvent: AbiEvent,\n) {\n  let hasArgs = false\n  // If first item is array, must be `args`\n  if (Array.isArray(values[0])) hasArgs = true\n  // Check if first item is `args` or `options`\n  else if (values.length === 1) {\n    // if event has indexed inputs, must have `args`\n    hasArgs = abiEvent.inputs.some((x) => x.indexed)\n    // If there are two items in array, must have `args`\n  } else if (values.length === 2) {\n    hasArgs = true\n  }\n\n  const args = hasArgs ? values[0]! : undefined\n  const options = (hasArgs ? values[1] : values[0]) ?? {}\n  return { args, options }\n}\n\ntype GetReadFunction<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'pure' | 'view',\n    functionName\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  _options = Prettify<\n    UnionOmit<\n      ReadContractParameters<abi, functionName, args>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n> = narrowable extends true\n  ? (\n      ...parameters: _args extends readonly []\n        ? [options?: _options]\n        : [args: _args, options?: _options]\n    ) => Promise<ReadContractReturnType<abi, functionName, args>>\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [args: readonly unknown[], options?: _options]\n    ) => Promise<ReadContractReturnType>\n\ntype GetEstimateFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  _options = Prettify<\n    UnionOmit<\n      EstimateContractGasParameters<abi, functionName, args, chain>,\n      'abi' | 'address' | 'args' | 'functionName'\n    >\n  >,\n  // For making `options` parameter required if `account`\n  IsOptionsRequired = IsUndefined<account>,\n> = narrowable extends true\n  ? (\n      ...parameters: _args extends readonly []\n        ? IsOptionsRequired extends true\n          ? [options: _options]\n          : [options?: _options]\n        : [\n            args: _args,\n            ...parameters: IsOptionsRequired extends true\n              ? [options: _options]\n              : [options?: _options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n  : (\n      ...parameters:\n        | (IsOptionsRequired extends true\n            ? [options: _options]\n            : [options?: _options])\n        | [\n            args: readonly unknown[],\n            ...parameters: IsOptionsRequired extends true\n              ? [options: _options]\n              : [options?: _options],\n          ]\n    ) => Promise<EstimateContractGasReturnType>\n\ntype GetSimulateFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n> = narrowable extends true\n  ? <\n      chainOverride extends Chain | undefined = undefined,\n      accountOverride extends Account | Address | undefined = undefined,\n    >(\n      ...parameters: _args extends readonly []\n        ? [\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n        : [\n            args: _args,\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n    ) => Promise<\n      SimulateContractReturnType<\n        abi,\n        functionName,\n        args,\n        chain,\n        account,\n        chainOverride,\n        accountOverride\n      >\n    >\n  : <\n      chainOverride extends Chain | undefined = undefined,\n      accountOverride extends Account | Address | undefined = undefined,\n    >(\n      ...parameters:\n        | [\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n        | [\n            args: readonly unknown[],\n            options?: Omit<\n              SimulateContractParameters<\n                abi,\n                functionName,\n                args,\n                chain,\n                chainOverride,\n                accountOverride\n              >,\n              'abi' | 'address' | 'args' | 'functionName'\n            >,\n          ]\n    ) => Promise<SimulateContractReturnType>\n\ntype GetWriteFunction<\n  narrowable extends boolean,\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n  args extends ContractFunctionArgs<\n    abi,\n    'nonpayable' | 'payable',\n    functionName\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\n  abiFunction extends AbiFunction = abi extends Abi\n    ? ExtractAbiFunction<abi, functionName>\n    : AbiFunction,\n  //\n  _args = AbiParametersToPrimitiveTypes<abiFunction['inputs']>,\n  // For making `options` parameter required if `account` or `chain` is undefined\n  _isOptionsRequired = Or<[IsUndefined<account>, IsUndefined<chain>]>,\n> = narrowable extends true\n  ? <\n      chainOverride extends Chain | undefined,\n      options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            abi,\n            functionName,\n            args,\n            chain,\n            account,\n            chainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n    >(\n      ...parameters: _args extends readonly []\n        ? _isOptionsRequired extends true\n          ? [options: options]\n          : [options?: options]\n        : [\n            args: _args,\n            ...parameters: _isOptionsRequired extends true\n              ? [options: options]\n              : [options?: options],\n          ]\n    ) => Promise<WriteContractReturnType>\n  : <\n      chainOverride extends Chain | undefined,\n      options extends Prettify<\n        UnionOmit<\n          WriteContractParameters<\n            abi,\n            functionName,\n            args,\n            chain,\n            account,\n            chainOverride\n          >,\n          'abi' | 'address' | 'args' | 'functionName'\n        >\n      >,\n      Rest extends unknown[] = _isOptionsRequired extends true\n        ? [options: options]\n        : [options?: options],\n    >(\n      ...parameters: Rest | [args: readonly unknown[], ...parameters: Rest]\n    ) => Promise<WriteContractReturnType>\n\ntype GetEventFilter<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      CreateContractEventFilterParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName' | 'strict'\n    >\n  >,\n  IndexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? <\n      const args extends\n        | MaybeExtractEventArgsFromAbi<abi, eventName>\n        | undefined,\n      strict extends boolean | undefined = undefined,\n    >(\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: _options & { strict?: strict }]\n        : [\n            args: _args | (_args extends args ? Readonly<args> : never),\n            options?: _options & { strict?: strict },\n          ]\n    ) => Promise<\n      CreateContractEventFilterReturnType<abi, eventName, args, strict>\n    >\n  : <strict extends boolean | undefined = undefined>(\n      ...parameters:\n        | [options?: _options & { strict?: strict }]\n        | [\n            args: readonly unknown[] | CreateContractFilterOptions,\n            options?: _options & { strict?: strict },\n          ]\n    ) => Promise<CreateContractEventFilterReturnType>\n\ntype GetEventsFunction<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      GetContractEventsParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  IndexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? (\n      ...parameters: IsNever<IndexedInputs> extends true\n        ? [options?: _options]\n        : [args?: _args, options?: _options]\n    ) => Promise<GetContractEventsReturnType<abi, eventName>>\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [\n            args?: readonly unknown[] | WatchContractEventOptions,\n            options?: _options,\n          ]\n    ) => Promise<GetContractEventsReturnType<abi, eventName>>\n\ntype GetWatchEvent<\n  narrowable extends boolean,\n  abi extends Abi | readonly unknown[],\n  eventName extends ContractEventName<abi>,\n  abiEvent extends AbiEvent = abi extends Abi\n    ? ExtractAbiEvent<abi, eventName>\n    : AbiEvent,\n  //\n  _args = AbiEventParametersToPrimitiveTypes<abiEvent['inputs']>,\n  _options = Prettify<\n    Omit<\n      WatchContractEventParameters<abi, eventName>,\n      'abi' | 'address' | 'args' | 'eventName'\n    >\n  >,\n  _indexedInputs = Extract<abiEvent['inputs'][number], { indexed: true }>,\n> = narrowable extends true\n  ? (\n      ...parameters: IsNever<_indexedInputs> extends true\n        ? [options: _options]\n        : [args: _args, options: _options]\n    ) => WatchContractEventReturnType\n  : (\n      ...parameters:\n        | [options?: _options]\n        | [\n            args: readonly unknown[] | WatchContractEventOptions,\n            options?: _options,\n          ]\n    ) => WatchContractEventReturnType\n\ntype CreateContractFilterOptions =\n  RemoveProperties<CreateContractEventFilterParameters>\ntype WatchContractEventOptions = RemoveProperties<WatchContractEventParameters>\n\ntype RemoveProperties<T extends object> = Prettify<\n  {\n    [key: string]: unknown\n  } & {\n    [_ in keyof T]?: never\n  }\n>\n", "import type { Address } from 'abitype'\n\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\nimport type { SiweMessage } from './types.js'\n\n/**\n * @description Parses EIP-4361 formatted message into message fields object.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n *\n * @returns EIP-4361 fields object\n */\nexport function parseSiweMessage(\n  message: string,\n): Prettify<ExactPartial<SiweMessage>> {\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n    ?.groups ?? {}) as {\n    address: Address\n    domain: string\n    scheme?: string\n    statement?: string\n  }\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\n    (message.match(suffixRegex)?.groups ?? {}) as {\n      chainId: string\n      expirationTime?: string\n      issuedAt?: string\n      nonce: string\n      notBefore?: string\n      requestId?: string\n      uri: string\n      version: '1'\n    }\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\n  return {\n    ...prefix,\n    ...suffix,\n    ...(chainId ? { chainId: Number(chainId) } : {}),\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n    ...(requestId ? { requestId } : {}),\n    ...(resources ? { resources } : {}),\n    ...(scheme ? { scheme } : {}),\n    ...(statement ? { statement } : {}),\n  }\n}\n\n// https://regexr.com/80gdj\nconst prefixRegex =\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\n\n// https://regexr.com/80gf9\nconst suffixRegex =\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\n", "import type { Address } from 'abitype'\n\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../address/isAddress.js'\nimport { isAddressEqual } from '../address/isAddressEqual.js'\nimport type { SiweMessage } from './types.js'\n\nexport type ValidateSiweMessageParameters = {\n  /**\n   * Ethereum address to check against.\n   */\n  address?: Address | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\n   */\n  domain?: string | undefined\n  /**\n   * EIP-4361 message fields.\n   */\n  message: ExactPartial<SiweMessage>\n  /**\n   * Random string to check against.\n   */\n  nonce?: string | undefined\n  /**\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\n   */\n  scheme?: string | undefined\n  /**\n   * Current time to check optional `expirationTime` and `notBefore` fields.\n   *\n   * @default new Date()\n   */\n  time?: Date | undefined\n}\n\nexport type ValidateSiweMessageReturnType = boolean\n\n/**\n * @description Validates EIP-4361 message.\n *\n * @see https://eips.ethereum.org/EIPS/eip-4361\n */\nexport function validateSiweMessage(\n  parameters: ValidateSiweMessageParameters,\n): ValidateSiweMessageReturnType {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    time = new Date(),\n  } = parameters\n\n  if (domain && message.domain !== domain) return false\n  if (nonce && message.nonce !== nonce) return false\n  if (scheme && message.scheme !== scheme) return false\n\n  if (message.expirationTime && time >= message.expirationTime) return false\n  if (message.notBefore && time < message.notBefore) return false\n\n  try {\n    if (!message.address) return false\n    if (!isAddress(message.address, { strict: false })) return false\n    if (address && !isAddressEqual(message.address, address)) return false\n  } catch {\n    return false\n  }\n\n  return true\n}\n", "import type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js'\nimport {\n  type ValidateSiweMessageParameters,\n  validateSiweMessage,\n} from '../../utils/siwe/validateSiweMessage.js'\nimport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  verifyHash,\n} from '../public/verifyHash.js'\n\nexport type VerifySiweMessageParameters = Prettify<\n  Pick<VerifyHashParameters, 'blockNumber' | 'blockTag'> &\n    Pick<\n      ValidateSiweMessageParameters,\n      'address' | 'domain' | 'nonce' | 'scheme' | 'time'\n    > & {\n      /**\n       * EIP-4361 formatted message.\n       */\n      message: string\n      /**\n       * Signature to check against.\n       */\n      signature: Hex\n    }\n>\n\nexport type VerifySiweMessageReturnType = boolean\n\nexport type VerifySiweMessageErrorType =\n  | HashMessageErrorType\n  | VerifyHashErrorType\n  | ErrorType\n\n/**\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n *\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n *\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifySiweMessageParameters}\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n */\nexport async function verifySiweMessage<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifySiweMessageParameters,\n): Promise<VerifySiweMessageReturnType> {\n  const {\n    address,\n    domain,\n    message,\n    nonce,\n    scheme,\n    signature,\n    time = new Date(),\n    ...callRequest\n  } = parameters\n\n  const parsed = parseSiweMessage(message)\n  if (!parsed.address) return false\n\n  const isValid = validateSiweMessage({\n    address,\n    domain,\n    message: parsed,\n    nonce,\n    scheme,\n    time,\n  })\n  if (!isValid) return false\n\n  const hash = hashMessage(message)\n  return verifyHash(client, {\n    address: parsed.address,\n    hash,\n    signature,\n    ...callRequest,\n  })\n}\n", "import type { Abi, AbiEvent, Address } from 'abitype'\n\nimport {\n  type GetEnsAddressParameters,\n  type GetEnsAddressReturnType,\n  getEnsAddress,\n} from '../../actions/ens/getEnsAddress.js'\nimport {\n  type GetEnsAvatarParameters,\n  type GetEnsAvatarReturnType,\n  getEnsAvatar,\n} from '../../actions/ens/getEnsAvatar.js'\nimport {\n  type GetEnsNameParameters,\n  type GetEnsNameReturnType,\n  getEnsName,\n} from '../../actions/ens/getEnsName.js'\nimport {\n  type GetEnsResolverParameters,\n  type GetEnsResolverReturnType,\n  getEnsResolver,\n} from '../../actions/ens/getEnsResolver.js'\nimport {\n  type GetEnsTextParameters,\n  type GetEnsTextReturnType,\n  getEnsText,\n} from '../../actions/ens/getEnsText.js'\nimport {\n  type CallParameters,\n  type CallReturnType,\n  call,\n} from '../../actions/public/call.js'\nimport {\n  type CreateAccessListParameters,\n  type CreateAccessListReturnType,\n  createAccessList,\n} from '../../actions/public/createAccessList.js'\nimport {\n  type CreateBlockFilterReturnType,\n  createBlockFilter,\n} from '../../actions/public/createBlockFilter.js'\nimport {\n  type CreateContractEventFilterParameters,\n  type CreateContractEventFilterReturnType,\n  createContractEventFilter,\n} from '../../actions/public/createContractEventFilter.js'\nimport {\n  type CreateEventFilterParameters,\n  type CreateEventFilterReturnType,\n  createEventFilter,\n} from '../../actions/public/createEventFilter.js'\nimport {\n  type CreatePendingTransactionFilterReturnType,\n  createPendingTransactionFilter,\n} from '../../actions/public/createPendingTransactionFilter.js'\nimport {\n  type EstimateContractGasParameters,\n  type EstimateContractGasReturnType,\n  estimateContractGas,\n} from '../../actions/public/estimateContractGas.js'\nimport {\n  type EstimateFeesPerGasParameters,\n  type EstimateFeesPerGasReturnType,\n  estimateFeesPerGas,\n} from '../../actions/public/estimateFeesPerGas.js'\nimport {\n  type EstimateGasParameters,\n  type EstimateGasReturnType,\n  estimateGas,\n} from '../../actions/public/estimateGas.js'\nimport {\n  type EstimateMaxPriorityFeePerGasParameters,\n  type EstimateMaxPriorityFeePerGasReturnType,\n  estimateMaxPriorityFeePerGas,\n} from '../../actions/public/estimateMaxPriorityFeePerGas.js'\nimport {\n  type GetBalanceParameters,\n  type GetBalanceReturnType,\n  getBalance,\n} from '../../actions/public/getBalance.js'\nimport {\n  type GetBlobBaseFeeReturnType,\n  getBlobBaseFee,\n} from '../../actions/public/getBlobBaseFee.js'\nimport {\n  type GetBlockParameters,\n  type GetBlockReturnType,\n  getBlock,\n} from '../../actions/public/getBlock.js'\nimport {\n  type GetBlockNumberParameters,\n  type GetBlockNumberReturnType,\n  getBlockNumber,\n} from '../../actions/public/getBlockNumber.js'\nimport {\n  type GetBlockTransactionCountParameters,\n  type GetBlockTransactionCountReturnType,\n  getBlockTransactionCount,\n} from '../../actions/public/getBlockTransactionCount.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type GetCodeParameters,\n  type GetCodeReturnType,\n  getCode,\n} from '../../actions/public/getCode.js'\nimport {\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n  getContractEvents,\n} from '../../actions/public/getContractEvents.js'\nimport {\n  type GetEip712DomainParameters,\n  type GetEip712DomainReturnType,\n  getEip712Domain,\n} from '../../actions/public/getEip712Domain.js'\nimport {\n  type GetFeeHistoryParameters,\n  type GetFeeHistoryReturnType,\n  getFeeHistory,\n} from '../../actions/public/getFeeHistory.js'\nimport {\n  type GetFilterChangesParameters,\n  type GetFilterChangesReturnType,\n  getFilterChanges,\n} from '../../actions/public/getFilterChanges.js'\nimport {\n  type GetFilterLogsParameters,\n  type GetFilterLogsReturnType,\n  getFilterLogs,\n} from '../../actions/public/getFilterLogs.js'\nimport {\n  type GetGasPriceReturnType,\n  getGasPrice,\n} from '../../actions/public/getGasPrice.js'\nimport {\n  type GetLogsParameters,\n  type GetLogsReturnType,\n  getLogs,\n} from '../../actions/public/getLogs.js'\nimport {\n  type GetProofParameters,\n  type GetProofReturnType,\n  getProof,\n} from '../../actions/public/getProof.js'\nimport {\n  type GetStorageAtParameters,\n  type GetStorageAtReturnType,\n  getStorageAt,\n} from '../../actions/public/getStorageAt.js'\nimport {\n  type GetTransactionParameters,\n  type GetTransactionReturnType,\n  getTransaction,\n} from '../../actions/public/getTransaction.js'\nimport {\n  type GetTransactionConfirmationsParameters,\n  type GetTransactionConfirmationsReturnType,\n  getTransactionConfirmations,\n} from '../../actions/public/getTransactionConfirmations.js'\nimport {\n  type GetTransactionCountParameters,\n  type GetTransactionCountReturnType,\n  getTransactionCount,\n} from '../../actions/public/getTransactionCount.js'\nimport {\n  type GetTransactionReceiptParameters,\n  type GetTransactionReceiptReturnType,\n  getTransactionReceipt,\n} from '../../actions/public/getTransactionReceipt.js'\nimport {\n  type MulticallParameters,\n  type MulticallReturnType,\n  multicall,\n} from '../../actions/public/multicall.js'\nimport {\n  type ReadContractParameters,\n  type ReadContractReturnType,\n  readContract,\n} from '../../actions/public/readContract.js'\nimport {\n  type SimulateBlocksParameters,\n  type SimulateBlocksReturnType,\n  simulateBlocks,\n} from '../../actions/public/simulateBlocks.js'\nimport {\n  type SimulateCallsParameters,\n  type SimulateCallsReturnType,\n  simulateCalls,\n} from '../../actions/public/simulateCalls.js'\nimport {\n  type SimulateContractParameters,\n  type SimulateContractReturnType,\n  simulateContract,\n} from '../../actions/public/simulateContract.js'\nimport {\n  type UninstallFilterParameters,\n  type UninstallFilterReturnType,\n  uninstallFilter,\n} from '../../actions/public/uninstallFilter.js'\nimport {\n  type VerifyHashParameters,\n  type VerifyHashReturnType,\n  verifyHash,\n} from '../../actions/public/verifyHash.js'\nimport {\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from '../../actions/public/verifyMessage.js'\nimport {\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from '../../actions/public/verifyTypedData.js'\nimport {\n  type WaitForTransactionReceiptParameters,\n  type WaitForTransactionReceiptReturnType,\n  waitForTransactionReceipt,\n} from '../../actions/public/waitForTransactionReceipt.js'\nimport {\n  type WatchBlockNumberParameters,\n  type WatchBlockNumberReturnType,\n  watchBlockNumber,\n} from '../../actions/public/watchBlockNumber.js'\nimport {\n  type WatchBlocksParameters,\n  type WatchBlocksReturnType,\n  watchBlocks,\n} from '../../actions/public/watchBlocks.js'\nimport {\n  type WatchContractEventParameters,\n  type WatchContractEventReturnType,\n  watchContractEvent,\n} from '../../actions/public/watchContractEvent.js'\nimport {\n  type WatchEventParameters,\n  type WatchEventReturnType,\n  watchEvent,\n} from '../../actions/public/watchEvent.js'\nimport {\n  type WatchPendingTransactionsParameters,\n  type WatchPendingTransactionsReturnType,\n  watchPendingTransactions,\n} from '../../actions/public/watchPendingTransactions.js'\nimport {\n  type VerifySiweMessageParameters,\n  type VerifySiweMessageReturnType,\n  verifySiweMessage,\n} from '../../actions/siwe/verifySiweMessage.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestRequest,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport {\n  type SendRawTransactionSyncParameters,\n  type SendRawTransactionSyncReturnType,\n  sendRawTransactionSync,\n} from '../../actions/wallet/sendRawTransactionSync.js'\nimport type { Account } from '../../types/account.js'\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractEventName,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n} from '../../types/contract.js'\nimport type { FeeValuesType } from '../../types/fee.js'\nimport type { FilterType } from '../../types/filter.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type PublicActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Executes a new message call immediately without submitting a transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/call\n   * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\n   *\n   * @param args - {@link CallParameters}\n   * @returns The call data. {@link CallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const data = await client.call({\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  call: (parameters: CallParameters<chain>) => Promise<CallReturnType>\n  /**\n   * Creates an EIP-2930 access list that you can include in a transaction.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createAccessList\n   * - JSON-RPC Methods: `eth_createAccessList`\n   *\n   * @param args - {@link CreateAccessListParameters}\n   * @returns The call data. {@link CreateAccessListReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const data = await client.createAccessList({\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   * })\n   */\n  createAccessList: (\n    parameters: CreateAccessListParameters<chain>,\n  ) => Promise<CreateAccessListReturnType>\n  /**\n   * Creates a Filter to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\n   * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\n   *\n   * @returns Filter. {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, createBlockFilter, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await createBlockFilter(client)\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\n   */\n  createBlockFilter: () => Promise<CreateBlockFilterReturnType>\n  /**\n   * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\n   *\n   * - Docs: https://viem.sh/docs/contract/createContractEventFilter\n   *\n   * @param args - {@link CreateContractEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   * })\n   */\n  createContractEventFilter: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi> | undefined,\n    args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: CreateContractEventFilterParameters<\n      abi,\n      eventName,\n      args,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    CreateContractEventFilterReturnType<\n      abi,\n      eventName,\n      args,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  >\n  /**\n   * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createEventFilter\n   * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\n   *\n   * @param args - {@link CreateEventFilterParameters}\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n   * })\n   */\n  createEventFilter: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n    _EventName extends string | undefined = MaybeAbiEventName<abiEvent>,\n    _Args extends\n      | MaybeExtractEventArgsFromAbi<abiEvents, _EventName>\n      | undefined = undefined,\n  >(\n    args?:\n      | CreateEventFilterParameters<\n          abiEvent,\n          abiEvents,\n          strict,\n          fromBlock,\n          toBlock,\n          _EventName,\n          _Args\n        >\n      | undefined,\n  ) => Promise<\n    CreateEventFilterReturnType<\n      abiEvent,\n      abiEvents,\n      strict,\n      fromBlock,\n      toBlock,\n      _EventName,\n      _Args\n    >\n  >\n  /**\n   * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\n   * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\n   *\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\n   */\n  createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\n  /**\n   * Estimates the gas required to successfully execute a contract write function call.\n   *\n   * - Docs: https://viem.sh/docs/contract/estimateContractGas\n   *\n   * @remarks\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link EstimateContractGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gas = await client.estimateContractGas({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint() public']),\n   *   functionName: 'mint',\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   * })\n   */\n  estimateContractGas: <\n    chain extends Chain | undefined,\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n  >(\n    args: EstimateContractGasParameters<abi, functionName, args, chain>,\n  ) => Promise<EstimateContractGasReturnType>\n  /**\n   * Estimates the gas necessary to complete a transaction without submitting it to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateGas\n   * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\n   *\n   * @param args - {@link EstimateGasParameters}\n   * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasEstimate = await client.estimateGas({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: parseEther('1'),\n   * })\n   */\n  estimateGas: (\n    args: EstimateGasParameters<chain>,\n  ) => Promise<EstimateGasReturnType>\n  /**\n   * Returns the balance of an address in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBalance\n   * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\n   *\n   * @remarks\n   * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\n   *\n   * ```ts\n   * const balance = await getBalance(client, {\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   blockTag: 'safe'\n   * })\n   * const balanceAsEther = formatEther(balance)\n   * // \"6.942\"\n   * ```\n   *\n   * @param args - {@link GetBalanceParameters}\n   * @returns The balance of the address in wei. {@link GetBalanceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const balance = await client.getBalance({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   * // 10000000000000000000000n (wei)\n   */\n  getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\n  /**\n   * Returns the base fee per blob gas in wei.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\n   * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\n   *\n   * @param client - Client to use\n   * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getBlobBaseFee } from 'viem/public'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blobBaseFee = await client.getBlobBaseFee()\n   */\n  getBlobBaseFee: () => Promise<GetBlobBaseFeeReturnType>\n  /**\n   * Returns information about a block at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlock\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockParameters}\n   * @returns Information about the block. {@link GetBlockReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getBlock()\n   */\n  getBlock: <\n    includeTransactions extends boolean = false,\n    blockTag extends BlockTag = 'latest',\n  >(\n    args?: GetBlockParameters<includeTransactions, blockTag> | undefined,\n  ) => Promise<GetBlockReturnType<chain, includeTransactions, blockTag>>\n  /**\n   * Returns the number of the most recent block seen.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_fetching-blocks\n   * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\n   *\n   * @param args - {@link GetBlockNumberParameters}\n   * @returns The number of the block. {@link GetBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const blockNumber = await client.getBlockNumber()\n   * // 69420n\n   */\n  getBlockNumber: (\n    args?: GetBlockNumberParameters | undefined,\n  ) => Promise<GetBlockNumberReturnType>\n  /**\n   * Returns the number of Transactions at a block number, hash, or tag.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\n   *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\n   *\n   * @param args - {@link GetBlockTransactionCountParameters}\n   * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const count = await client.getBlockTransactionCount()\n   */\n  getBlockTransactionCount: (\n    args?: GetBlockTransactionCountParameters | undefined,\n  ) => Promise<GetBlockTransactionCountReturnType>\n  /** @deprecated Use `getCode` instead. */\n  getBytecode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Retrieves the bytecode at an address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getCode\n   * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\n   *\n   * @param args - {@link GetBytecodeParameters}\n   * @returns The contract's bytecode. {@link GetBytecodeReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getCode({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   * })\n   */\n  getCode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\n  /**\n   * Returns a list of event logs emitted by a contract.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getContractEvents\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetContractEventsParameters}\n   * @returns A list of event logs. {@link GetContractEventsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { wagmiAbi } from './abi'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getContractEvents(client, {\n   *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *  abi: wagmiAbi,\n   *  eventName: 'Transfer'\n   * })\n   */\n  getContractEvents: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi> | undefined = undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetContractEventsParameters<\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\n  >\n  /**\n   * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\n   *\n   * @param client - A {@link Client} instance.\n   * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\n   * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const domain = await client.getEip712Domain({\n   *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n   * })\n   * // {\n   * //   domain: {\n   * //     name: 'ExampleContract',\n   * //     version: '1',\n   * //     chainId: 1,\n   * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n   * //   },\n   * //   fields: '0x0f',\n   * //   extensions: [],\n   * // }\n   * ```\n   */\n  getEip712Domain: (\n    args: GetEip712DomainParameters,\n  ) => Promise<GetEip712DomainReturnType>\n  /**\n   * Gets address for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAddressParameters}\n   * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAddress = await client.getEnsAddress({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\n   */\n  getEnsAddress: (\n    args: GetEnsAddressParameters,\n  ) => Promise<GetEnsAddressReturnType>\n  /**\n   * Gets the avatar of an ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsAvatarParameters}\n   * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensAvatar = await client.getEnsAvatar({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\n   */\n  getEnsAvatar: (\n    args: GetEnsAvatarParameters,\n  ) => Promise<GetEnsAvatarReturnType>\n  /**\n   * Gets primary name for specified address.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsName\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\n   *\n   * @param args - {@link GetEnsNameParameters}\n   * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const ensName = await client.getEnsName({\n   *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\n   * })\n   * // 'wevm.eth'\n   */\n  getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\n  /**\n   * Gets resolver for ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsResolverParameters}\n   * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const resolverAddress = await client.getEnsResolver({\n   *   name: normalize('wevm.eth'),\n   * })\n   * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\n   */\n  getEnsResolver: (\n    args: GetEnsResolverParameters,\n  ) => Promise<GetEnsResolverReturnType>\n  /**\n   * Gets a text record for specified ENS name.\n   *\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\n   *\n   * @remarks\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\n   *\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\n   *\n   * @param args - {@link GetEnsTextParameters}\n   * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { normalize } from 'viem/ens'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const twitterRecord = await client.getEnsText({\n   *   name: normalize('wevm.eth'),\n   *   key: 'com.twitter',\n   * })\n   * // 'wevm_dev'\n   */\n  getEnsText: (args: GetEnsTextParameters) => Promise<GetEnsTextReturnType>\n  /**\n   * Returns a collection of historical gas information.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\n   * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\n   *\n   * @param args - {@link GetFeeHistoryParameters}\n   * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const feeHistory = await client.getFeeHistory({\n   *   blockCount: 4,\n   *   rewardPercentiles: [25, 75],\n   * })\n   */\n  getFeeHistory: (\n    args: GetFeeHistoryParameters,\n  ) => Promise<GetFeeHistoryReturnType>\n  /**\n   * Returns an estimate for the fees per gas for a transaction to be included\n   * in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\n   *\n   * @param client - Client to use\n   * @param parameters - {@link EstimateFeesPerGasParameters}\n   * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateFeesPerGas()\n   * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\n   */\n  estimateFeesPerGas: <\n    chainOverride extends Chain | undefined = undefined,\n    type extends FeeValuesType = 'eip1559',\n  >(\n    args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\n  ) => Promise<EstimateFeesPerGasReturnType<type>>\n  /**\n   * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\n   * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\n   *\n   * @remarks\n   * A Filter can be created from the following actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * Depending on the type of filter, the return value will be different:\n   *\n   * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\n   * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\n   * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\n   *\n   * @param args - {@link GetFilterChangesParameters}\n   * @returns Logs or hashes. {@link GetFilterChangesReturnType}\n   *\n   * @example\n   * // Blocks\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createBlockFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Contract Events\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createContractEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\n   *   eventName: 'Transfer',\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Raw Events\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterChanges({ filter })\n   *\n   * @example\n   * // Transactions\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createPendingTransactionFilter()\n   * const hashes = await client.getFilterChanges({ filter })\n   */\n  getFilterChanges: <\n    filterType extends FilterType,\n    const abi extends Abi | readonly unknown[] | undefined,\n    eventName extends string | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterChangesParameters<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >,\n  ) => Promise<\n    GetFilterChangesReturnType<\n      filterType,\n      abi,\n      eventName,\n      strict,\n      fromBlock,\n      toBlock\n    >\n  >\n  /**\n   * Returns a list of event logs since the filter was created.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\n   * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\n   *\n   * @remarks\n   * `getFilterLogs` is only compatible with **event filters**.\n   *\n   * @param args - {@link GetFilterLogsParameters}\n   * @returns A list of event logs. {@link GetFilterLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const filter = await client.createEventFilter({\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\n   * })\n   * const logs = await client.getFilterLogs({ filter })\n   */\n  getFilterLogs: <\n    const abi extends Abi | readonly unknown[] | undefined,\n    eventName extends string | undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args: GetFilterLogsParameters<abi, eventName, strict, fromBlock, toBlock>,\n  ) => Promise<\n    GetFilterLogsReturnType<abi, eventName, strict, fromBlock, toBlock>\n  >\n  /**\n   * Returns the current price of gas (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getGasPrice\n   * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\n   *\n   * @returns The gas price (in wei). {@link GetGasPriceReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const gasPrice = await client.getGasPrice()\n   */\n  getGasPrice: () => Promise<GetGasPriceReturnType>\n  /**\n   * Returns a list of event logs matching the provided parameters.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getLogs\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/logs_event-logs\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\n   *\n   * @param args - {@link GetLogsParameters}\n   * @returns A list of event logs. {@link GetLogsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const logs = await client.getLogs()\n   */\n  getLogs: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\n  >(\n    args?:\n      | GetLogsParameters<abiEvent, abiEvents, strict, fromBlock, toBlock>\n      | undefined,\n  ) => Promise<\n    GetLogsReturnType<abiEvent, abiEvents, strict, fromBlock, toBlock>\n  >\n  /**\n   * Returns the account and storage values of the specified account including the Merkle-proof.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getProof\n   * - JSON-RPC Methods:\n   *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link GetProofParameters}\n   * @returns Proof data. {@link GetProofReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const block = await client.getProof({\n   *  address: '0x...',\n   *  storageKeys: ['0x...'],\n   * })\n   */\n  getProof: (args: GetProofParameters) => Promise<GetProofReturnType>\n  /**\n   * Returns an estimate for the max priority fee per gas (in wei) for a transaction\n   * to be included in the next block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\n   *\n   * @param client - Client to use\n   * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const maxPriorityFeePerGas = await client.estimateMaxPriorityFeePerGas()\n   * // 10000000n\n   */\n  estimateMaxPriorityFeePerGas: <\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args?:\n      | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\n      | undefined,\n  ) => Promise<EstimateMaxPriorityFeePerGasReturnType>\n  /**\n   * Returns the value from a storage slot at a given address.\n   *\n   * - Docs: https://viem.sh/docs/contract/getStorageAt\n   * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\n   *\n   * @param args - {@link GetStorageAtParameters}\n   * @returns The value of the storage slot. {@link GetStorageAtReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { getStorageAt } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const code = await client.getStorageAt({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   slot: toHex(0),\n   * })\n   */\n  getStorageAt: (\n    args: GetStorageAtParameters,\n  ) => Promise<GetStorageAtReturnType>\n  /**\n   * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransaction\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\n   *\n   * @param args - {@link GetTransactionParameters}\n   * @returns The transaction information. {@link GetTransactionReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transaction = await client.getTransaction({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransaction: <blockTag extends BlockTag = 'latest'>(\n    args: GetTransactionParameters<blockTag>,\n  ) => Promise<GetTransactionReturnType<chain, blockTag>>\n  /**\n   * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\n   *\n   * @param args - {@link GetTransactionConfirmationsParameters}\n   * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const confirmations = await client.getTransactionConfirmations({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionConfirmations: (\n    args: GetTransactionConfirmationsParameters<chain>,\n  ) => Promise<GetTransactionConfirmationsReturnType>\n  /**\n   * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has broadcast / sent.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\n   * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\n   *\n   * @param args - {@link GetTransactionCountParameters}\n   * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionCount = await client.getTransactionCount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getTransactionCount: (\n    args: GetTransactionCountParameters,\n  ) => Promise<GetTransactionCountReturnType>\n  /**\n   * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_fetching-transactions\n   * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt)\n   *\n   * @param args - {@link GetTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.getTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  getTransactionReceipt: (\n    args: GetTransactionReceiptParameters,\n  ) => Promise<GetTransactionReceiptReturnType<chain>>\n  /**\n   * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\n   *\n   * - Docs: https://viem.sh/docs/contract/multicall\n   *\n   * @param args - {@link MulticallParameters}\n   * @returns An array of results with accompanying status. {@link MulticallReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const abi = parseAbi([\n   *   'function balanceOf(address) view returns (uint256)',\n   *   'function totalSupply() view returns (uint256)',\n   * ])\n   * const result = await client.multicall({\n   *   contracts: [\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'balanceOf',\n   *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   *     },\n   *     {\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *       abi,\n   *       functionName: 'totalSupply',\n   *     },\n   *   ],\n   * })\n   * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\n   */\n  multicall: <\n    const contracts extends readonly unknown[],\n    allowFailure extends boolean = true,\n  >(\n    args: MulticallParameters<contracts, allowFailure>,\n  ) => Promise<MulticallReturnType<contracts, allowFailure>>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    const request extends PrepareTransactionRequestRequest<\n      chain,\n      chainOverride\n    >,\n    chainOverride extends Chain | undefined = undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >,\n  ) => Promise<\n    PrepareTransactionRequestReturnType<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >\n  >\n  /**\n   * Calls a read-only function on a contract, and returns the response.\n   *\n   * - Docs: https://viem.sh/docs/contract/readContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_reading-contracts\n   *\n   * @remarks\n   * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link ReadContractParameters}\n   * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { readContract } from 'viem/contract'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.readContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\n   *   functionName: 'balanceOf',\n   *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\n   * })\n   * // 424122n\n   */\n  readContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\n    const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\n  >(\n    args: ReadContractParameters<abi, functionName, args>,\n  ) => Promise<ReadContractReturnType<abi, functionName, args>>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n   * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionSyncParameters}\n   * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransactionSync } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const receipt = await client.sendRawTransactionSync({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransactionSync: (\n    args: SendRawTransactionSyncParameters,\n  ) => Promise<SendRawTransactionSyncReturnType<chain>>\n  /**\n   * @deprecated Use `simulateBlocks` instead.\n   */\n  simulate: <const calls extends readonly unknown[]>(\n    args: SimulateBlocksParameters<calls>,\n  ) => Promise<SimulateBlocksReturnType<calls>>\n  /**\n   * Simulates a set of calls on block(s) with optional block and state overrides.\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const result = await client.simulateBlocks({\n   *   blocks: [{\n   *     blockOverrides: {\n   *       number: 69420n,\n   *     },\n   *     calls: [{\n   *       {\n   *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *         data: '0xdeadbeef',\n   *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       },\n   *       {\n   *         account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *         to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *         value: parseEther('1'),\n   *       },\n   *     }],\n   *     stateOverrides: [{\n   *       address: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *       balance: parseEther('10'),\n   *     }],\n   *   }]\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link SimulateParameters}\n   * @returns Simulated blocks. {@link SimulateReturnType}\n   */\n  simulateBlocks: <const calls extends readonly unknown[]>(\n    args: SimulateBlocksParameters<calls>,\n  ) => Promise<SimulateBlocksReturnType<calls>>\n  /**\n   * Simulates a set of calls.\n   *\n   * @example\n   * ```ts\n   * import { createPublicClient, http, parseEther } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const result = await client.simulateCalls({\n   *   account: '0x5a0b54d5dc17e482fe8b0bdca5320161b95fb929',\n   *   calls: [{\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: parseEther('1'),\n   *     },\n   *   ]\n   * })\n   * ```\n   *\n   * @param client - Client to use.\n   * @param parameters - {@link SimulateCallsParameters}\n   * @returns Results. {@link SimulateCallsReturnType}\n   */\n  simulateCalls: <const calls extends readonly unknown[]>(\n    args: SimulateCallsParameters<calls>,\n  ) => Promise<SimulateCallsReturnType<calls>>\n  /**\n   * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\n   *\n   * - Docs: https://viem.sh/docs/contract/simulateContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n   *\n   * @remarks\n   * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\n   *\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * @param args - {@link SimulateContractParameters}\n   * @returns The simulation result and write request. {@link SimulateContractReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const result = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\n   *   functionName: 'mint',\n   *   args: ['69420'],\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  simulateContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\n    const args extends ContractFunctionArgs<\n      abi,\n      'nonpayable' | 'payable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: SimulateContractParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      chainOverride,\n      accountOverride\n    >,\n  ) => Promise<\n    SimulateContractReturnType<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride,\n      accountOverride\n    >\n  >\n  /**\n   * Verify that a hash was signed by the provided address.\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyHash}\n   *\n   * @param parameters - {@link VerifyHashParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n   */\n  verifyHash: (args: VerifyHashParameters) => Promise<VerifyHashReturnType>\n  /**\n   * Verify that a message was signed by the provided address.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\n   *\n   * @param parameters - {@link VerifyMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\n   */\n  verifyMessage: (\n    args: VerifyMessageParameters,\n  ) => Promise<VerifyMessageReturnType>\n  /**\n   * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\n   *\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\n   *\n   * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\n   *\n   * @param parameters - {@link VerifySiweMessageParameters}\n   * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\n   */\n  verifySiweMessage: (\n    args: VerifySiweMessageParameters,\n  ) => Promise<VerifySiweMessageReturnType>\n  /**\n   * Verify that typed data was signed by the provided address.\n   *\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\n   *\n   * @param parameters - {@link VerifyTypedDataParameters}\n   * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\n   */\n  verifyTypedData: (\n    args: VerifyTypedDataParameters,\n  ) => Promise<VerifyTypedDataReturnType>\n  /**\n   * Destroys a Filter that was created from one of the following Actions:\n   *\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\n   *\n   * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\n   * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\n   *\n   * @param args - {@link UninstallFilterParameters}\n   * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\n   *\n   * const filter = await client.createPendingTransactionFilter()\n   * const uninstalled = await client.uninstallFilter({ filter })\n   * // true\n   */\n  uninstallFilter: (\n    args: UninstallFilterParameters,\n  ) => Promise<UninstallFilterReturnType>\n  /**\n   * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt). If the Transaction reverts, then the action will throw an error.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\n   *   - If a Transaction has been replaced:\n   *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\n   *     - Checks if one of the Transactions is a replacement\n   *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\n   *\n   * @remarks\n   * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\n   *\n   * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\n   *\n   * There are 3 types of Transaction Replacement reasons:\n   *\n   * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\n   * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\n   * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\n   *\n   * @param args - {@link WaitForTransactionReceiptParameters}\n   * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const transactionReceipt = await client.waitForTransactionReceipt({\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\n   * })\n   */\n  waitForTransactionReceipt: (\n    args: WaitForTransactionReceiptParameters<chain>,\n  ) => Promise<WaitForTransactionReceiptReturnType<chain>>\n  /**\n   * Watches and returns incoming block numbers.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlockNumberParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlockNumber({\n   *   onBlockNumber: (blockNumber) => console.log(blockNumber),\n   * })\n   */\n  watchBlockNumber: (\n    args: WatchBlockNumberParameters,\n  ) => WatchBlockNumberReturnType\n  /**\n   * Watches and returns information for incoming blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchBlocks\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks_watching-blocks\n   * - JSON-RPC Methods:\n   *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\n   *\n   * @param args - {@link WatchBlocksParameters}\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchBlocks({\n   *   onBlock: (block) => console.log(block),\n   * })\n   */\n  watchBlocks: <\n    includeTransactions extends boolean = false,\n    blockTag extends BlockTag = 'latest',\n  >(\n    args: WatchBlocksParameters<\n      transport,\n      chain,\n      includeTransactions,\n      blockTag\n    >,\n  ) => WatchBlocksReturnType\n  /**\n   * Watches and returns emitted contract event logs.\n   *\n   * - Docs: https://viem.sh/docs/contract/watchContractEvent\n   *\n   * @remarks\n   * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\n   *\n   * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchContractEventParameters}\n   * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchContractEvent({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\n   *   eventName: 'Transfer',\n   *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchContractEvent: <\n    const abi extends Abi | readonly unknown[],\n    eventName extends ContractEventName<abi>,\n    strict extends boolean | undefined = undefined,\n  >(\n    args: WatchContractEventParameters<abi, eventName, strict, transport>,\n  ) => WatchContractEventReturnType\n  /**\n   * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchEvent\n   * - JSON-RPC Methods:\n   *   - **RPC Provider supports `eth_newFilter`:**\n   *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\n   *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\n   *   - **RPC Provider does not support `eth_newFilter`:**\n   *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\n   *\n   * @remarks\n   * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\n   *\n   * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\n   *\n   * @param args - {@link WatchEventParameters}\n   * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = client.watchEvent({\n   *   onLogs: (logs) => console.log(logs),\n   * })\n   */\n  watchEvent: <\n    const abiEvent extends AbiEvent | undefined = undefined,\n    const abiEvents extends\n      | readonly AbiEvent[]\n      | readonly unknown[]\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\n    strict extends boolean | undefined = undefined,\n  >(\n    args: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\n  ) => WatchEventReturnType\n  /**\n   * Watches and returns pending transaction hashes.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\n   * - JSON-RPC Methods:\n   *   - When `poll: true`\n   *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\n   *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\n   *\n   * @remarks\n   * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\n   *\n   * @param args - {@link WatchPendingTransactionsParameters}\n   * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\n   *\n   * @example\n   * import { createPublicClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createPublicClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const unwatch = await client.watchPendingTransactions({\n   *   onTransactions: (hashes) => console.log(hashes),\n   * })\n   */\n  watchPendingTransactions: (\n    args: WatchPendingTransactionsParameters<transport>,\n  ) => WatchPendingTransactionsReturnType\n}\n\nexport function publicActions<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(\n  client: Client<transport, chain, account>,\n): PublicActions<transport, chain, account> {\n  return {\n    call: (args) => call(client, args),\n    createAccessList: (args) => createAccessList(client, args),\n    createBlockFilter: () => createBlockFilter(client),\n    createContractEventFilter: (args) =>\n      createContractEventFilter(client, args),\n    createEventFilter: (args) => createEventFilter(client, args),\n    createPendingTransactionFilter: () =>\n      createPendingTransactionFilter(client),\n    estimateContractGas: (args) => estimateContractGas(client, args as any),\n    estimateGas: (args) => estimateGas(client, args),\n    getBalance: (args) => getBalance(client, args),\n    getBlobBaseFee: () => getBlobBaseFee(client),\n    getBlock: (args) => getBlock(client, args),\n    getBlockNumber: (args) => getBlockNumber(client, args),\n    getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\n    getBytecode: (args) => getCode(client, args),\n    getChainId: () => getChainId(client),\n    getCode: (args) => getCode(client, args),\n    getContractEvents: (args) => getContractEvents(client, args),\n    getEip712Domain: (args) => getEip712Domain(client, args),\n    getEnsAddress: (args) => getEnsAddress(client, args),\n    getEnsAvatar: (args) => getEnsAvatar(client, args),\n    getEnsName: (args) => getEnsName(client, args),\n    getEnsResolver: (args) => getEnsResolver(client, args),\n    getEnsText: (args) => getEnsText(client, args),\n    getFeeHistory: (args) => getFeeHistory(client, args),\n    estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\n    getFilterChanges: (args) => getFilterChanges(client, args),\n    getFilterLogs: (args) => getFilterLogs(client, args),\n    getGasPrice: () => getGasPrice(client),\n    getLogs: (args) => getLogs(client, args as any),\n    getProof: (args) => getProof(client, args),\n    estimateMaxPriorityFeePerGas: (args) =>\n      estimateMaxPriorityFeePerGas(client, args),\n    getStorageAt: (args) => getStorageAt(client, args),\n    getTransaction: (args) => getTransaction(client, args),\n    getTransactionConfirmations: (args) =>\n      getTransactionConfirmations(client, args),\n    getTransactionCount: (args) => getTransactionCount(client, args),\n    getTransactionReceipt: (args) => getTransactionReceipt(client, args),\n    multicall: (args) => multicall(client, args),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any) as any,\n    readContract: (args) => readContract(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n    simulate: (args) => simulateBlocks(client, args),\n    simulateBlocks: (args) => simulateBlocks(client, args),\n    simulateCalls: (args) => simulateCalls(client, args),\n    simulateContract: (args) => simulateContract(client, args),\n    verifyHash: (args) => verifyHash(client, args),\n    verifyMessage: (args) => verifyMessage(client, args),\n    verifySiweMessage: (args) => verifySiweMessage(client, args),\n    verifyTypedData: (args) => verifyTypedData(client, args),\n    uninstallFilter: (args) => uninstallFilter(client, args),\n    waitForTransactionReceipt: (args) =>\n      waitForTransactionReceipt(client, args),\n    watchBlocks: (args) => watchBlocks(client, args),\n    watchBlockNumber: (args) => watchBlockNumber(client, args),\n    watchContractEvent: (args) => watchContractEvent(client, args),\n    watchEvent: (args) => watchEvent(client, args),\n    watchPendingTransactions: (args) => watchPendingTransactions(client, args),\n  }\n}\n", "import type { Address } from 'abitype'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Account, ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { PublicRpcSchema, RpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type PublicActions, publicActions } from './decorators/public.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type PublicClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'batch'\n    | 'cacheTime'\n    | 'ccipRead'\n    | 'chain'\n    | 'experimental_blockTag'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  >\n>\n\nexport type PublicClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    accountOrAddress,\n    rpcSchema extends RpcSchema\n      ? [...PublicRpcSchema, ...rpcSchema]\n      : PublicRpcSchema,\n    PublicActions<transport, chain>\n  >\n>\n\nexport type CreatePublicClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Public Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/public\n *\n * A Public Client is an interface to \"public\" [JSON-RPC API](https://ethereum.org/en/developers/docs/apis/json-rpc/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](/docs/actions/public/introduction).\n *\n * @param config - {@link PublicClientConfig}\n * @returns A Public Client. {@link PublicClient}\n *\n * @example\n * import { createPublicClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createPublicClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createPublicClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: PublicClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): PublicClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema> {\n  const { key = 'public', name = 'Public Client' } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'publicClient',\n  })\n  return client.extend(publicActions) as any\n}\n", "import {\n  type DropTransactionParameters,\n  dropTransaction,\n} from '../../actions/test/dropTransaction.js'\nimport {\n  type DumpStateReturnType,\n  dumpState,\n} from '../../actions/test/dumpState.js'\nimport {\n  type GetAutomineReturnType,\n  getAutomine,\n} from '../../actions/test/getAutomine.js'\nimport {\n  type GetTxpoolContentReturnType,\n  getTxpoolContent,\n} from '../../actions/test/getTxpoolContent.js'\nimport {\n  type GetTxpoolStatusReturnType,\n  getTxpoolStatus,\n} from '../../actions/test/getTxpoolStatus.js'\nimport {\n  type ImpersonateAccountParameters,\n  impersonateAccount,\n} from '../../actions/test/impersonateAccount.js'\nimport {\n  type IncreaseTimeParameters,\n  increaseTime,\n} from '../../actions/test/increaseTime.js'\nimport {\n  type InspectTxpoolReturnType,\n  inspectTxpool,\n} from '../../actions/test/inspectTxpool.js'\nimport {\n  type LoadStateParameters,\n  type LoadStateReturnType,\n  loadState,\n} from '../../actions/test/loadState.js'\nimport { type MineParameters, mine } from '../../actions/test/mine.js'\nimport { removeBlockTimestampInterval } from '../../actions/test/removeBlockTimestampInterval.js'\nimport { type ResetParameters, reset } from '../../actions/test/reset.js'\nimport { type RevertParameters, revert } from '../../actions/test/revert.js'\nimport {\n  type SendUnsignedTransactionParameters,\n  type SendUnsignedTransactionReturnType,\n  sendUnsignedTransaction,\n} from '../../actions/test/sendUnsignedTransaction.js'\nimport { setAutomine } from '../../actions/test/setAutomine.js'\nimport {\n  type SetBalanceParameters,\n  setBalance,\n} from '../../actions/test/setBalance.js'\nimport {\n  type SetBlockGasLimitParameters,\n  setBlockGasLimit,\n} from '../../actions/test/setBlockGasLimit.js'\nimport {\n  type SetBlockTimestampIntervalParameters,\n  setBlockTimestampInterval,\n} from '../../actions/test/setBlockTimestampInterval.js'\nimport { type SetCodeParameters, setCode } from '../../actions/test/setCode.js'\nimport {\n  type SetCoinbaseParameters,\n  setCoinbase,\n} from '../../actions/test/setCoinbase.js'\nimport {\n  type SetIntervalMiningParameters,\n  setIntervalMining,\n} from '../../actions/test/setIntervalMining.js'\nimport { setLoggingEnabled } from '../../actions/test/setLoggingEnabled.js'\nimport {\n  type SetMinGasPriceParameters,\n  setMinGasPrice,\n} from '../../actions/test/setMinGasPrice.js'\nimport {\n  type SetNextBlockBaseFeePerGasParameters,\n  setNextBlockBaseFeePerGas,\n} from '../../actions/test/setNextBlockBaseFeePerGas.js'\nimport {\n  type SetNextBlockTimestampParameters,\n  setNextBlockTimestamp,\n} from '../../actions/test/setNextBlockTimestamp.js'\nimport {\n  type SetNonceParameters,\n  setNonce,\n} from '../../actions/test/setNonce.js'\nimport { setRpcUrl } from '../../actions/test/setRpcUrl.js'\nimport {\n  type SetStorageAtParameters,\n  setStorageAt,\n} from '../../actions/test/setStorageAt.js'\nimport { snapshot } from '../../actions/test/snapshot.js'\nimport {\n  type StopImpersonatingAccountParameters,\n  stopImpersonatingAccount,\n} from '../../actions/test/stopImpersonatingAccount.js'\nimport type { Account } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { Quantity } from '../../types/rpc.js'\nimport type { Client } from '../createClient.js'\nimport type { TestClientMode } from '../createTestClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type TestActions = {\n  /**\n   * Removes a transaction from the mempool.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dropTransaction\n   *\n   * @param args - {@link DropTransactionParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dropTransaction({\n   *   hash: '0xe58dceb6b20b03965bb678e27d141e151d7d4efc2334c2d6a49b9fac523f7364'\n   * })\n   */\n  dropTransaction: (args: DropTransactionParameters) => Promise<void>\n  /**\n   * Serializes the current state (including contracts code, contract's storage,\n   * accounts properties, etc.) into a savable data blob.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/dumpState\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.dumpState()\n   */\n  dumpState: () => Promise<DumpStateReturnType>\n  /**\n   * Returns the automatic mining status of the node.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getAutomine\n   *\n   * @returns Whether or not the node is auto mining. {@link GetAutomineReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const isAutomining = await client.getAutomine()\n   */\n  getAutomine: () => Promise<GetAutomineReturnType>\n  /**\n   * Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolContent\n   *\n   * @returns Transaction pool content. {@link GetTxpoolContentReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const content = await client.getTxpoolContent()\n   */\n  getTxpoolContent: () => Promise<GetTxpoolContentReturnType>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/getTxpoolStatus\n   *\n   * @returns Transaction pool status. {@link GetTxpoolStatusReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const status = await client.getTxpoolStatus()\n   */\n  getTxpoolStatus: () => Promise<GetTxpoolStatusReturnType>\n  /**\n   * Impersonate an account or contract address. This lets you send transactions from that account even if you don't have access to its private key.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/impersonateAccount\n   *\n   * @param args - {@link ImpersonateAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.impersonateAccount({\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  impersonateAccount: (args: ImpersonateAccountParameters) => Promise<void>\n  /**\n   * Jump forward in time by the given amount of time, in seconds.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/increaseTime\n   *\n   * @param args – {@link IncreaseTimeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.increaseTime({\n   *   seconds: 420,\n   * })\n   */\n  increaseTime: (args: IncreaseTimeParameters) => Promise<Quantity>\n  /**\n   * Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/inspectTxpool\n   *\n   * @returns Transaction pool inspection data. {@link InspectTxpoolReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const data = await client.inspectTxpool()\n   */\n  inspectTxpool: () => Promise<InspectTxpoolReturnType>\n  /**\n   * Adds state previously dumped with `dumpState` to the current chain.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/loadState\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.loadState({ state: '0x...' })\n   */\n  loadState: (args: LoadStateParameters) => Promise<LoadStateReturnType>\n  /**\n   * Mine a specified number of blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/mine\n   *\n   * @param client - Client to use\n   * @param args – {@link MineParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.mine({ blocks: 1 })\n   */\n  mine: (args: MineParameters) => Promise<void>\n  /**\n   * Removes [`setBlockTimestampInterval`](https://viem.sh/docs/actions/test/setBlockTimestampInterval) if it exists.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/removeBlockTimestampInterval\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { removeBlockTimestampInterval } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.removeBlockTimestampInterval()\n   */\n  removeBlockTimestampInterval: () => Promise<void>\n  /**\n   * Resets fork back to its original state.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/reset\n   *\n   * @param args – {@link ResetParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.reset({ blockNumber: 69420n })\n   */\n  reset: (args?: ResetParameters | undefined) => Promise<void>\n  /**\n   * Revert the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/revert\n   *\n   * @param args – {@link RevertParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.revert({ id: '0x…' })\n   */\n  revert: (args: RevertParameters) => Promise<void>\n  /**\n   * Executes a transaction regardless of the signature.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/sendUnsignedTransaction\n   *\n   * @param args – {@link SendUnsignedTransactionParameters}\n   * @returns The transaction hash. {@link SendUnsignedTransactionReturnType}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * const hash = await client.sendUnsignedTransaction({\n   *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendUnsignedTransaction: <chain extends Chain | undefined>(\n    args: SendUnsignedTransactionParameters<chain>,\n  ) => Promise<SendUnsignedTransactionReturnType>\n  /**\n   * Enables or disables the automatic mining of new blocks with each new transaction submitted to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setAutomine\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setAutomine()\n   */\n  setAutomine: (args: boolean) => Promise<void>\n  /**\n   * Modifies the balance of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBalance\n   *\n   * @param args – {@link SetBalanceParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseEther } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBalance({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   value: parseEther('1'),\n   * })\n   */\n  setBalance: (args: SetBalanceParameters) => Promise<void>\n  /**\n   * Sets the block's gas limit.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockGasLimit\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockGasLimit({ gasLimit: 420_000n })\n   */\n  setBlockGasLimit: (args: SetBlockGasLimitParameters) => Promise<void>\n  /**\n   * Similar to [`increaseTime`](https://viem.sh/docs/actions/test/increaseTime), but sets a block timestamp `interval`. The timestamp of future blocks will be computed as `lastBlock_timestamp` + `interval`.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setBlockTimestampInterval\n   *\n   * @param args – {@link SetBlockTimestampIntervalParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setBlockTimestampInterval({ interval: 5 })\n   */\n  setBlockTimestampInterval: (\n    args: SetBlockTimestampIntervalParameters,\n  ) => Promise<void>\n  /**\n   * Modifies the bytecode stored at an account's address.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCode\n   *\n   * @param args – {@link SetCodeParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCode({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   bytecode: '0x60806040526000600355600019600955600c80546001600160a01b031916737a250d5630b4cf539739df…',\n   * })\n   */\n  setCode: (args: SetCodeParameters) => Promise<void>\n  /**\n   * Sets the coinbase address to be used in new blocks.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setCoinbase\n   *\n   * @param args – {@link SetCoinbaseParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setCoinbase({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   * })\n   */\n  setCoinbase: (args: SetCoinbaseParameters) => Promise<void>\n  /**\n   * Sets the automatic mining interval (in seconds) of blocks. Setting the interval to 0 will disable automatic mining.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setIntervalMining\n   *\n   * @param args – {@link SetIntervalMiningParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setIntervalMining({ interval: 5 })\n   */\n  setIntervalMining: (args: SetIntervalMiningParameters) => Promise<void>\n  /**\n   * Enable or disable logging on the test node network.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setLoggingEnabled\n   *\n   * @param client - Client to use\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setLoggingEnabled()\n   */\n  setLoggingEnabled: (args: boolean) => Promise<void>\n  /**\n   * Change the minimum gas price accepted by the network (in wei).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setMinGasPrice\n   *\n   * Note: `setMinGasPrice` can only be used on clients that do not have EIP-1559 enabled.\n   *\n   * @param args – {@link SetBlockGasLimitParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setMinGasPrice({\n   *   gasPrice: parseGwei('20'),\n   * })\n   */\n  setMinGasPrice: (args: SetMinGasPriceParameters) => Promise<void>\n  /**\n   * Sets the next block's base fee per gas.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\n   *\n   * @param args – {@link SetNextBlockBaseFeePerGasParameters}\n   *\n   * @example\n   * import { createTestClient, http, parseGwei } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockBaseFeePerGas({\n   *   baseFeePerGas: parseGwei('20'),\n   * })\n   */\n  setNextBlockBaseFeePerGas: (\n    args: SetNextBlockBaseFeePerGasParameters,\n  ) => Promise<void>\n  /**\n   * Sets the next block's timestamp.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNextBlockTimestamp\n   *\n   * @param args – {@link SetNextBlockTimestampParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNextBlockTimestamp({ timestamp: 1671744314n })\n   */\n  setNextBlockTimestamp: (\n    args: SetNextBlockTimestampParameters,\n  ) => Promise<void>\n  /**\n   * Modifies (overrides) the nonce of an account.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setNonce\n   *\n   * @param args – {@link SetNonceParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setNonce({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   *   nonce: 420,\n   * })\n   */\n  setNonce: (args: SetNonceParameters) => Promise<void>\n  /**\n   * Sets the backend RPC URL.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setRpcUrl\n   *\n   * @param jsonRpcUrl – RPC URL\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setRpcUrl('https://eth-mainnet.g.alchemy.com/v2')\n   */\n  setRpcUrl: (args: string) => Promise<void>\n  /**\n   * Writes to a slot of an account's storage.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/setStorageAt\n   *\n   * @param args – {@link SetStorageAtParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.setStorageAt({\n   *   address: '0xe846c6fcf817734ca4527b28ccb4aea2b6663c79',\n   *   index: 2,\n   *   value: '0x0000000000000000000000000000000000000000000000000000000000000069',\n   * })\n   */\n  setStorageAt: (args: SetStorageAtParameters) => Promise<void>\n  /**\n   * Snapshot the state of the blockchain at the current block.\n   *\n   * - Docs: https://viem.sh/docs/actions/test/snapshot\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { snapshot } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.snapshot()\n   */\n  snapshot: () => Promise<Quantity>\n  /**\n   * Stop impersonating an account after having previously used [`impersonateAccount`](https://viem.sh/docs/actions/test/impersonateAccount).\n   *\n   * - Docs: https://viem.sh/docs/actions/test/stopImpersonatingAccount\n   *\n   * @param args – {@link StopImpersonatingAccountParameters}\n   *\n   * @example\n   * import { createTestClient, http } from 'viem'\n   * import { foundry } from 'viem/chains'\n   * import { stopImpersonatingAccount } from 'viem/test'\n   *\n   * const client = createTestClient({\n   *   mode: 'anvil',\n   *   chain: 'foundry',\n   *   transport: http(),\n   * })\n   * await client.stopImpersonatingAccount({\n   *   address: '0xa5cc3c03994DB5b0d9A5eEdD10CabaB0813678AC',\n   * })\n   */\n  stopImpersonatingAccount: (\n    args: StopImpersonatingAccountParameters,\n  ) => Promise<void>\n}\n\nexport function testActions<mode extends TestClientMode>({\n  mode,\n}: {\n  mode: mode\n}): <\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(\n  client: Client<transport, chain, account>,\n) => TestActions {\n  return <\n    transport extends Transport = Transport,\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n  >(\n    client_: Client<transport, chain, account>,\n  ): TestActions => {\n    const client = client_.extend(() => ({\n      mode,\n    }))\n    return {\n      dropTransaction: (args) => dropTransaction(client, args),\n      dumpState: () => dumpState(client),\n      getAutomine: () => getAutomine(client),\n      getTxpoolContent: () => getTxpoolContent(client),\n      getTxpoolStatus: () => getTxpoolStatus(client),\n      impersonateAccount: (args) => impersonateAccount(client, args),\n      increaseTime: (args) => increaseTime(client, args),\n      inspectTxpool: () => inspectTxpool(client),\n      loadState: (args) => loadState(client, args),\n      mine: (args) => mine(client, args),\n      removeBlockTimestampInterval: () => removeBlockTimestampInterval(client),\n      reset: (args) => reset(client, args),\n      revert: (args) => revert(client, args),\n      sendUnsignedTransaction: (args) =>\n        sendUnsignedTransaction(client, args as any),\n      setAutomine: (args) => setAutomine(client, args),\n      setBalance: (args) => setBalance(client, args),\n      setBlockGasLimit: (args) => setBlockGasLimit(client, args),\n      setBlockTimestampInterval: (args) =>\n        setBlockTimestampInterval(client, args),\n      setCode: (args) => setCode(client, args),\n      setCoinbase: (args) => setCoinbase(client, args),\n      setIntervalMining: (args) => setIntervalMining(client, args),\n      setLoggingEnabled: (args) => setLoggingEnabled(client, args),\n      setMinGasPrice: (args) => setMinGasPrice(client, args),\n      setNextBlockBaseFeePerGas: (args) =>\n        setNextBlockBaseFeePerGas(client, args),\n      setNextBlockTimestamp: (args) => setNextBlockTimestamp(client, args),\n      setNonce: (args) => setNonce(client, args),\n      setRpcUrl: (args) => setRpcUrl(client, args),\n      setStorageAt: (args) => setStorageAt(client, args),\n      snapshot: () => snapshot(client),\n      stopImpersonatingAccount: (args) =>\n        stopImpersonatingAccount(client, args),\n    }\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { RpcSchema, TestRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type TestActions, testActions } from './decorators/test.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type TestClientMode = 'anvil' | 'hardhat' | 'ganache'\n\nexport type TestClientConfig<\n  mode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'account'\n    | 'cacheTime'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  > & {\n    /** Mode of the test client. */\n    mode: mode | ('anvil' | 'hardhat' | 'ganache') // TODO: Type utility that expands `TestClientMode`\n  }\n>\n\nexport type TestClient<\n  mode extends TestClientMode = TestClientMode,\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  includeActions extends boolean = true,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  { mode: mode } & Client<\n    transport,\n    chain,\n    account,\n    rpcSchema extends RpcSchema\n      ? [...TestRpcSchema<mode>, ...rpcSchema]\n      : TestRpcSchema<mode>,\n    { mode: mode } & (includeActions extends true\n      ? TestActions\n      : Record<string, unknown>)\n  >\n>\n\nexport type CreateTestClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * @description Creates a test client with a given transport.\n */\n/**\n * Creates a Test Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/test\n *\n * A Test Client is an interface to \"test\" JSON-RPC API methods accessible through a local Ethereum test node such as [Anvil](https://book.getfoundry.sh/anvil/) or [Hardhat](https://hardhat.org/) such as mining blocks, impersonating accounts, setting fees, etc through [Test Actions](https://viem.sh/docs/actions/test/introduction).\n *\n * @param config - {@link TestClientConfig}\n * @returns A Test Client. {@link TestClient}\n *\n * @example\n * import { createTestClient, custom } from 'viem'\n * import { foundry } from 'viem/chains'\n *\n * const client = createTestClient({\n *   mode: 'anvil',\n *   chain: foundry,\n *   transport: http(),\n * })\n */\nexport function createTestClient<\n  mode extends 'anvil' | 'hardhat' | 'ganache', // TODO: Type utility that expands `TestClientMode`\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: TestClientConfig<\n    mode,\n    transport,\n    chain,\n    accountOrAddress,\n    rpcSchema\n  >,\n): TestClient<\n  mode,\n  transport,\n  chain,\n  ParseAccount<accountOrAddress>,\n  true,\n  rpcSchema\n>\n\nexport function createTestClient(parameters: TestClientConfig): TestClient {\n  const { key = 'test', name = 'Test Client', mode } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    type: 'testClient',\n  })\n  return client.extend((config) => ({\n    mode,\n    ...testActions({ mode })(config),\n  }))\n}\n", "import type { Abi, Address, TypedData } from 'abitype'\n\nimport type { Account } from '../../accounts/types.js'\nimport {\n  type GetChainIdReturnType,\n  getChainId,\n} from '../../actions/public/getChainId.js'\nimport {\n  type AddChainParameters,\n  addChain,\n} from '../../actions/wallet/addChain.js'\nimport {\n  type DeployContractParameters,\n  type DeployContractReturnType,\n  deployContract,\n} from '../../actions/wallet/deployContract.js'\nimport {\n  type GetAddressesReturnType,\n  getAddresses,\n} from '../../actions/wallet/getAddresses.js'\nimport {\n  type GetCallsStatusParameters,\n  type GetCallsStatusReturnType,\n  getCallsStatus,\n} from '../../actions/wallet/getCallsStatus.js'\nimport {\n  type GetCapabilitiesParameters,\n  type GetCapabilitiesReturnType,\n  getCapabilities,\n} from '../../actions/wallet/getCapabilities.js'\nimport {\n  type GetPermissionsReturnType,\n  getPermissions,\n} from '../../actions/wallet/getPermissions.js'\nimport {\n  type PrepareAuthorizationParameters,\n  type PrepareAuthorizationReturnType,\n  prepareAuthorization,\n} from '../../actions/wallet/prepareAuthorization.js'\nimport {\n  type PrepareTransactionRequestParameters,\n  type PrepareTransactionRequestRequest,\n  type PrepareTransactionRequestReturnType,\n  prepareTransactionRequest,\n} from '../../actions/wallet/prepareTransactionRequest.js'\nimport {\n  type RequestAddressesReturnType,\n  requestAddresses,\n} from '../../actions/wallet/requestAddresses.js'\nimport {\n  type RequestPermissionsParameters,\n  type RequestPermissionsReturnType,\n  requestPermissions,\n} from '../../actions/wallet/requestPermissions.js'\nimport {\n  type SendCallsParameters,\n  type SendCallsReturnType,\n  sendCalls,\n} from '../../actions/wallet/sendCalls.js'\nimport {\n  type SendCallsSyncParameters,\n  type SendCallsSyncReturnType,\n  sendCallsSync,\n} from '../../actions/wallet/sendCallsSync.js'\nimport {\n  type SendRawTransactionParameters,\n  type SendRawTransactionReturnType,\n  sendRawTransaction,\n} from '../../actions/wallet/sendRawTransaction.js'\nimport {\n  type SendRawTransactionSyncParameters,\n  type SendRawTransactionSyncReturnType,\n  sendRawTransactionSync,\n} from '../../actions/wallet/sendRawTransactionSync.js'\nimport {\n  type SendTransactionParameters,\n  type SendTransactionRequest,\n  type SendTransactionReturnType,\n  sendTransaction,\n} from '../../actions/wallet/sendTransaction.js'\nimport {\n  type SendTransactionSyncParameters,\n  type SendTransactionSyncRequest,\n  type SendTransactionSyncReturnType,\n  sendTransactionSync,\n} from '../../actions/wallet/sendTransactionSync.js'\nimport {\n  type ShowCallsStatusParameters,\n  type ShowCallsStatusReturnType,\n  showCallsStatus,\n} from '../../actions/wallet/showCallsStatus.js'\nimport {\n  type SignAuthorizationParameters,\n  type SignAuthorizationReturnType,\n  signAuthorization,\n} from '../../actions/wallet/signAuthorization.js'\nimport {\n  type SignMessageParameters,\n  type SignMessageReturnType,\n  signMessage,\n} from '../../actions/wallet/signMessage.js'\nimport {\n  type SignTransactionParameters,\n  type SignTransactionRequest,\n  type SignTransactionReturnType,\n  signTransaction,\n} from '../../actions/wallet/signTransaction.js'\nimport {\n  type SignTypedDataParameters,\n  type SignTypedDataReturnType,\n  signTypedData,\n} from '../../actions/wallet/signTypedData.js'\nimport {\n  type SwitchChainParameters,\n  switchChain,\n} from '../../actions/wallet/switchChain.js'\nimport {\n  type WaitForCallsStatusParameters,\n  type WaitForCallsStatusReturnType,\n  waitForCallsStatus,\n} from '../../actions/wallet/waitForCallsStatus.js'\nimport {\n  type WatchAssetParameters,\n  type WatchAssetReturnType,\n  watchAsset,\n} from '../../actions/wallet/watchAsset.js'\nimport {\n  type WriteContractParameters,\n  type WriteContractReturnType,\n  writeContract,\n} from '../../actions/wallet/writeContract.js'\nimport {\n  type WriteContractSyncParameters,\n  type WriteContractSyncReturnType,\n  writeContractSync,\n} from '../../actions/wallet/writeContractSync.js'\nimport type { Chain } from '../../types/chain.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport type { Client } from '../createClient.js'\nimport type { Transport } from '../transports/createTransport.js'\n\nexport type WalletActions<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = {\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/addChain\n   * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\n   *\n   * @param args - {@link AddChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.addChain({ chain: optimism })\n   */\n  addChain: (args: AddChainParameters) => Promise<void>\n  /**\n   * Deploys a contract to the network, given bytecode and constructor arguments.\n   *\n   * - Docs: https://viem.sh/docs/contract/deployContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_deploying-contracts\n   *\n   * @param args - {@link DeployContractParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.deployContract({\n   *   abi: [],\n   *   account: '0x…,\n   *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\n   * })\n   */\n  deployContract: <\n    const abi extends Abi | readonly unknown[],\n    chainOverride extends Chain | undefined,\n  >(\n    args: DeployContractParameters<abi, chain, account, chainOverride>,\n  ) => Promise<DeployContractReturnType>\n  /**\n   * Returns a list of account addresses owned by the wallet or client.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\n   * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\n   *\n   * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.getAddresses()\n   */\n  getAddresses: () => Promise<GetAddressesReturnType>\n  /**\n   * Returns the status of a call batch that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Status of the calls. {@link GetCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const { receipts, status } = await client.getCallsStatus({ id: '0xdeadbeef' })\n   */\n  getCallsStatus: (\n    parameters: GetCallsStatusParameters,\n  ) => Promise<GetCallsStatusReturnType>\n  /**\n   * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n   * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const capabilities = await client.getCapabilities({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  getCapabilities: <chainId extends number | undefined>(\n    parameters?: GetCapabilitiesParameters<chainId>,\n  ) => Promise<GetCapabilitiesReturnType<chainId>>\n  /**\n   * Returns the chain ID associated with the current network.\n   *\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\n   *\n   * @returns The current chain ID. {@link GetChainIdReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const chainId = await client.getChainId()\n   * // 1\n   */\n  getChainId: () => Promise<GetChainIdReturnType>\n  /**\n   * Gets the wallets current permissions.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\n   * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @returns The wallet permissions. {@link GetPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.getPermissions()\n   */\n  getPermissions: () => Promise<GetPermissionsReturnType>\n  /**\n   * Prepares an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object for signing.\n   * This Action will fill the required fields of the Authorization object if they are not provided (e.g. `nonce` and `chainId`).\n   *\n   * With the prepared Authorization object, you can use [`signAuthorization`](https://viem.sh/docs/eip7702/signAuthorization) to sign over the Authorization object.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link PrepareAuthorizationParameters}\n   * @returns The prepared Authorization object. {@link PrepareAuthorizationReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const authorization = await client.prepareAuthorization({\n   *   account: privateKeyToAccount('0x..'),\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const authorization = await client.prepareAuthorization({\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  prepareAuthorization: (\n    parameters: PrepareAuthorizationParameters<account>,\n  ) => Promise<PrepareAuthorizationReturnType>\n  /**\n   * Prepares a transaction request for signing.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\n   *\n   * @param args - {@link PrepareTransactionRequestParameters}\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   */\n  prepareTransactionRequest: <\n    const request extends PrepareTransactionRequestRequest<\n      chain,\n      chainOverride\n    >,\n    chainOverride extends Chain | undefined = undefined,\n    accountOverride extends Account | Address | undefined = undefined,\n  >(\n    args: PrepareTransactionRequestParameters<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >,\n  ) => Promise<\n    PrepareTransactionRequestReturnType<\n      chain,\n      account,\n      chainOverride,\n      accountOverride,\n      request\n    >\n  >\n  /**\n   * Requests a list of accounts managed by a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\n   * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\n   *\n   * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\n   *\n   * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\n   *\n   * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const accounts = await client.requestAddresses()\n   */\n  requestAddresses: () => Promise<RequestAddressesReturnType>\n  /**\n   * Requests permissions for a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\n   * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\n   *\n   * @param args - {@link RequestPermissionsParameters}\n   * @returns The wallet permissions. {@link RequestPermissionsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const permissions = await client.requestPermissions({\n   *   eth_accounts: {}\n   * })\n   */\n  requestPermissions: (\n    args: RequestPermissionsParameters,\n  ) => Promise<RequestPermissionsReturnType>\n  /**\n   * Requests the connected wallet to send a batch of calls.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendCalls\n   * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Transaction identifier. {@link SendCallsReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const id = await client.sendCalls({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   calls: [\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   ],\n   * })\n   */\n  sendCalls: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: SendCallsParameters<chain, account, chainOverride, calls>,\n  ) => Promise<SendCallsReturnType>\n  /**\n   * Requests the connected wallet to send a batch of calls, and waits for the calls to be included in a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendCallsSync\n   * - JSON-RPC Methods: [`wallet_sendCalls`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Calls status. {@link SendCallsSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const status = await client.sendCallsSync({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   calls: [\n   *     {\n   *       data: '0xdeadbeef',\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *     },\n   *     {\n   *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *       value: 69420n,\n   *     },\n   *   ],\n   * })\n   */\n  sendCallsSync: <\n    const calls extends readonly unknown[],\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    parameters: SendCallsSyncParameters<chain, account, chainOverride, calls>,\n  ) => Promise<SendCallsSyncReturnType>\n  /**\n   * Sends a **signed** transaction to the network\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionParameters}\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransaction } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const hash = await client.sendRawTransaction({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransaction: (\n    args: SendRawTransactionParameters,\n  ) => Promise<SendRawTransactionReturnType>\n  /**\n   * Sends a **signed** transaction to the network synchronously,\n   * and waits for the transaction to be included in a block.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransactionSync\n   * - JSON-RPC Method: [`eth_sendRawTransactionSync`](https://eips.ethereum.org/EIPS/eip-7966)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SendRawTransactionSyncParameters}\n   * @returns The transaction receipt. {@link SendRawTransactionSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   * import { sendRawTransactionSync } from 'viem/wallet'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const receipt = await client.sendRawTransactionSync({\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\n   * })\n   */\n  sendRawTransactionSync: (\n    args: SendRawTransactionSyncParameters,\n  ) => Promise<SendRawTransactionSyncReturnType<chain>>\n  /**\n   * Creates, signs, and sends a new transaction to the network.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n   *\n   * @param args - {@link SendTransactionParameters}\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.sendTransaction({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const hash = await client.sendTransaction({\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendTransaction: <\n    const request extends SendTransactionRequest<chain, chainOverride>,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: SendTransactionParameters<chain, account, chainOverride, request>,\n  ) => Promise<SendTransactionReturnType>\n  /**\n   * Creates, signs, and sends a new transaction to the network synchronously.\n   * Returns the transaction receipt.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransactionSync\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions_sending-transactions\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n   *\n   * @param args - {@link SendTransactionParameters}\n   * @returns The transaction receipt. {@link SendTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const receipt = await client.sendTransactionSync({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const receipt = await client.sendTransactionSync({\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n   *   value: 1000000000000000000n,\n   * })\n   */\n  sendTransactionSync: <\n    const request extends SendTransactionSyncRequest<chain, chainOverride>,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: SendTransactionSyncParameters<chain, account, chainOverride, request>,\n  ) => Promise<SendTransactionSyncReturnType>\n  /**\n   * Requests for the wallet to show information about a call batch\n   * that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/showCallsStatus\n   * - JSON-RPC Methods: [`wallet_showCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @returns Displays status of the calls in wallet. {@link ShowCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * await client.showCallsStatus({ id: '0xdeadbeef' })\n   */\n  showCallsStatus: (\n    parameters: ShowCallsStatusParameters,\n  ) => Promise<ShowCallsStatusReturnType>\n  /**\n   * Signs an [EIP-7702 Authorization](https://eips.ethereum.org/EIPS/eip-7702) object.\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyAuthorization`](https://viem.sh/docs/eip7702/verifyAuthorization) to verify the signed Authorization object,\n   * - use [`recoverAuthorizationAddress`](https://viem.sh/docs/eip7702/recoverAuthorizationAddress) to recover the signing address from the signed Authorization object.\n   *\n   * @param client - Client to use\n   * @param parameters - {@link SignAuthorizationParameters}\n   * @returns The signed Authorization object. {@link SignAuthorizationReturnType}\n   *\n   * @example\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const signature = await client.signAuthorization({\n   *   account: privateKeyToAccount('0x..'),\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   *\n   * const signature = await client.signAuthorization({\n   *   contractAddress: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   * })\n   */\n  signAuthorization: (\n    parameters: SignAuthorizationParameters<account>,\n  ) => Promise<SignAuthorizationReturnType>\n  /**\n   * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signMessage\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * With the calculated signature, you can:\n   * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\n   * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\n   *\n   * @param args - {@link SignMessageParameters}\n   * @returns The signed message. {@link SignMessageReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signMessage({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   message: 'hello world',\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signMessage({\n   *   message: 'hello world',\n   * })\n   */\n  signMessage: (\n    args: SignMessageParameters<account>,\n  ) => Promise<SignMessageReturnType>\n  /**\n   * Signs a transaction.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param args - {@link SignTransactionParameters}\n   * @returns The signed message. {@link SignTransactionReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const request = await client.prepareTransactionRequest({\n   *   to: '0x0000000000000000000000000000000000000000',\n   *   value: 1n,\n   * })\n   * const signature = await client.signTransaction(request)\n   */\n  signTransaction: <\n    chainOverride extends Chain | undefined,\n    const request extends SignTransactionRequest<\n      chain,\n      chainOverride\n    > = SignTransactionRequest<chain, chainOverride>,\n  >(\n    args: SignTransactionParameters<chain, account, chainOverride, request>,\n  ) => Promise<SignTransactionReturnType<request>>\n  /**\n   * Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\n   * - JSON-RPC Methods:\n   *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\n   *\n   * @param client - Client to use\n   * @param args - {@link SignTypedDataParameters}\n   * @returns The signed data. {@link SignTypedDataReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const signature = await client.signTypedData({\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   *\n   * @example\n   * // Account Hoisting\n   * import { createWalletClient, http } from 'viem'\n   * import { privateKeyToAccount } from 'viem/accounts'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   account: privateKeyToAccount('0x…'),\n   *   chain: mainnet,\n   *   transport: http(),\n   * })\n   * const signature = await client.signTypedData({\n   *   domain: {\n   *     name: 'Ether Mail',\n   *     version: '1',\n   *     chainId: 1,\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n   *   },\n   *   types: {\n   *     Person: [\n   *       { name: 'name', type: 'string' },\n   *       { name: 'wallet', type: 'address' },\n   *     ],\n   *     Mail: [\n   *       { name: 'from', type: 'Person' },\n   *       { name: 'to', type: 'Person' },\n   *       { name: 'contents', type: 'string' },\n   *     ],\n   *   },\n   *   primaryType: 'Mail',\n   *   message: {\n   *     from: {\n   *       name: 'Cow',\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   *     },\n   *     to: {\n   *       name: 'Bob',\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   *     },\n   *     contents: 'Hello, Bob!',\n   *   },\n   * })\n   */\n  signTypedData: <\n    const typedData extends TypedData | { [key: string]: unknown },\n    primaryType extends string,\n  >(\n    args: SignTypedDataParameters<typedData, primaryType, account>,\n  ) => Promise<SignTypedDataReturnType>\n  /**\n   * Switch the target chain in a wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/switchChain\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\n   *\n   * @param args - {@link SwitchChainParameters}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet, optimism } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * await client.switchChain({ id: optimism.id })\n   */\n  switchChain: (args: SwitchChainParameters) => Promise<void>\n  /**\n   * Waits for the status & receipts of a call bundle that was sent via `sendCalls`.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/waitForCallsStatus\n   * - JSON-RPC Methods: [`wallet_getCallsStatus`](https://eips.ethereum.org/EIPS/eip-5792)\n   *\n   * @param client - Client to use\n   * @param parameters - {@link WaitForCallsStatusParameters}\n   * @returns Status & receipts of the call bundle. {@link WaitForCallsStatusReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   *\n   * const { receipts, status } = await waitForCallsStatus(client, { id: '0xdeadbeef' })\n   */\n  waitForCallsStatus: (\n    parameters: WaitForCallsStatusParameters,\n  ) => Promise<WaitForCallsStatusReturnType>\n  /**\n   * Adds an EVM chain to the wallet.\n   *\n   * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\n   *\n   * @param args - {@link WatchAssetParameters}\n   * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const success = await client.watchAsset({\n   *   type: 'ERC20',\n   *   options: {\n   *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n   *     decimals: 18,\n   *     symbol: 'WETH',\n   *   },\n   * })\n   */\n  watchAsset: (args: WatchAssetParameters) => Promise<WatchAssetReturnType>\n  /**\n   * Executes a write function on a contract.\n   *\n   * - Docs: https://viem.sh/docs/contract/writeContract\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts_writing-to-contracts\n   *\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n   *\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n   *\n   * @param args - {@link WriteContractParameters}\n   * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const hash = await client.writeContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * })\n   *\n   * @example\n   * // With Validation\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const { request } = await client.simulateContract({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * }\n   * const hash = await client.writeContract(request)\n   */\n  writeContract: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'payable' | 'nonpayable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: WriteContractParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<WriteContractReturnType>\n  /**\n   * Executes a write function on a contract synchronously.\n   * Returns the transaction receipt.\n   *\n   * - Docs: https://viem.sh/docs/contract/writeContract\n   *\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\n   *\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\n   *\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\n   *\n   * @param args - {@link WriteContractSyncParameters}\n   * @returns A [Transaction Receipt](https://viem.sh/docs/glossary/terms#receipt). {@link WriteContractSyncReturnType}\n   *\n   * @example\n   * import { createWalletClient, custom, parseAbi } from 'viem'\n   * import { mainnet } from 'viem/chains'\n   *\n   * const client = createWalletClient({\n   *   chain: mainnet,\n   *   transport: custom(window.ethereum),\n   * })\n   * const receipt = await client.writeContractSync({\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\n   *   functionName: 'mint',\n   *   args: [69420],\n   * })\n   */\n  writeContractSync: <\n    const abi extends Abi | readonly unknown[],\n    functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>,\n    args extends ContractFunctionArgs<\n      abi,\n      'payable' | 'nonpayable',\n      functionName\n    >,\n    chainOverride extends Chain | undefined = undefined,\n  >(\n    args: WriteContractSyncParameters<\n      abi,\n      functionName,\n      args,\n      chain,\n      account,\n      chainOverride\n    >,\n  ) => Promise<WriteContractSyncReturnType>\n}\n\nexport function walletActions<\n  transport extends Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n>(client: Client<transport, chain, account>): WalletActions<chain, account> {\n  return {\n    addChain: (args) => addChain(client, args),\n    deployContract: (args) => deployContract(client, args),\n    getAddresses: () => getAddresses(client),\n    getCallsStatus: (args) => getCallsStatus(client, args),\n    getCapabilities: (args) => getCapabilities(client, args),\n    getChainId: () => getChainId(client),\n    getPermissions: () => getPermissions(client),\n    prepareAuthorization: (args) => prepareAuthorization(client, args),\n    prepareTransactionRequest: (args) =>\n      prepareTransactionRequest(client as any, args as any) as any,\n    requestAddresses: () => requestAddresses(client),\n    requestPermissions: (args) => requestPermissions(client, args),\n    sendCalls: (args) => sendCalls(client, args),\n    sendCallsSync: (args) => sendCallsSync(client, args),\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\n    sendRawTransactionSync: (args) => sendRawTransactionSync(client, args),\n    sendTransaction: (args) => sendTransaction(client, args),\n    sendTransactionSync: (args) => sendTransactionSync(client, args),\n    showCallsStatus: (args) => showCallsStatus(client, args),\n    signAuthorization: (args) => signAuthorization(client, args),\n    signMessage: (args) => signMessage(client, args),\n    signTransaction: (args) => signTransaction(client, args),\n    signTypedData: (args) => signTypedData(client, args),\n    switchChain: (args) => switchChain(client, args),\n    waitForCallsStatus: (args) => waitForCallsStatus(client, args),\n    watchAsset: (args) => watchAsset(client, args),\n    writeContract: (args) => writeContract(client, args as any),\n    writeContractSync: (args) => writeContractSync(client, args as any),\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type { Account } from '../accounts/types.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ParseAccount } from '../types/account.js'\nimport type { Chain } from '../types/chain.js'\nimport type { RpcSchema, WalletRpcSchema } from '../types/eip1193.js'\nimport type { Prettify } from '../types/utils.js'\nimport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  createClient,\n} from './createClient.js'\nimport { type WalletActions, walletActions } from './decorators/wallet.js'\nimport type { Transport } from './transports/createTransport.js'\n\nexport type WalletClientConfig<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  accountOrAddress extends Account | Address | undefined =\n    | Account\n    | Address\n    | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Pick<\n    ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n    | 'account'\n    | 'cacheTime'\n    | 'ccipRead'\n    | 'chain'\n    | 'key'\n    | 'name'\n    | 'pollingInterval'\n    | 'rpcSchema'\n    | 'transport'\n  >\n>\n\nexport type WalletClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = Prettify<\n  Client<\n    transport,\n    chain,\n    account,\n    rpcSchema extends RpcSchema\n      ? [...WalletRpcSchema, ...rpcSchema]\n      : WalletRpcSchema,\n    WalletActions<chain, account>\n  >\n>\n\nexport type CreateWalletClientErrorType = CreateClientErrorType | ErrorType\n\n/**\n * Creates a Wallet Client with a given [Transport](https://viem.sh/docs/clients/intro) configured for a [Chain](https://viem.sh/docs/clients/chains).\n *\n * - Docs: https://viem.sh/docs/clients/wallet\n *\n * A Wallet Client is an interface to interact with [Ethereum Account(s)](https://ethereum.org/en/glossary/#account) and provides the ability to retrieve accounts, execute transactions, sign messages, etc. through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\n *\n * The Wallet Client supports signing over:\n * - [JSON-RPC Accounts](https://viem.sh/docs/clients/wallet#json-rpc-accounts) (e.g. Browser Extension Wallets, WalletConnect, etc).\n * - [Local Accounts](https://viem.sh/docs/clients/wallet#local-accounts-private-key-mnemonic-etc) (e.g. private key/mnemonic wallets).\n *\n * @param config - {@link WalletClientConfig}\n * @returns A Wallet Client. {@link WalletClient}\n *\n * @example\n * // JSON-RPC Account\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n *\n * @example\n * // Local Account\n * import { createWalletClient, custom } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0x…')\n *   chain: mainnet,\n *   transport: http(),\n * })\n */\nexport function createWalletClient<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  accountOrAddress extends Account | Address | undefined = undefined,\n  rpcSchema extends RpcSchema | undefined = undefined,\n>(\n  parameters: WalletClientConfig<transport, chain, accountOrAddress, rpcSchema>,\n): WalletClient<transport, chain, ParseAccount<accountOrAddress>, rpcSchema>\n\nexport function createWalletClient(\n  parameters: WalletClientConfig,\n): WalletClient {\n  const { key = 'wallet', name = 'Wallet Client', transport } = parameters\n  const client = createClient({\n    ...parameters,\n    key,\n    name,\n    transport,\n    type: 'walletClient',\n  })\n  return client.extend(walletActions)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport type { OneOf } from '../../types/utils.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport { uid as uid_ } from '../../utils/uid.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  type extends string = string,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?:\n    | OneOf<\n        | {\n            include?: string[] | undefined\n          }\n        | {\n            exclude?: string[] | undefined\n          }\n      >\n    | undefined\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: eip1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** The timeout (in ms) for requests. */\n  timeout?: number | undefined\n  /** The type of the transport. */\n  type: type\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <chain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: chain | undefined\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\n  retryCount?: TransportConfig['retryCount'] | undefined\n  timeout?: TransportConfig['timeout'] | undefined\n}) => {\n  config: TransportConfig<type>\n  request: eip1193RequestFn\n  value?: rpcAttributes | undefined\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  type extends string,\n  rpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    methods,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<type>,\n  value?: rpcAttributes | undefined,\n): ReturnType<Transport<type, rpcAttributes>> {\n  const uid = uid_()\n  return {\n    config: {\n      key,\n      methods,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type,\n    },\n    request: buildRequest(request, { methods, retryCount, retryDelay, uid }),\n    value,\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\ntype EthereumProvider = { request(...args: any): Promise<any> }\n\nexport type CustomTransportConfig = {\n  /** The key of the transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the transport. */\n  name?: TransportConfig['name'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n}\n\nexport type CustomTransport = Transport<\n  'custom',\n  {},\n  EthereumProvider['request']\n>\n\nexport type CustomTransportErrorType = CreateTransportErrorType | ErrorType\n\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom<provider extends EthereumProvider>(\n  provider: provider,\n  config: CustomTransportConfig = {},\n): CustomTransport {\n  const {\n    key = 'custom',\n    methods,\n    name = 'Custom Provider',\n    retryDelay,\n  } = config\n  return ({ retryCount: defaultRetryCount }) =>\n    createTransport({\n      key,\n      methods,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom',\n    })\n}\n", "import { ExecutionRevertedError } from '../../errors/node.js'\nimport {\n  TransactionRejectedRpcError,\n  UserRejectedRequestError,\n} from '../../errors/rpc.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport { wait } from '../../utils/wait.js'\n\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n// TODO: Narrow `method` & `params` types.\nexport type OnResponseFn = (\n  args: {\n    method: string\n    params: unknown[]\n    transport: ReturnType<Transport>\n  } & (\n    | {\n        error?: undefined\n        response: unknown\n        status: 'success'\n      }\n    | {\n        error: Error\n        response?: undefined\n        status: 'error'\n      }\n  ),\n) => void\n\ntype RankOptions = {\n  /**\n   * The polling interval (in ms) at which the ranker should ping the RPC URL.\n   * @default client.pollingInterval\n   */\n  interval?: number | undefined\n  /**\n   * Ping method to determine latency.\n   */\n  ping?: (parameters: {\n    transport: ReturnType<Transport>\n  }) => Promise<unknown> | undefined\n  /**\n   * The number of previous samples to perform ranking on.\n   * @default 10\n   */\n  sampleCount?: number | undefined\n  /**\n   * Timeout when sampling transports.\n   * @default 1_000\n   */\n  timeout?: number | undefined\n  /**\n   * Weights to apply to the scores. Weight values are proportional.\n   */\n  weights?:\n    | {\n        /**\n         * The weight to apply to the latency score.\n         * @default 0.3\n         */\n        latency?: number | undefined\n        /**\n         * The weight to apply to the stability score.\n         * @default 0.7\n         */\n        stability?: number | undefined\n      }\n    | undefined\n}\n\nexport type FallbackTransportConfig = {\n  /** The key of the Fallback transport. */\n  key?: TransportConfig['key'] | undefined\n  /** The name of the Fallback transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Toggle to enable ranking, or rank options. */\n  rank?: boolean | RankOptions | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** Callback on whether an error should throw or try the next transport in the fallback. */\n  shouldThrow?: (error: Error) => boolean | undefined\n}\n\nexport type FallbackTransport<\n  transports extends readonly Transport[] = readonly Transport[],\n> = Transport<\n  'fallback',\n  {\n    onResponse: (fn: OnResponseFn) => void\n    transports: {\n      [key in keyof transports]: ReturnType<transports[key]>\n    }\n  }\n>\n\nexport type FallbackTransportErrorType = CreateTransportErrorType | ErrorType\n\nexport function fallback<const transports extends readonly Transport[]>(\n  transports_: transports,\n  config: FallbackTransportConfig = {},\n): FallbackTransport<transports> {\n  const {\n    key = 'fallback',\n    name = 'Fallback',\n    rank = false,\n    shouldThrow: shouldThrow_ = shouldThrow,\n    retryCount,\n    retryDelay,\n  } = config\n  return (({ chain, pollingInterval = 4_000, timeout, ...rest }) => {\n    let transports = transports_\n\n    let onResponse: OnResponseFn = () => {}\n\n    const transport = createTransport(\n      {\n        key,\n        name,\n        async request({ method, params }) {\n          let includes: boolean | undefined\n\n          const fetch = async (i = 0): Promise<any> => {\n            const transport = transports[i]({\n              ...rest,\n              chain,\n              retryCount: 0,\n              timeout,\n            })\n            try {\n              const response = await transport.request({\n                method,\n                params,\n              } as any)\n\n              onResponse({\n                method,\n                params: params as unknown[],\n                response,\n                transport,\n                status: 'success',\n              })\n\n              return response\n            } catch (err) {\n              onResponse({\n                error: err as Error,\n                method,\n                params: params as unknown[],\n                transport,\n                status: 'error',\n              })\n\n              if (shouldThrow_(err as Error)) throw err\n\n              // If we've reached the end of the fallbacks, throw the error.\n              if (i === transports.length - 1) throw err\n\n              // Check if at least one other transport includes the method\n              includes ??= transports.slice(i + 1).some((transport) => {\n                const { include, exclude } =\n                  transport({ chain }).config.methods || {}\n                if (include) return include.includes(method)\n                if (exclude) return !exclude.includes(method)\n                return true\n              })\n              if (!includes) throw err\n\n              // Otherwise, try the next fallback.\n              return fetch(i + 1)\n            }\n          }\n          return fetch()\n        },\n        retryCount,\n        retryDelay,\n        type: 'fallback',\n      },\n      {\n        onResponse: (fn: OnResponseFn) => (onResponse = fn),\n        transports: transports.map((fn) => fn({ chain, retryCount: 0 })),\n      },\n    )\n\n    if (rank) {\n      const rankOptions = (typeof rank === 'object' ? rank : {}) as RankOptions\n      rankTransports({\n        chain,\n        interval: rankOptions.interval ?? pollingInterval,\n        onTransports: (transports_) => (transports = transports_ as transports),\n        ping: rankOptions.ping,\n        sampleCount: rankOptions.sampleCount,\n        timeout: rankOptions.timeout,\n        transports,\n        weights: rankOptions.weights,\n      })\n    }\n    return transport\n  }) as FallbackTransport<transports>\n}\n\nexport function shouldThrow(error: Error) {\n  if ('code' in error && typeof error.code === 'number') {\n    if (\n      error.code === TransactionRejectedRpcError.code ||\n      error.code === UserRejectedRequestError.code ||\n      ExecutionRevertedError.nodeMessage.test(error.message) ||\n      error.code === 5000 // CAIP UserRejectedRequestError\n    )\n      return true\n  }\n  return false\n}\n\n/** @internal */\nexport function rankTransports({\n  chain,\n  interval = 4_000,\n  onTransports,\n  ping,\n  sampleCount = 10,\n  timeout = 1_000,\n  transports,\n  weights = {},\n}: {\n  chain?: Chain | undefined\n  interval: RankOptions['interval']\n  onTransports: (transports: readonly Transport[]) => void\n  ping?: RankOptions['ping'] | undefined\n  sampleCount?: RankOptions['sampleCount'] | undefined\n  timeout?: RankOptions['timeout'] | undefined\n  transports: readonly Transport[]\n  weights?: RankOptions['weights'] | undefined\n}) {\n  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } =\n    weights\n\n  type SampleData = { latency: number; success: number }\n  type Sample = SampleData[]\n  const samples: Sample[] = []\n\n  const rankTransports_ = async () => {\n    // 1. Take a sample from each Transport.\n    const sample: Sample = await Promise.all(\n      transports.map(async (transport) => {\n        const transport_ = transport({ chain, retryCount: 0, timeout })\n\n        const start = Date.now()\n        let end: number\n        let success: number\n        try {\n          await (ping\n            ? ping({ transport: transport_ })\n            : transport_.request({ method: 'net_listening' }))\n          success = 1\n        } catch {\n          success = 0\n        } finally {\n          end = Date.now()\n        }\n        const latency = end - start\n        return { latency, success }\n      }),\n    )\n\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\n    // the oldest sample.\n    samples.push(sample)\n    if (samples.length > sampleCount) samples.shift()\n\n    // 3. Calculate the max latency from samples.\n    const maxLatency = Math.max(\n      ...samples.map((sample) =>\n        Math.max(...sample.map(({ latency }) => latency)),\n      ),\n    )\n\n    // 4. Calculate the score for each Transport.\n    const scores = transports\n      .map((_, i) => {\n        const latencies = samples.map((sample) => sample[i].latency)\n        const meanLatency =\n          latencies.reduce((acc, latency) => acc + latency, 0) /\n          latencies.length\n        const latencyScore = 1 - meanLatency / maxLatency\n\n        const successes = samples.map((sample) => sample[i].success)\n        const stabilityScore =\n          successes.reduce((acc, success) => acc + success, 0) /\n          successes.length\n\n        if (stabilityScore === 0) return [0, i]\n        return [\n          latencyWeight * latencyScore + stabilityWeight * stabilityScore,\n          i,\n        ]\n      })\n      .sort((a, b) => b[0] - a[0])\n\n    // 5. Sort the Transports by score.\n    onTransports(scores.map(([, i]) => transports[i]))\n\n    // 6. Wait, and then rank again.\n    await wait(interval)\n    rankTransports_()\n  }\n  rankTransports_()\n}\n", "import { BaseError } from './base.js'\n\nexport type UrlRequiredErrorType = UrlRequiredError & {\n  name: 'UrlRequiredError'\n}\nexport class UrlRequiredError extends BaseError {\n  constructor() {\n    super(\n      'No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.',\n      {\n        docsPath: '/docs/clients/intro',\n        name: 'UrlRequiredError',\n      },\n    )\n  }\n}\n", "import { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { EIP1193RequestFn, RpcSchema } from '../../types/eip1193.js'\nimport type { RpcRequest } from '../../types/rpc.js'\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\nimport {\n  getHttpRpcClient,\n  type HttpRpcClientOptions,\n} from '../../utils/rpc/http.js'\n\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\nexport type HttpTransportConfig<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = {\n  /**\n   * Whether to enable Batch JSON-RPC.\n   * @link https://www.jsonrpc.org/specification#batch\n   */\n  batch?:\n    | boolean\n    | {\n        /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\n        batchSize?: number | undefined\n        /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\n        wait?: number | undefined\n      }\n    | undefined\n  fetchFn?: HttpRpcClientOptions['fetchFn'] | undefined\n  /**\n   * Request configuration to pass to `fetch`.\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\n   */\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\n  /** A callback to handle the response from `fetch`. */\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\n  /** The key of the HTTP transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the HTTP transport. */\n  name?: TransportConfig['name'] | undefined\n  /** Whether to return JSON RPC errors as responses instead of throwing. */\n  raw?: raw | boolean | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** Typed JSON-RPC schema for the transport. */\n  rpcSchema?: rpcSchema | RpcSchema | undefined\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type HttpTransport<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = Transport<\n  'http',\n  {\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\n    url?: string | undefined\n  },\n  EIP1193RequestFn<rpcSchema, raw>\n>\n\nexport type HttpTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\n */\nexport function http<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n>(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string | undefined,\n  config: HttpTransportConfig<rpcSchema, raw> = {},\n): HttpTransport<rpcSchema, raw> {\n  const {\n    batch,\n    fetchFn,\n    fetchOptions,\n    key = 'http',\n    methods,\n    name = 'HTTP JSON-RPC',\n    onFetchRequest,\n    onFetchResponse,\n    retryDelay,\n    raw,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const { batchSize = 1000, wait = 0 } =\n      typeof batch === 'object' ? batch : {}\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.http[0]\n    if (!url_) throw new UrlRequiredError()\n\n    const rpcClient = getHttpRpcClient(url_, {\n      fetchFn,\n      fetchOptions,\n      onRequest: onFetchRequest,\n      onResponse: onFetchResponse,\n      timeout,\n    })\n\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n\n          const { schedule } = createBatchScheduler({\n            id: url_,\n            wait,\n            shouldSplitBatch(requests) {\n              return requests.length > batchSize\n            },\n            fn: (body: RpcRequest[]) =>\n              rpcClient.request({\n                body,\n              }),\n            sort: (a, b) => a.id - b.id,\n          })\n\n          const fn = async (body: RpcRequest) =>\n            batch\n              ? schedule(body)\n              : [\n                  await rpcClient.request({\n                    body,\n                  }),\n                ]\n\n          const [{ error, result }] = await fn(body)\n\n          if (raw) return { error, result }\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'http',\n      },\n      {\n        fetchOptions,\n        url: url_,\n      },\n    )\n  }\n}\n", "import type { Address } from 'abitype'\nimport { RpcRequestError } from '../../errors/request.js'\nimport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from '../../errors/transport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hash, LogTopic } from '../../types/misc.js'\nimport type { RpcResponse } from '../../types/rpc.js'\nimport { getSocket } from '../../utils/rpc/compat.js'\nimport type { SocketRpcClient } from '../../utils/rpc/socket.js'\nimport {\n  type GetWebSocketRpcClientOptions,\n  getWebSocketRpcClient,\n} from '../../utils/rpc/webSocket.js'\nimport {\n  type CreateTransportErrorType,\n  createTransport,\n  type Transport,\n  type TransportConfig,\n} from './createTransport.js'\n\ntype WebSocketTransportSubscribeParameters = {\n  onData: (data: RpcResponse) => void\n  onError?: ((error: any) => void) | undefined\n}\n\ntype WebSocketTransportSubscribeReturnType = {\n  subscriptionId: Hash\n  unsubscribe: () => Promise<RpcResponse<boolean>>\n}\n\ntype WebSocketTransportSubscribe = {\n  subscribe(\n    args: WebSocketTransportSubscribeParameters &\n      (\n        | {\n            params: ['newHeads']\n          }\n        | {\n            params: ['newPendingTransactions']\n          }\n        | {\n            params: [\n              'logs',\n              {\n                address?: Address | Address[]\n                topics?: LogTopic[]\n              },\n            ]\n          }\n        | {\n            params: ['syncing']\n          }\n      ),\n  ): Promise<WebSocketTransportSubscribeReturnType>\n}\n\nexport type WebSocketTransportConfig = {\n  /**\n   * Whether or not to send keep-alive ping messages.\n   * @default true\n   */\n  keepAlive?: GetWebSocketRpcClientOptions['keepAlive'] | undefined\n  /** The key of the WebSocket transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the WebSocket transport. */\n  name?: TransportConfig['name'] | undefined\n  /**\n   * Whether or not to attempt to reconnect on socket failure.\n   * @default true\n   */\n  reconnect?: GetWebSocketRpcClientOptions['reconnect'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\n  timeout?: TransportConfig['timeout'] | undefined\n}\n\nexport type WebSocketTransport = Transport<\n  'webSocket',\n  {\n    /**\n     * @deprecated use `getRpcClient` instead.\n     */\n    getSocket(): Promise<WebSocket>\n    getRpcClient(): Promise<SocketRpcClient<WebSocket>>\n    subscribe: WebSocketTransportSubscribe['subscribe']\n  }\n>\n\nexport type WebSocketTransportErrorType =\n  | CreateTransportErrorType\n  | UrlRequiredErrorType\n  | ErrorType\n\n/**\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\n */\nexport function webSocket(\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\n  url?: string,\n  config: WebSocketTransportConfig = {},\n): WebSocketTransport {\n  const {\n    keepAlive,\n    key = 'webSocket',\n    methods,\n    name = 'WebSocket JSON-RPC',\n    reconnect,\n    retryDelay,\n  } = config\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\n    const retryCount = config.retryCount ?? retryCount_\n    const timeout = timeout_ ?? config.timeout ?? 10_000\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\n    const wsRpcClientOpts = { keepAlive, reconnect }\n    if (!url_) throw new UrlRequiredError()\n    return createTransport(\n      {\n        key,\n        methods,\n        name,\n        async request({ method, params }) {\n          const body = { method, params }\n          const rpcClient = await getWebSocketRpcClient(url_, wsRpcClientOpts)\n          const { error, result } = await rpcClient.requestAsync({\n            body,\n            timeout,\n          })\n          if (error)\n            throw new RpcRequestError({\n              body,\n              error,\n              url: url_,\n            })\n          return result\n        },\n        retryCount,\n        retryDelay,\n        timeout,\n        type: 'webSocket',\n      },\n      {\n        getSocket() {\n          return getSocket(url_)\n        },\n        getRpcClient() {\n          return getWebSocketRpcClient(url_, wsRpcClientOpts)\n        },\n        async subscribe({ params, onData, onError }: any) {\n          const rpcClient = await getWebSocketRpcClient(url_, wsRpcClientOpts)\n          const { result: subscriptionId } = await new Promise<any>(\n            (resolve, reject) =>\n              rpcClient.request({\n                body: {\n                  method: 'eth_subscribe',\n                  params,\n                },\n                onError(error) {\n                  reject(error)\n                  onError?.(error)\n                  return\n                },\n                onResponse(response) {\n                  if (response.error) {\n                    reject(response.error)\n                    onError?.(response.error)\n                    return\n                  }\n\n                  if (typeof response.id === 'number') {\n                    resolve(response)\n                    return\n                  }\n                  if (response.method !== 'eth_subscription') return\n                  onData(response.params)\n                },\n              }),\n          )\n          return {\n            subscriptionId,\n            async unsubscribe() {\n              return new Promise<any>((resolve) =>\n                rpcClient.request({\n                  body: {\n                    method: 'eth_unsubscribe',\n                    params: [subscriptionId],\n                  },\n                  onResponse: resolve,\n                }),\n              )\n            },\n          }\n        },\n      },\n    )\n  }\n}\n", "import type { Address } from 'abitype'\n\nimport type * as BlockOverrides from 'ox/BlockOverrides'\nimport type * as Rpc from 'ox/RpcResponse'\nimport type {\n  RpcEstimateUserOperationGasReturnType,\n  RpcGetUserOperationByHashReturnType,\n  RpcUserOperation,\n  RpcUserOperationReceipt,\n} from '../account-abstraction/types/rpc.js'\nimport type { BlockTag } from './block.js'\nimport type { Capabilities, ChainIdToCapabilities } from './capabilities.js'\nimport type { Hash, Hex, LogTopic } from './misc.js'\nimport type {\n  RpcBlock as Block,\n  RpcBlockIdentifier as BlockIdentifier,\n  RpcBlockNumber as BlockNumber,\n  RpcFeeHistory as FeeHistory,\n  RpcLog as Log,\n  RpcProof as Proof,\n  Quantity,\n  RpcStateOverride,\n  RpcTransaction as Transaction,\n  RpcTransactionReceipt as TransactionReceipt,\n  RpcTransactionRequest as TransactionRequest,\n  RpcUncle as Uncle,\n} from './rpc.js'\nimport type { AccessList } from './transaction.js'\nimport type { ExactPartial, OneOf, PartialBy, Prettify } from './utils.js'\n\n//////////////////////////////////////////////////\n// Provider\n\nexport type EIP1474Methods = [\n  ...PublicRpcSchema,\n  ...WalletRpcSchema,\n  ...BundlerRpcSchema,\n  ...PaymasterRpcSchema,\n]\n\nexport type EIP1193Provider = Prettify<\n  EIP1193Events & {\n    request: EIP1193RequestFn<EIP1474Methods>\n  }\n>\n\n//////////////////////////////////////////////////\n// Errors\n\nexport type ProviderRpcErrorType = ProviderRpcError & {\n  name: 'ProviderRpcError'\n}\nexport class ProviderRpcError extends Error {\n  code: number\n  details: string\n\n  constructor(code: number, message: string) {\n    super(message)\n    this.code = code\n    this.details = message\n  }\n}\n\n//////////////////////////////////////////////////\n// Provider Events\n\nexport type ProviderConnectInfo = {\n  chainId: string\n}\n\nexport type ProviderMessage = {\n  type: string\n  data: unknown\n}\n\nexport type EIP1193EventMap = {\n  accountsChanged(accounts: Address[]): void\n  chainChanged(chainId: string): void\n  connect(connectInfo: ProviderConnectInfo): void\n  disconnect(error: ProviderRpcError): void\n  message(message: ProviderMessage): void\n}\n\nexport type EIP1193Events = {\n  on<event extends keyof EIP1193EventMap>(\n    event: event,\n    listener: EIP1193EventMap[event],\n  ): void\n  removeListener<event extends keyof EIP1193EventMap>(\n    event: event,\n    listener: EIP1193EventMap[event],\n  ): void\n}\n\n//////////////////////////////////////////////////\n// Provider Requests\n\nexport type AddEthereumChainParameter = {\n  /** A 0x-prefixed hexadecimal string */\n  chainId: string\n  /** The chain name. */\n  chainName: string\n  /** Native currency for the chain. */\n  nativeCurrency?:\n    | {\n        name: string\n        symbol: string\n        decimals: number\n      }\n    | undefined\n  rpcUrls: readonly string[]\n  blockExplorerUrls?: string[] | undefined\n  iconUrls?: string[] | undefined\n}\n\nexport type NetworkSync = {\n  /** The current block number */\n  currentBlock: Quantity\n  /** Number of latest block on the network */\n  highestBlock: Quantity\n  /** Block number at which syncing started */\n  startingBlock: Quantity\n}\n\nexport type WalletCallReceipt<quantity = Hex, status = Hex> = {\n  logs: {\n    address: Hex\n    data: Hex\n    topics: Hex[]\n  }[]\n  status: status\n  blockHash: Hex\n  blockNumber: quantity\n  gasUsed: quantity\n  transactionHash: Hex\n}\n\nexport type WalletGrantPermissionsParameters = {\n  signer?:\n    | {\n        type: string\n        data?: unknown | undefined\n      }\n    | undefined\n  permissions: readonly {\n    data: unknown\n    policies: readonly {\n      data: unknown\n      type: string\n    }[]\n    required?: boolean | undefined\n    type: string\n  }[]\n  expiry: number\n}\n\nexport type WalletGrantPermissionsReturnType = {\n  expiry: number\n  factory?: `0x${string}` | undefined\n  factoryData?: string | undefined\n  grantedPermissions: readonly {\n    data: unknown\n    policies: readonly {\n      data: unknown\n      type: string\n    }[]\n    required?: boolean | undefined\n    type: string\n  }[]\n  permissionsContext: string\n  signerData?:\n    | {\n        userOpBuilder?: `0x${string}` | undefined\n        submitToAddress?: `0x${string}` | undefined\n      }\n    | undefined\n}\n\nexport type WalletGetAssetsParameters = {\n  account: Address\n  assetFilter?:\n    | {\n        [chainId: Hex]: readonly {\n          address: Address\n          type: 'native' | 'erc20' | 'erc721' | (string & {})\n        }[]\n      }\n    | undefined\n  assetTypeFilter?:\n    | readonly ('native' | 'erc20' | 'erc721' | (string & {}))[]\n    | undefined\n  chainFilter?: readonly Hex[] | undefined\n}\n\nexport type WalletGetAssetsReturnType = {\n  [chainId: Hex]: readonly {\n    address: Address | 'native'\n    balance: Hex\n    metadata?: unknown | undefined\n    type: 'native' | 'erc20' | 'erc721' | (string & {})\n  }[]\n}\n\nexport type WalletGetCallsStatusReturnType<\n  capabilities extends Capabilities = Capabilities,\n  numberType = Hex,\n  bigintType = Hex,\n  receiptStatus = Hex,\n> = {\n  atomic: boolean\n  capabilities?: capabilities | Capabilities | undefined\n  chainId: numberType\n  id: string\n  receipts?: WalletCallReceipt<bigintType, receiptStatus>[] | undefined\n  status: number\n  version: string\n}\n\nexport type WalletPermissionCaveat = {\n  type: string\n  value: any\n}\n\nexport type WalletPermission = {\n  caveats: WalletPermissionCaveat[]\n  date: number\n  id: string\n  invoker: `http://${string}` | `https://${string}`\n  parentCapability: 'eth_accounts' | string\n}\n\nexport type WalletSendCallsParameters<\n  capabilities extends Capabilities = Capabilities,\n  chainId extends Hex | number = Hex,\n  quantity extends Quantity | bigint = Quantity,\n> = [\n  {\n    atomicRequired: boolean\n    calls: readonly {\n      capabilities?: capabilities | Capabilities | undefined\n      to?: Address | undefined\n      data?: Hex | undefined\n      value?: quantity | undefined\n    }[]\n    capabilities?: capabilities | Capabilities | undefined\n    chainId?: chainId | undefined\n    id?: string | undefined\n    from?: Address | undefined\n    version: string\n  },\n]\n\nexport type WalletSendCallsReturnType<\n  capabilities extends Capabilities = Capabilities,\n> = {\n  capabilities?: capabilities | undefined\n  id: string\n}\n\nexport type WatchAssetParams = {\n  /** Token type. */\n  type: 'ERC20'\n  options: {\n    /** The address of the token contract */\n    address: string\n    /** A ticker symbol or shorthand, up to 11 characters */\n    symbol: string\n    /** The number of token decimals */\n    decimals: number\n    /** A string url of the token logo */\n    image?: string | undefined\n  }\n}\n\nexport type BundlerRpcSchema = [\n  /**\n   * @description Returns the chain ID associated with the current network\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_chainid\n   */\n  {\n    Method: 'eth_chainId'\n    Parameters?: undefined\n    ReturnType: Hex\n  },\n  /**\n   * @description Estimate the gas values for a UserOperation.\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_estimateuseroperationgas\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_estimateUserOperationGas',\n   *  params: [{ ... }]\n   * })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_estimateUserOperationGas'\n    Parameters:\n      | [userOperation: RpcUserOperation, entrypoint: Address]\n      | [\n          userOperation: RpcUserOperation,\n          entrypoint: Address,\n          stateOverrideSet: RpcStateOverride,\n        ]\n    ReturnType: RpcEstimateUserOperationGasReturnType\n  },\n  /**\n   * @description Return a UserOperation based on a hash.\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_getuseroperationbyhash\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_getUserOperationByHash',\n   *  params: ['0x...']\n   * })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getUserOperationByHash'\n    Parameters: [hash: Hash]\n    ReturnType: RpcGetUserOperationByHashReturnType | null\n  },\n  /**\n   * @description Return a UserOperation receipt based on a hash.\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_getuseroperationreceipt\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_getUserOperationReceipt',\n   *  params: ['0x...']\n   * })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getUserOperationReceipt'\n    Parameters: [hash: Hash]\n    ReturnType: RpcUserOperationReceipt | null\n  },\n  /**\n   * @description Submits a User Operation object to the User Operation pool of the client.\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_senduseroperation\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_sendUserOperation',\n   *  params: [{ ... }]\n   * })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendUserOperation'\n    Parameters: [userOperation: RpcUserOperation, entrypoint: Address]\n    ReturnType: Hash\n  },\n  /**\n   * @description Return the list of supported entry points by the client.\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_supportedentrypoints\n   */\n  {\n    Method: 'eth_supportedEntryPoints'\n    Parameters?: undefined\n    ReturnType: readonly Address[]\n  },\n]\n\nexport type DebugBundlerRpcSchema = [\n  /**\n   * @description Clears the bundler mempool and reputation data of paymasters/accounts/factories/aggregators.\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L1\n   */\n  {\n    Method: 'debug_bundler_clearState'\n    Parameters?: undefined\n    ReturnType: undefined\n  },\n  /**\n   * @description Returns the current mempool\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L8\n   */\n  {\n    Method: 'debug_bundler_dumpMempool'\n    Parameters: [entryPoint: Address]\n    ReturnType: readonly { userOp: RpcUserOperation }[]\n  },\n  /**\n   * @description Forces the bundler to execute the entire current mempool.\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L19\n   */\n  {\n    Method: 'debug_bundler_sendBundleNow'\n    Parameters?: undefined\n    ReturnType: Hash\n  },\n  /**\n   * @description Toggles bundling mode between 'auto' and 'manual'\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L26\n   */\n  {\n    Method: 'debug_bundler_setBundlingMode'\n    Parameters: [mode: 'auto' | 'manual']\n    ReturnType: undefined\n  },\n  /**\n   * @description Sets reputation of given addresses.\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L37\n   */\n  {\n    Method: 'debug_bundler_setReputation'\n    Parameters: [\n      reputations: readonly {\n        address: Address\n        opsSeen: Hex\n        opsIncluded: Hex\n      }[],\n      entryPoint: Address,\n    ]\n    ReturnType: undefined\n  },\n  /**\n   * @description Returns the reputation data of all observed addresses.\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L52\n   */\n  {\n    Method: 'debug_bundler_dumpReputation'\n    Parameters: [entryPoint: Address]\n    ReturnType: readonly {\n      address: Address\n      opsSeen: Hex\n      opsIncluded: Hex\n    }[]\n  },\n  /**\n   * @description Add a bulk of UserOps into the mempool\n   *\n   * @link https://github.com/eth-infinitism/bundler-spec/blob/a247b5de59a702063ea5b09d6136f119a061642b/src/debug/debug.yaml#L64\n   */\n  {\n    Method: 'debug_bundler_addUserOps'\n    Parameters: [userOps: readonly RpcUserOperation[], entryPoint: Address]\n    ReturnType: undefined\n  },\n]\n\nexport type PaymasterRpcSchema = [\n  /**\n   * @description Returns the chain ID associated with the current network\n   *\n   * @link https://eips.ethereum.org/EIPS/eip-4337#-eth_chainid\n   */\n  {\n    Method: 'pm_getPaymasterStubData'\n    Parameters?: [\n      userOperation: OneOf<\n        | PartialBy<\n            Pick<\n              RpcUserOperation<'0.6'>,\n              | 'callData'\n              | 'callGasLimit'\n              | 'initCode'\n              | 'maxFeePerGas'\n              | 'maxPriorityFeePerGas'\n              | 'nonce'\n              | 'sender'\n              | 'preVerificationGas'\n              | 'verificationGasLimit'\n            >,\n            | 'callGasLimit'\n            | 'initCode'\n            | 'maxFeePerGas'\n            | 'maxPriorityFeePerGas'\n            | 'preVerificationGas'\n            | 'verificationGasLimit'\n          >\n        | PartialBy<\n            Pick<\n              RpcUserOperation<'0.7'>,\n              | 'callData'\n              | 'callGasLimit'\n              | 'factory'\n              | 'factoryData'\n              | 'maxFeePerGas'\n              | 'maxPriorityFeePerGas'\n              | 'nonce'\n              | 'sender'\n              | 'preVerificationGas'\n              | 'verificationGasLimit'\n            >,\n            | 'callGasLimit'\n            | 'factory'\n            | 'factoryData'\n            | 'maxFeePerGas'\n            | 'maxPriorityFeePerGas'\n            | 'preVerificationGas'\n            | 'verificationGasLimit'\n          >\n      >,\n      entrypoint: Address,\n      chainId: Hex,\n      context: unknown,\n    ]\n    ReturnType: OneOf<\n      | { paymasterAndData: Hex }\n      | {\n          paymaster: Address\n          paymasterData: Hex\n          paymasterVerificationGasLimit: Hex\n          paymasterPostOpGasLimit: Hex\n        }\n    > & {\n      sponsor?: { name: string; icon?: string | undefined } | undefined\n      isFinal?: boolean | undefined\n    }\n  },\n  /**\n   * @description Returns values to be used in paymaster-related fields of a signed user operation.\n   *\n   * @link https://github.com/ethereum/ERCs/blob/master/ERCS/erc-7677.md#pm_getpaymasterdata\n   */\n  {\n    Method: 'pm_getPaymasterData'\n    Parameters?: [\n      userOperation:\n        | Pick<\n            RpcUserOperation<'0.6'>,\n            | 'callData'\n            | 'callGasLimit'\n            | 'initCode'\n            | 'maxFeePerGas'\n            | 'maxPriorityFeePerGas'\n            | 'nonce'\n            | 'sender'\n            | 'preVerificationGas'\n            | 'verificationGasLimit'\n          >\n        | Pick<\n            RpcUserOperation<'0.7'>,\n            | 'callData'\n            | 'callGasLimit'\n            | 'factory'\n            | 'factoryData'\n            | 'maxFeePerGas'\n            | 'maxPriorityFeePerGas'\n            | 'nonce'\n            | 'sender'\n            | 'preVerificationGas'\n            | 'verificationGasLimit'\n          >,\n      entrypoint: Address,\n      chainId: Hex,\n      context: unknown,\n    ]\n    ReturnType: OneOf<\n      | { paymasterAndData: Hex }\n      | {\n          paymaster: Address\n          paymasterData: Hex\n          paymasterVerificationGasLimit: Hex\n          paymasterPostOpGasLimit: Hex\n        }\n    >\n  },\n]\n\nexport type PublicRpcSchema = [\n  /**\n   * @description Returns the version of the current client\n   *\n   * @example\n   * provider.request({ method: 'web3_clientVersion' })\n   * // => 'MetaMask/v1.0.0'\n   */\n  {\n    Method: 'web3_clientVersion'\n    Parameters?: undefined\n    ReturnType: string\n  },\n  /**\n   * @description Hashes data using the Keccak-256 algorithm\n   *\n   * @example\n   * provider.request({ method: 'web3_sha3', params: ['0x68656c6c6f20776f726c64'] })\n   * // => '0xc94770007dda54cF92009BFF0dE90c06F603a09f'\n   */\n  {\n    Method: 'web3_sha3'\n    Parameters: [data: Hash]\n    ReturnType: string\n  },\n  /**\n   * @description Determines if this client is listening for new network connections\n   *\n   * @example\n   * provider.request({ method: 'net_listening' })\n   * // => true\n   */\n  {\n    Method: 'net_listening'\n    Parameters?: undefined\n    ReturnType: boolean\n  },\n  /**\n   * @description Returns the number of peers currently connected to this client\n   *\n   * @example\n   * provider.request({ method: 'net_peerCount' })\n   * // => '0x1'\n   */\n  {\n    Method: 'net_peerCount'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the chain ID associated with the current network\n   *\n   * @example\n   * provider.request({ method: 'net_version' })\n   * // => '1'\n   */\n  {\n    Method: 'net_version'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the base fee per blob gas in wei.\n   *\n   * @example\n   * provider.request({ method: 'eth_blobBaseFee' })\n   * // => '0x09184e72a000'\n   */\n  {\n    Method: 'eth_blobBaseFee'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the number of the most recent block seen by this client\n   *\n   * @example\n   * provider.request({ method: 'eth_blockNumber' })\n   * // => '0x1b4'\n   */\n  {\n    Method: 'eth_blockNumber'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Executes a new message call immediately without submitting a transaction to the network\n   *\n   * @example\n   * provider.request({ method: 'eth_call', params: [{ to: '0x...', data: '0x...' }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_call'\n    Parameters:\n      | readonly [transaction: ExactPartial<TransactionRequest>]\n      | readonly [\n          transaction: ExactPartial<TransactionRequest>,\n          block: BlockNumber | BlockTag | BlockIdentifier,\n        ]\n      | readonly [\n          transaction: ExactPartial<TransactionRequest>,\n          block: BlockNumber | BlockTag | BlockIdentifier,\n          stateOverrideSet: RpcStateOverride,\n        ]\n      | readonly [\n          transaction: ExactPartial<TransactionRequest>,\n          block: BlockNumber | BlockTag | BlockIdentifier,\n          stateOverrideSet: RpcStateOverride,\n          blockOverrides: BlockOverrides.Rpc,\n        ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Creates an EIP-2930 access list that can be included in a transaction.\n   *\n   * @example\n   * provider.request({ method: 'eth_createAccessList', params: [{ to: '0x...', data: '0x...' }] })\n   * // => {\n   * //   accessList: ['0x...', '0x...'],\n   * //   gasUsed: '0x123',\n   * // }\n   */\n  {\n    Method: 'eth_createAccessList'\n    Parameters:\n      | [transaction: ExactPartial<TransactionRequest>]\n      | [\n          transaction: ExactPartial<TransactionRequest>,\n          block: BlockNumber | BlockTag | BlockIdentifier,\n        ]\n    ReturnType: {\n      accessList: AccessList\n      gasUsed: Quantity\n    }\n  },\n  /**\n   * @description Returns the chain ID associated with the current network\n   * @example\n   * provider.request({ method: 'eth_chainId' })\n   * // => '1'\n   */\n  {\n    Method: 'eth_chainId'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the client coinbase address.\n   * @example\n   * provider.request({ method: 'eth_coinbase' })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_coinbase'\n    Parameters?: undefined\n    ReturnType: Address\n  },\n  /**\n   * @description Estimates the gas necessary to complete a transaction without submitting it to the network\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_estimateGas',\n   *  params: [{ from: '0x...', to: '0x...', value: '0x...' }]\n   * })\n   * // => '0x5208'\n   */\n  {\n    Method: 'eth_estimateGas'\n    Parameters:\n      | [transaction: TransactionRequest]\n      | [transaction: TransactionRequest, block: BlockNumber | BlockTag]\n      | [\n          transaction: TransactionRequest,\n          block: BlockNumber | BlockTag,\n          stateOverride: RpcStateOverride,\n        ]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns a collection of historical gas information\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_feeHistory',\n   *  params: ['4', 'latest', ['25', '75']]\n   * })\n   * // => {\n   * //   oldestBlock: '0x1',\n   * //   baseFeePerGas: ['0x1', '0x2', '0x3', '0x4'],\n   * //   gasUsedRatio: ['0x1', '0x2', '0x3', '0x4'],\n   * //   reward: [['0x1', '0x2'], ['0x3', '0x4'], ['0x5', '0x6'], ['0x7', '0x8']]\n   * // }\n   * */\n  {\n    Method: 'eth_feeHistory'\n    Parameters: [\n      /** Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available. */\n      blockCount: Quantity,\n      /** Highest number block of the requested range. */\n      newestBlock: BlockNumber | BlockTag,\n      /** A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used. */\n      rewardPercentiles: number[] | undefined,\n    ]\n    ReturnType: FeeHistory\n  },\n  /**\n   * @description Returns the current price of gas expressed in wei\n   *\n   * @example\n   * provider.request({ method: 'eth_gasPrice' })\n   * // => '0x09184e72a000'\n   */\n  {\n    Method: 'eth_gasPrice'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the balance of an address in wei\n   *\n   * @example\n   * provider.request({ method: 'eth_getBalance', params: ['0x...', 'latest'] })\n   * // => '0x12a05...'\n   */\n  {\n    Method: 'eth_getBalance'\n    Parameters: [\n      address: Address,\n      block: BlockNumber | BlockTag | BlockIdentifier,\n    ]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns information about a block specified by hash\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getBlockByHash', params: ['0x...', true] })\n   * // => {\n   * //   number: '0x1b4',\n   * //   hash: '0x...',\n   * //   parentHash: '0x...',\n   * //   ...\n   * // }\n   */\n  {\n    Method: 'eth_getBlockByHash'\n    Parameters: [\n      /** hash of a block */\n      hash: Hash,\n      /** true will pull full transaction objects, false will pull transaction hashes */\n      includeTransactionObjects: boolean,\n    ]\n    ReturnType: Block | null\n  },\n  /**\n   * @description Returns information about a block specified by number\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getBlockByNumber', params: ['0x1b4', true] })\n   * // => {\n   * //   number: '0x1b4',\n   * //   hash: '0x...',\n   * //   parentHash: '0x...',\n   * //   ...\n   * // }\n   */\n  {\n    Method: 'eth_getBlockByNumber'\n    Parameters: [\n      /** block number, or one of \"latest\", \"safe\", \"finalized\", \"earliest\" or \"pending\" */\n      block: BlockNumber | BlockTag,\n      /** true will pull full transaction objects, false will pull transaction hashes */\n      includeTransactionObjects: boolean,\n    ]\n    ReturnType: Block | null\n  },\n  /**\n   * @description Returns the number of transactions in a block specified by block hash\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getBlockTransactionCountByHash', params: ['0x...'] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_getBlockTransactionCountByHash'\n    Parameters: [hash: Hash]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the number of transactions in a block specified by block number\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getBlockTransactionCountByNumber', params: ['0x1b4'] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_getBlockTransactionCountByNumber'\n    Parameters: [block: BlockNumber | BlockTag]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the contract code stored at a given address\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getCode', params: ['0x...', 'latest'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_getCode'\n    Parameters: [\n      address: Address,\n      block: BlockNumber | BlockTag | BlockIdentifier,\n    ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Returns a list of all logs based on filter ID since the last log retrieval\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getFilterChanges', params: ['0x...'] })\n   * // => [{ ... }, { ... }]\n   */\n  {\n    Method: 'eth_getFilterChanges'\n    Parameters: [filterId: Quantity]\n    ReturnType: Log[] | Hex[]\n  },\n  /**\n   * @description Returns a list of all logs based on filter ID\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getFilterLogs', params: ['0x...'] })\n   * // => [{ ... }, { ... }]\n   */\n  {\n    Method: 'eth_getFilterLogs'\n    Parameters: [filterId: Quantity]\n    ReturnType: Log[]\n  },\n  /**\n   * @description Returns a list of all logs based on a filter object\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getLogs', params: [{ fromBlock: '0x...', toBlock: '0x...', address: '0x...', topics: ['0x...'] }] })\n   * // => [{ ... }, { ... }]\n   */\n  {\n    Method: 'eth_getLogs'\n    Parameters: [\n      {\n        address?: Address | Address[] | undefined\n        topics?: LogTopic[] | undefined\n      } & (\n        | {\n            fromBlock?: BlockNumber | BlockTag | undefined\n            toBlock?: BlockNumber | BlockTag | undefined\n            blockHash?: undefined\n          }\n        | {\n            fromBlock?: undefined\n            toBlock?: undefined\n            blockHash?: Hash | undefined\n          }\n      ),\n    ]\n    ReturnType: Log[]\n  },\n  /**\n   * @description Returns the account and storage values of the specified account including the Merkle-proof.\n   * @link https://eips.ethereum.org/EIPS/eip-1186\n   * @example\n   * provider.request({ method: 'eth_getProof', params: ['0x...', ['0x...'], 'latest'] })\n   * // => {\n   * //   ...\n   * // }\n   */\n  {\n    Method: 'eth_getProof'\n    Parameters: [\n      /** Address of the account. */\n      address: Address,\n      /** An array of storage-keys that should be proofed and included. */\n      storageKeys: Hash[],\n      block: BlockNumber | BlockTag,\n    ]\n    ReturnType: Proof\n  },\n  /**\n   * @description Returns the value from a storage position at an address\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getStorageAt', params: ['0x...', '0x...', 'latest'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_getStorageAt'\n    Parameters: [\n      address: Address,\n      index: Quantity,\n      block: BlockNumber | BlockTag | BlockIdentifier,\n    ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Returns information about a transaction specified by block hash and transaction index\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getTransactionByBlockHashAndIndex', params: ['0x...', '0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getTransactionByBlockHashAndIndex'\n    Parameters: [hash: Hash, index: Quantity]\n    ReturnType: Transaction | null\n  },\n  /**\n   * @description Returns information about a transaction specified by block number and transaction index\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getTransactionByBlockNumberAndIndex', params: ['0x...', '0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getTransactionByBlockNumberAndIndex'\n    Parameters: [block: BlockNumber | BlockTag, index: Quantity]\n    ReturnType: Transaction | null\n  },\n  /**\n   * @description Returns information about a transaction specified by hash\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getTransactionByHash', params: ['0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getTransactionByHash'\n    Parameters: [hash: Hash]\n    ReturnType: Transaction | null\n  },\n  /**\n   * @description Returns the number of transactions sent from an address\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getTransactionCount', params: ['0x...', 'latest'] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_getTransactionCount'\n    Parameters: [\n      address: Address,\n      block: BlockNumber | BlockTag | BlockIdentifier,\n    ]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the receipt of a transaction specified by hash\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getTransactionReceipt', params: ['0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getTransactionReceipt'\n    Parameters: [hash: Hash]\n    ReturnType: TransactionReceipt | null\n  },\n  /**\n   * @description Returns information about an uncle specified by block hash and uncle index position\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getUncleByBlockHashAndIndex', params: ['0x...', '0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getUncleByBlockHashAndIndex'\n    Parameters: [hash: Hash, index: Quantity]\n    ReturnType: Uncle | null\n  },\n  /**\n   * @description Returns information about an uncle specified by block number and uncle index position\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getUncleByBlockNumberAndIndex', params: ['0x...', '0x...'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_getUncleByBlockNumberAndIndex'\n    Parameters: [block: BlockNumber | BlockTag, index: Quantity]\n    ReturnType: Uncle | null\n  },\n  /**\n   * @description Returns the number of uncles in a block specified by block hash\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getUncleCountByBlockHash', params: ['0x...'] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_getUncleCountByBlockHash'\n    Parameters: [hash: Hash]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the number of uncles in a block specified by block number\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_getUncleCountByBlockNumber', params: ['0x...'] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_getUncleCountByBlockNumber'\n    Parameters: [block: BlockNumber | BlockTag]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the current maxPriorityFeePerGas in wei.\n   * @link https://ethereum.github.io/execution-apis/api-documentation/\n   * @example\n   * provider.request({ method: 'eth_maxPriorityFeePerGas' })\n   * // => '0x5f5e100'\n   */\n  {\n    Method: 'eth_maxPriorityFeePerGas'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Creates a filter to listen for new blocks that can be used with `eth_getFilterChanges`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_newBlockFilter' })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_newBlockFilter'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Creates a filter to listen for specific state changes that can then be used with `eth_getFilterChanges`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_newFilter', params: [{ fromBlock: '0x...', toBlock: '0x...', address: '0x...', topics: ['0x...'] }] })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_newFilter'\n    Parameters: [\n      filter: {\n        fromBlock?: BlockNumber | BlockTag | undefined\n        toBlock?: BlockNumber | BlockTag | undefined\n        address?: Address | Address[] | undefined\n        topics?: LogTopic[] | undefined\n      },\n    ]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Creates a filter to listen for new pending transactions that can be used with `eth_getFilterChanges`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_newPendingTransactionFilter' })\n   * // => '0x1'\n   */\n  {\n    Method: 'eth_newPendingTransactionFilter'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Returns the current Ethereum protocol version\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_protocolVersion' })\n   * // => '54'\n   */\n  {\n    Method: 'eth_protocolVersion'\n    Parameters?: undefined\n    ReturnType: string\n  },\n  /**\n   * @description Sends a **signed** transaction to the network\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_sendRawTransaction', params: ['0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendRawTransaction'\n    Parameters: [signedTransaction: Hex]\n    ReturnType: Hash\n  },\n  /**\n   * @description Sends a **signed** transaction to the network synchronously\n   * @link https://eips.ethereum.org/EIPS/eip-7966\n   * @example\n   * provider.request({ method: 'eth_sendRawTransactionSync', params: ['0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendRawTransactionSync'\n    Parameters:\n      | [signedTransaction: Hex]\n      | [signedTransaction: Hex, timeout: Hex]\n    ReturnType: TransactionReceipt\n  },\n  /**\n   * @description Simulates execution of a set of calls with optional block and state overrides.\n   * @example\n   * provider.request({ method: 'eth_simulateV1', params: [{ blockStateCalls: [{ calls: [{ from: '0x...', to: '0x...', value: '0x...', data: '0x...' }] }] }, 'latest'] })\n   * // => { ... }\n   */\n  {\n    Method: 'eth_simulateV1'\n    Parameters: [\n      {\n        blockStateCalls: readonly {\n          blockOverrides?: BlockOverrides.Rpc | undefined\n          calls?: readonly ExactPartial<TransactionRequest>[] | undefined\n          stateOverrides?: RpcStateOverride | undefined\n        }[]\n        returnFullTransactions?: boolean | undefined\n        traceTransfers?: boolean | undefined\n        validation?: boolean | undefined\n      },\n      BlockNumber | BlockTag,\n    ]\n    ReturnType: readonly (Block & {\n      calls: readonly {\n        error?:\n          | {\n              data?: Hex | undefined\n              code: number\n              message: string\n            }\n          | undefined\n        logs?: readonly Log[] | undefined\n        gasUsed: Hex\n        returnData: Hex\n        status: Hex\n      }[]\n    })[]\n  },\n  /**\n   * @description Destroys a filter based on filter ID\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_uninstallFilter', params: ['0x1'] })\n   * // => true\n   */\n  {\n    Method: 'eth_uninstallFilter'\n    Parameters: [filterId: Quantity]\n    ReturnType: boolean\n  },\n]\n\nexport type TestRpcSchema<mode extends string> = [\n  /**\n   * @description Add information about compiled contracts\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult\n   */\n  {\n    Method: `${mode}_addCompilationResult`\n    Parameters: any[]\n    ReturnType: any\n  },\n  /**\n   * @description Remove a transaction from the mempool\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_droptransaction\n   */\n  {\n    Method: `${mode}_dropTransaction`\n    Parameters: [hash: Hash]\n    ReturnType: void\n  },\n  /**\n   * @description Serializes the current state (including contracts code, contract's storage, accounts properties, etc.) into a savable data blob.\n   */\n  {\n    Method: `${mode}_dumpState`\n    Parameters?: undefined\n    ReturnType: Hex\n  },\n  /**\n   * @description Turn on call traces for transactions that are returned to the user when they execute a transaction (instead of just txhash/receipt).\n   */\n  {\n    Method: `${mode}_enableTraces`\n    Parameters?: undefined\n    ReturnType: void\n  },\n  /**\n   * @description Impersonate an account or contract address.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_impersonateaccount\n   */\n  {\n    Method: `${mode}_impersonateAccount`\n    Parameters: [address: Address]\n    ReturnType: void\n  },\n  /**\n   * @description Returns true if automatic mining is enabled, and false otherwise. See [Mining Modes](https://hardhat.org/hardhat-network/explanation/mining-modes) to learn more.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_getautomine\n   */\n  {\n    Method: `${mode}_getAutomine`\n    Parameters?: undefined\n    ReturnType: boolean\n  },\n  /**\n   * @description Adds state previously dumped with `dumpState` to the current chain.\n   */\n  {\n    Method: `${mode}_loadState`\n    Parameters?: [Hex] | undefined\n    ReturnType: void\n  },\n  /**\n   * @description Advance the block number of the network by a certain number of blocks\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_mine\n   */\n  {\n    Method: `${mode}_mine`\n    Parameters: [\n      /** Number of blocks to mine. */\n      count: Hex,\n      /** Interval between each block in seconds. */\n      interval: Hex | undefined,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Resets the fork.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_reset\n   */\n  {\n    Method: `${mode}_reset`\n    Parameters: any[]\n    ReturnType: void\n  },\n  /**\n   * @description Modifies the balance of an account.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setbalance\n   */\n  {\n    Method: `${mode}_setBalance`\n    Parameters: [\n      /** The address of the target account. */\n      address: Address,\n      /** Amount to send in wei. */\n      balance: Quantity,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Modifies the bytecode stored at an account's address.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setcode\n   */\n  {\n    Method: `${mode}_setCode`\n    Parameters: [\n      /** The address of the contract. */\n      address: Address,\n      /** Data bytecode. */\n      data: string,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Sets the coinbase address to be used in new blocks.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setcoinbase\n   */\n  {\n    Method: `${mode}_setCoinbase`\n    Parameters: [\n      /** The address to set as the coinbase address. */\n      address: Address,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Enable or disable logging on the test node network.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setcoinbase\n   */\n  {\n    Method: `${mode}_setLoggingEnabled`\n    Parameters: [enabled: boolean]\n    ReturnType: void\n  },\n  /**\n   * @description Change the minimum gas price accepted by the network (in wei).\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setmingasprice\n   */\n  {\n    Method: `${mode}_setMinGasPrice`\n    Parameters: [gasPrice: Quantity]\n    ReturnType: void\n  },\n  /**\n   * @description Sets the base fee of the next block.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setnextblockbasefeepergas\n   */\n  {\n    Method: `${mode}_setNextBlockBaseFeePerGas`\n    Parameters: [baseFeePerGas: Quantity]\n    ReturnType: void\n  },\n  /**\n   * @description Modifies an account's nonce by overwriting it.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setnonce\n   */\n  {\n    Method: `${mode}_setNonce`\n    Parameters: [\n      /** The account address. */\n      address: Address,\n      /** The new nonce. */\n      nonce: Quantity,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Sets the backend RPC URL.\n   */\n  {\n    Method: `${mode}_setRpcUrl`\n    Parameters: [url: string]\n    ReturnType: void\n  },\n  /**\n   * @description Writes a single position of an account's storage.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_setstorageat\n   */\n  {\n    Method: `${mode}_setStorageAt`\n    Parameters: [\n      /** The account address. */\n      address: Address,\n      /** The storage position index. */\n      index: Quantity,\n      /** The storage value. */\n      value: Quantity,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Use this method to stop impersonating an account after having previously used impersonateAccount.\n   * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_stopimpersonatingaccount\n   */\n  {\n    Method: `${mode}_stopImpersonatingAccount`\n    Parameters: [\n      /** The address to stop impersonating. */\n      address: Address,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Jump forward in time by the given amount of time, in seconds.\n   * @link https://github.com/trufflesuite/ganache/blob/ef1858d5d6f27e4baeb75cccd57fb3dc77a45ae8/src/chains/ethereum/ethereum/RPC-METHODS.md#evm_increasetime\n   */\n  {\n    Method: `${mode}_increaseTime`\n    Parameters: [seconds: number]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Modifies the balance of an account.\n   * @link https://ganache.dev/#evm_setAccountBalance\n   */\n  {\n    Method: 'evm_setAccountBalance'\n    Parameters: [\n      /** The address of the target account. */\n      address: Address,\n      /** Amount to send in wei. */\n      value: Quantity,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Modifies the bytecode stored at an account's address.\n   * @link https://ganache.dev/#evm_setAccountCode\n   */\n  {\n    Method: 'evm_setAccountCode'\n    Parameters: [\n      /** The address of the contract. */\n      address: Address,\n      /** Data bytecode. */\n      data: string,\n    ]\n    ReturnType: void\n  },\n  /**\n   * @description Enables or disables, based on the single boolean argument, the automatic mining of new blocks with each new transaction submitted to the network.\n   * @link https://hardhat.org/hardhat-network/docs/reference#evm_setautomine\n   */\n  {\n    Method: 'evm_setAutomine'\n    Parameters: [boolean]\n    ReturnType: void\n  },\n  /**\n   * @description Sets the block's gas limit.\n   * @link https://hardhat.org/hardhat-network/docs/reference#evm_setblockgaslimit\n   */\n  {\n    Method: 'evm_setBlockGasLimit'\n    Parameters: [gasLimit: Quantity]\n    ReturnType: void\n  },\n  /**\n   * @description Jump forward in time by the given amount of time, in seconds.\n   * @link https://github.com/trufflesuite/ganache/blob/ef1858d5d6f27e4baeb75cccd57fb3dc77a45ae8/src/chains/ethereum/ethereum/RPC-METHODS.md#evm_increasetime\n   */\n  {\n    Method: 'evm_increaseTime'\n    Parameters: [seconds: Quantity]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Similar to `evm_increaseTime` but sets a block timestamp `interval`.\n   * The timestamp of the next block will be computed as `lastBlock_timestamp` + `interval`\n   */\n  {\n    Method: `${mode}_setBlockTimestampInterval`\n    Parameters: [seconds: number]\n    ReturnType: void\n  },\n  /**\n   * @description Removes `setBlockTimestampInterval` if it exists\n   */\n  {\n    Method: `${mode}_removeBlockTimestampInterval`\n    Parameters?: undefined\n    ReturnType: void\n  },\n  /**\n   * @description Enables (with a numeric argument greater than 0) or disables (with a numeric argument equal to 0), the automatic mining of blocks at a regular interval of milliseconds, each of which will include all pending transactions.\n   * @link https://hardhat.org/hardhat-network/docs/reference#evm_setintervalmining\n   */\n  {\n    Method: 'evm_setIntervalMining'\n    Parameters: [number]\n    ReturnType: void\n  },\n  /**\n   * @description Set the timestamp of the next block.\n   * @link https://hardhat.org/hardhat-network/docs/reference#evm_setnextblocktimestamp\n   */\n  {\n    Method: 'evm_setNextBlockTimestamp'\n    Parameters: [Quantity]\n    ReturnType: void\n  },\n  /**\n   * @description Snapshot the state of the blockchain at the current block. Takes no parameters. Returns the id of the snapshot that was created.\n   * @link https://hardhat.org/hardhat-network/docs/reference#evm_snapshot\n   */\n  {\n    Method: 'evm_snapshot'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to.\n   */\n  {\n    Method: 'evm_revert'\n    Parameters?: [id: Quantity] | undefined\n    ReturnType: void\n  },\n  /**\n   * @description Enables the automatic mining of new blocks with each new transaction submitted to the network.\n   * @link https://ganache.dev/#miner_start\n   */\n  {\n    Method: 'miner_start'\n    Parameters?: undefined\n    ReturnType: void\n  },\n  /**\n   * @description Disables the automatic mining of new blocks with each new transaction submitted to the network.\n   * @link https://ganache.dev/#miner_stop\n   */\n  {\n    Method: 'miner_stop'\n    Parameters?: undefined\n    ReturnType: void\n  },\n  /**\n   * @link https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-txpool#txpool-content\n   */\n  {\n    Method: 'txpool_content'\n    Parameters?: undefined\n    ReturnType: {\n      pending: Record<Address, Record<string, Transaction>>\n      queued: Record<Address, Record<string, Transaction>>\n    }\n  },\n  /**\n   * @link https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-txpool#txpool-inspect\n   */\n  {\n    Method: 'txpool_inspect'\n    Parameters?: undefined\n    ReturnType: {\n      pending: Record<Address, Record<string, string>>\n      queued: Record<Address, Record<string, string>>\n    }\n  },\n  /**\n   * @link https://geth.ethereum.org/docs/interacting-with-geth/rpc/ns-txpool#txpool-inspect\n   */\n  {\n    Method: 'txpool_status'\n    Parameters?: undefined\n    ReturnType: {\n      pending: Quantity\n      queued: Quantity\n    }\n  },\n  /**\n   * @description Returns whether the client is actively mining new blocks.\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_mining' })\n   * // => true\n   */\n  {\n    Method: 'eth_mining'\n    Parameters?: undefined\n    ReturnType: boolean\n  },\n  /**\n   * @description Advance the block number of the network by a certain number of blocks.\n   * @link https://ganache.dev/#evm_mine\n   */\n  {\n    Method: 'evm_mine'\n    Parameters?:\n      | [\n          {\n            /** Number of blocks to mine. */\n            blocks: Hex\n          },\n        ]\n      | undefined\n    ReturnType: void\n  },\n  /**\n   * @description Creates, signs, and sends a new transaction to the network regardless of the signature.\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_sendTransaction', params: [{ from: '0x...', to: '0x...', value: '0x...' }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendUnsignedTransaction'\n    Parameters: [transaction: TransactionRequest]\n    ReturnType: Hash\n  },\n]\n\nexport type WalletRpcSchema = [\n  /**\n   * @description Returns a list of addresses owned by this client\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_accounts' })\n   * // => ['0x0fB69...']\n   */\n  {\n    Method: 'eth_accounts'\n    Parameters?: undefined\n    ReturnType: Address[]\n  },\n  /**\n   * @description Returns the current chain ID associated with the wallet.\n   * @example\n   * provider.request({ method: 'eth_chainId' })\n   * // => '1'\n   */\n  {\n    Method: 'eth_chainId'\n    Parameters?: undefined\n    ReturnType: Quantity\n  },\n  /**\n   * @description Estimates the gas necessary to complete a transaction without submitting it to the network\n   *\n   * @example\n   * provider.request({\n   *  method: 'eth_estimateGas',\n   *  params: [{ from: '0x...', to: '0x...', value: '0x...' }]\n   * })\n   * // => '0x5208'\n   */\n  {\n    Method: 'eth_estimateGas'\n    Parameters:\n      | [transaction: TransactionRequest]\n      | [transaction: TransactionRequest, block: BlockNumber | BlockTag]\n      | [\n          transaction: TransactionRequest,\n          block: BlockNumber | BlockTag,\n          stateOverride: RpcStateOverride,\n        ]\n    ReturnType: Quantity\n  },\n  /**\n   * @description Requests that the user provides an Ethereum address to be identified by. Typically causes a browser extension popup to appear.\n   * @link https://eips.ethereum.org/EIPS/eip-1102\n   * @example\n   * provider.request({ method: 'eth_requestAccounts' }] })\n   * // => ['0x...', '0x...']\n   */\n  {\n    Method: 'eth_requestAccounts'\n    Parameters?: undefined\n    ReturnType: Address[]\n  },\n  /**\n   * @description Creates, signs, and sends a new transaction to the network\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_sendTransaction', params: [{ from: '0x...', to: '0x...', value: '0x...' }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendTransaction'\n    Parameters: [transaction: TransactionRequest]\n    ReturnType: Hash\n  },\n  /**\n   * @description Sends and already-signed transaction to the network\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_sendRawTransaction', params: ['0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendRawTransaction'\n    Parameters: [signedTransaction: Hex]\n    ReturnType: Hash\n  },\n  /**\n   * @description Sends and already-signed transaction to the network synchronously\n   * @link https://eips.ethereum.org/EIPS/eip-7966\n   * @example\n   * provider.request({ method: 'eth_sendRawTransactionSync', params: ['0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sendRawTransactionSync'\n    Parameters:\n      | [signedTransaction: Hex]\n      | [signedTransaction: Hex, timeout: Hex]\n    ReturnType: TransactionReceipt\n  },\n  /**\n   * @description Calculates an Ethereum-specific signature in the form of `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_sign', params: ['0x...', '0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_sign'\n    Parameters: [\n      /** Address to use for signing */\n      address: Address,\n      /** Data to sign */\n      data: Hex,\n    ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Signs a transaction that can be submitted to the network at a later time using with `eth_sendRawTransaction`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_signTransaction', params: [{ from: '0x...', to: '0x...', value: '0x...' }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_signTransaction'\n    Parameters: [request: TransactionRequest]\n    ReturnType: Hex\n  },\n  /**\n   * @description Calculates an Ethereum-specific signature in the form of `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_signTypedData_v4', params: [{ from: '0x...', data: [{ type: 'string', name: 'message', value: 'hello world' }] }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'eth_signTypedData_v4'\n    Parameters: [\n      /** Address to use for signing */\n      address: Address,\n      /** Message to sign containing type information, a domain separator, and data */\n      message: string,\n    ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Returns information about the status of this client’s network synchronization\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'eth_syncing' })\n   * // => { startingBlock: '0x...', currentBlock: '0x...', highestBlock: '0x...' }\n   */\n  {\n    Method: 'eth_syncing'\n    Parameters?: undefined\n    ReturnType: NetworkSync | false\n  },\n  /**\n   * @description Calculates an Ethereum-specific signature in the form of `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'personal_sign', params: ['0x...', '0x...'] })\n   * // => '0x...'\n   */\n  {\n    Method: 'personal_sign'\n    Parameters: [\n      /** Data to sign */\n      data: Hex,\n      /** Address to use for signing */\n      address: Address,\n    ]\n    ReturnType: Hex\n  },\n  /**\n   * @description Add an Ethereum chain to the wallet.\n   * @link https://eips.ethereum.org/EIPS/eip-3085\n   * @example\n   * provider.request({ method: 'wallet_addEthereumChain', params: [{ chainId: 1, rpcUrl: 'https://mainnet.infura.io/v3/...' }] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_addEthereumChain'\n    Parameters: [chain: AddEthereumChainParameter]\n    ReturnType: null\n  },\n  /**\n   *\n   */\n  {\n    Method: 'wallet_addSubAccount'\n    Parameters: [\n      {\n        account: OneOf<\n          | {\n              keys: readonly {\n                publicKey: Hex\n                type: 'address' | 'p256' | 'webcrypto-p256' | 'webauthn-p256'\n              }[]\n              type: 'create'\n            }\n          | {\n              address: Address\n              chainId?: number | undefined\n              type: 'deployed'\n            }\n          | {\n              address: Address\n              chainId?: number | undefined\n              factory: Address\n              factoryData: Hex\n              type: 'undeployed'\n            }\n        >\n        version: string\n      },\n    ]\n    ReturnType: {\n      address: Address\n      factory?: Address | undefined\n      factoryData?: Hex | undefined\n    }\n  },\n  /**\n   * @description Requests to connect account(s).\n   * @link https://github.com/ethereum/ERCs/blob/abd1c9f4eda2d6ad06ade0e3af314637a27d1ee7/ERCS/erc-7846.md\n   * @example\n   * provider.request({ method: 'wallet_connect' })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_connect'\n    Parameters: [\n      {\n        capabilities?: Capabilities | undefined\n        version: string\n      },\n    ]\n    ReturnType: {\n      accounts: readonly {\n        address: Address\n        capabilities?: Capabilities | undefined\n      }[]\n    }\n  },\n  /**\n   * @description Disconnects connected account(s).\n   * @link https://github.com/ethereum/ERCs/blob/abd1c9f4eda2d6ad06ade0e3af314637a27d1ee7/ERCS/erc-7846.md\n   * @example\n   * provider.request({ method: 'wallet_disconnect' })\n   */\n  {\n    Method: 'wallet_disconnect'\n    Parameters?: undefined\n    ReturnType: void\n  },\n  /**\n   * @description Returns the assets owned by the wallet.\n   * @link https://github.com/ethereum/ERCs/blob/master/ERCS/erc-7811.md\n   * @example\n   * provider.request({ method: 'wallet_getAssets', params: [...] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_getAssets'\n    Parameters?: [WalletGetAssetsParameters]\n    ReturnType: WalletGetAssetsReturnType\n  },\n  /**\n   * @description Returns the status of a call batch that was sent via `wallet_sendCalls`.\n   * @link https://eips.ethereum.org/EIPS/eip-5792\n   * @example\n   * provider.request({ method: 'wallet_getCallsStatus' })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_getCallsStatus'\n    Parameters?: [string]\n    ReturnType: WalletGetCallsStatusReturnType\n  },\n  /**\n   * @description Gets the connected wallet's capabilities.\n   * @link https://eips.ethereum.org/EIPS/eip-5792\n   * @example\n   * provider.request({ method: 'wallet_getCapabilities' })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_getCapabilities'\n    Parameters?:\n      | readonly []\n      | readonly [Address | undefined]\n      | readonly [Address | undefined, readonly Hex[] | undefined]\n      | undefined\n    ReturnType: Prettify<ChainIdToCapabilities>\n  },\n  /**\n   * @description Gets the wallets current permissions.\n   * @link https://eips.ethereum.org/EIPS/eip-2255\n   * @example\n   * provider.request({ method: 'wallet_getPermissions' })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_getPermissions'\n    Parameters?: undefined\n    ReturnType: WalletPermission[]\n  },\n  /**\n   * @description Requests permissions from a wallet\n   * @link https://eips.ethereum.org/EIPS/eip-7715\n   * @example\n   * provider.request({ method: 'wallet_grantPermissions', params: [{ ... }] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_grantPermissions'\n    Parameters?: [WalletGrantPermissionsParameters]\n    ReturnType: Prettify<WalletGrantPermissionsReturnType>\n  },\n  /**\n   * @description Requests the given permissions from the user.\n   * @link https://eips.ethereum.org/EIPS/eip-2255\n   * @example\n   * provider.request({ method: 'wallet_requestPermissions', params: [{ eth_accounts: {} }] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_requestPermissions'\n    Parameters: [permissions: { eth_accounts: Record<string, any> }]\n    ReturnType: WalletPermission[]\n  },\n  /**\n   * @description Revokes the given permissions from the user.\n   * @link https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md\n   * @example\n   * provider.request({ method: 'wallet_revokePermissions', params: [{ eth_accounts: {} }] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_revokePermissions'\n    Parameters: [permissions: { eth_accounts: Record<string, any> }]\n    ReturnType: null\n  },\n  /**\n   * @description Requests the connected wallet to send a batch of calls.\n   * @link https://eips.ethereum.org/EIPS/eip-5792\n   * @example\n   * provider.request({ method: 'wallet_sendCalls' })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_sendCalls'\n    Parameters?: WalletSendCallsParameters\n    ReturnType: WalletSendCallsReturnType\n  },\n  /**\n   * @description Creates, signs, and sends a new transaction to the network\n   * @link https://eips.ethereum.org/EIPS/eip-1474\n   * @example\n   * provider.request({ method: 'wallet_sendTransaction', params: [{ from: '0x...', to: '0x...', value: '0x...' }] })\n   * // => '0x...'\n   */\n  {\n    Method: 'wallet_sendTransaction'\n    Parameters: [transaction: TransactionRequest]\n    ReturnType: Hash\n  },\n  /**\n   * @description Requests for the wallet to show information about a call batch\n   * that was sent via `wallet_sendCalls`.\n   * @link https://eips.ethereum.org/EIPS/eip-5792\n   * @example\n   * provider.request({ method: 'wallet_showCallsStatus', params: ['...'] })\n   */\n  {\n    Method: 'wallet_showCallsStatus'\n    Parameters?: [string]\n    ReturnType: void\n  },\n  /**\n   * @description Switch the wallet to the given Ethereum chain.\n   * @link https://eips.ethereum.org/EIPS/eip-3326\n   * @example\n   * provider.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: '0xf00' }] })\n   * // => { ... }\n   */\n  {\n    Method: 'wallet_switchEthereumChain'\n    Parameters: [chain: { chainId: string }]\n    ReturnType: null\n  },\n  /**\n   * @description Requests that the user tracks the token in their wallet. Returns a boolean indicating if the token was successfully added.\n   * @link https://eips.ethereum.org/EIPS/eip-747\n   * @example\n   * provider.request({ method: 'wallet_watchAsset' }] })\n   * // => true\n   */\n  {\n    Method: 'wallet_watchAsset'\n    Parameters: WatchAssetParams\n    ReturnType: boolean\n  },\n]\n\n///////////////////////////////////////////////////////////////////////////\n// Utils\n\nexport type RpcSchema = readonly {\n  Method: string\n  Parameters?: unknown | undefined\n  ReturnType: unknown\n}[]\n\nexport type RpcSchemaOverride = Omit<RpcSchema[number], 'Method'>\n\nexport type EIP1193Parameters<\n  rpcSchema extends RpcSchema | undefined = undefined,\n> = rpcSchema extends RpcSchema\n  ? {\n      [K in keyof rpcSchema]: Prettify<\n        {\n          method: rpcSchema[K] extends rpcSchema[number]\n            ? rpcSchema[K]['Method']\n            : never\n        } & (rpcSchema[K] extends rpcSchema[number]\n          ? rpcSchema[K]['Parameters'] extends undefined\n            ? { params?: undefined }\n            : { params: rpcSchema[K]['Parameters'] }\n          : never)\n      >\n    }[number]\n  : {\n      method: string\n      params?: unknown | undefined\n    }\n\nexport type EIP1193RequestOptions = {\n  /** Deduplicate in-flight requests. */\n  dedupe?: boolean | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?:\n    | OneOf<\n        | {\n            include?: string[] | undefined\n          }\n        | {\n            exclude?: string[] | undefined\n          }\n      >\n    | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** Unique identifier for the request. */\n  uid?: string | undefined\n}\n\ntype DerivedRpcSchema<\n  rpcSchema extends RpcSchema | undefined,\n  rpcSchemaOverride extends RpcSchemaOverride | undefined,\n> = rpcSchemaOverride extends RpcSchemaOverride\n  ? [rpcSchemaOverride & { Method: string }]\n  : rpcSchema\n\nexport type EIP1193RequestFn<\n  rpcSchema extends RpcSchema | undefined = undefined,\n  raw extends boolean = false,\n> = <\n  rpcSchemaOverride extends RpcSchemaOverride | undefined = undefined,\n  _parameters extends EIP1193Parameters<\n    DerivedRpcSchema<rpcSchema, rpcSchemaOverride>\n  > = EIP1193Parameters<DerivedRpcSchema<rpcSchema, rpcSchemaOverride>>,\n  _returnType = DerivedRpcSchema<rpcSchema, rpcSchemaOverride> extends RpcSchema\n    ? raw extends true\n      ? OneOf<\n          | {\n              result: Extract<\n                DerivedRpcSchema<rpcSchema, rpcSchemaOverride>[number],\n                { Method: _parameters['method'] }\n              >['ReturnType']\n            }\n          | { error: Rpc.ErrorObject }\n        >\n      : Extract<\n          DerivedRpcSchema<rpcSchema, rpcSchemaOverride>[number],\n          { Method: _parameters['method'] }\n        >['ReturnType']\n    : raw extends true\n      ? OneOf<\n          | {\n              result: unknown\n            }\n          | {\n              error: Rpc.ErrorObject\n            }\n        >\n      : unknown,\n>(\n  args: _parameters,\n  options?: EIP1193RequestOptions | undefined,\n) => Promise<_returnType>\n", "import type { Abi } from 'abitype'\n\nimport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n  type AbiConstructorParamsNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ContractConstructorArgs } from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport {\n  type DecodeAbiParametersErrorType,\n  decodeAbiParameters,\n} from './decodeAbiParameters.js'\n\nconst docsPath = '/docs/contract/decodeDeployData'\n\nexport type DecodeDeployDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n> = {\n  abi: abi\n  bytecode: Hex\n  data: Hex\n}\n\nexport type DecodeDeployDataReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  ///\n  allArgs = ContractConstructorArgs<abi>,\n> = {\n  bytecode: Hex\n  args: allArgs\n}\n\nexport type DecodeDeployDataErrorType =\n  | AbiConstructorNotFoundErrorType\n  | AbiConstructorParamsNotFoundErrorType\n  | DecodeAbiParametersErrorType\n  | ErrorType\n\nexport function decodeDeployData<const abi extends Abi | readonly unknown[]>(\n  parameters: DecodeDeployDataParameters<abi>,\n): DecodeDeployDataReturnType<abi> {\n  const { abi, bytecode, data } = parameters as DecodeDeployDataParameters\n  if (data === bytecode) return { bytecode } as DecodeDeployDataReturnType<abi>\n\n  const description = abi.find((x) => 'type' in x && x.type === 'constructor')\n  if (!description) throw new AbiConstructorNotFoundError({ docsPath })\n  if (!('inputs' in description))\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n  if (!description.inputs || description.inputs.length === 0)\n    throw new AbiConstructorParamsNotFoundError({ docsPath })\n\n  const args = decodeAbiParameters(\n    description.inputs,\n    `0x${data.replace(bytecode, '')}`,\n  )\n  return { args, bytecode } as unknown as DecodeDeployDataReturnType<abi>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type CreateCursorErrorType, createCursor } from '../cursor.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type FromBlobsParameters<\n  blobs extends readonly Hex[] | readonly ByteArray[] =\n    | readonly Hex[]\n    | readonly ByteArray[],\n  to extends To | undefined = undefined,\n> = {\n  /** Blobs to transform to data. */\n  blobs: blobs | readonly Hex[] | readonly ByteArray[]\n  to?: to | To | undefined\n}\n\nexport type FromBlobsReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type FromBlobsErrorType =\n  | BytesToHexErrorType\n  | CreateCursorErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\nexport function fromBlobs<\n  const blobs extends readonly Hex[] | readonly ByteArray[],\n  to extends To =\n    | (blobs extends readonly Hex[] ? 'hex' : never)\n    | (blobs extends readonly ByteArray[] ? 'bytes' : never),\n>(parameters: FromBlobsParameters<blobs, to>): FromBlobsReturnType<to> {\n  const to =\n    parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes')\n  const blobs = (\n    typeof parameters.blobs[0] === 'string'\n      ? parameters.blobs.map((x) => hexToBytes(x as Hex))\n      : parameters.blobs\n  ) as ByteArray[]\n\n  const length = blobs.reduce((length, blob) => length + blob.length, 0)\n  const data = createCursor(new Uint8Array(length))\n  let active = true\n\n  for (const blob of blobs) {\n    const cursor = createCursor(blob)\n    while (active && cursor.position < blob.length) {\n      // First byte will be a zero 0x00 byte – we can skip.\n      cursor.incrementPosition(1)\n\n      let consume = 31\n      if (blob.length - cursor.position < 31)\n        consume = blob.length - cursor.position\n\n      for (const _ in Array.from({ length: consume })) {\n        const byte = cursor.readByte()\n        const isTerminator =\n          byte === 0x80 && !cursor.inspectBytes(cursor.remaining).includes(0x80)\n        if (isTerminator) {\n          active = false\n          break\n        }\n        data.pushByte(byte)\n      }\n    }\n  }\n\n  const trimmedData = data.bytes.slice(0, data.position)\n  return (\n    to === 'hex' ? bytesToHex(trimmedData) : trimmedData\n  ) as FromBlobsReturnType<to>\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { BlobSidecars } from '../../types/eip4844.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport {\n  type CommitmentToVersionedHashErrorType,\n  commitmentToVersionedHash,\n} from './commitmentToVersionedHash.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type SidecarsToVersionedHashesParameters<\n  sidecars extends BlobSidecars = BlobSidecars,\n  to extends To | undefined = undefined,\n> = {\n  /** Sidecars from blobs. */\n  sidecars: sidecars | BlobSidecars\n  /** Return type. */\n  to?: to | To | undefined\n  /** Version to tag onto the hashes. */\n  version?: number | undefined\n}\n\nexport type SidecarsToVersionedHashesReturnType<to extends To> =\n  | (to extends 'bytes' ? readonly ByteArray[] : never)\n  | (to extends 'hex' ? readonly Hex[] : never)\n\nexport type SidecarsToVersionedHashesErrorType =\n  | CommitmentToVersionedHashErrorType\n  | ErrorType\n\n/**\n * Transforms a list of sidecars to their versioned hashes.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, sidecarsToVersionedHashes, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * const versionedHashes = sidecarsToVersionedHashes({ sidecars })\n * ```\n */\nexport function sidecarsToVersionedHashes<\n  const sidecars extends BlobSidecars,\n  to extends To =\n    | (sidecars extends BlobSidecars<Hex> ? 'hex' : never)\n    | (sidecars extends BlobSidecars<ByteArray> ? 'bytes' : never),\n>(\n  parameters: SidecarsToVersionedHashesParameters<sidecars, to>,\n): SidecarsToVersionedHashesReturnType<to> {\n  const { sidecars, version } = parameters\n\n  const to =\n    parameters.to ?? (typeof sidecars[0].blob === 'string' ? 'hex' : 'bytes')\n\n  const hashes: Uint8Array[] | Hex[] = []\n  for (const { commitment } of sidecars) {\n    hashes.push(\n      commitmentToVersionedHash({\n        commitment,\n        to,\n        version,\n      }) as any,\n    )\n  }\n  return hashes as any\n}\n", "import {\n  EnsInvalidChainIdError,\n  type EnsInvalidChainIdErrorType,\n} from '../../errors/ens.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type ToCoinTypeError = EnsInvalidChainIdErrorType | ErrorType\n\nconst SLIP44_MSB = 0x80000000\n\n/**\n * @description Converts a chainId to a ENSIP-9 compliant coinType\n *\n * @example\n * toCoinType(10)\n * 2147483658n\n */\nexport function toCoinType(chainId: number): bigint {\n  if (chainId === 1) return 60n\n  if (chainId >= SLIP44_MSB || chainId < 0)\n    throw new EnsInvalidChainIdError({ chainId })\n  return BigInt((0x80000000 | chainId) >>> 0)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { Kzg } from '../../types/kzg.js'\n\nexport type DefineKzgParameters = Kzg\nexport type DefineKzgReturnType = Kzg\nexport type DefineKzgErrorType = ErrorType\n\n/**\n * Defines a KZG interface.\n *\n * @example\n * ```ts\n * import * as cKzg from 'c-kzg'\n * import { defineKzg } from 'viem'\n * import { mainnetTrustedSetupPath } from 'viem/node'\n *\n * cKzg.loadTrustedSetup(mainnetTrustedSetupPath)\n *\n * const kzg = defineKzg(cKzg)\n * ```\n */\nexport function defineKzg({\n  blobToKzgCommitment,\n  computeBlobKzgProof,\n}: DefineKzgParameters): DefineKzgReturnType {\n  return {\n    blobToKzgCommitment,\n    computeBlobKzgProof,\n  }\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type DefineKzgErrorType,\n  type DefineKzgParameters,\n  type DefineKzgReturnType,\n  defineKzg,\n} from './defineKzg.js'\n\nexport type SetupKzgParameters = DefineKzgParameters & {\n  loadTrustedSetup(path: string): void\n}\nexport type SetupKzgReturnType = DefineKzgReturnType\nexport type SetupKzgErrorType = DefineKzgErrorType | ErrorType\n\n/**\n * Sets up and returns a KZG interface.\n *\n * @example\n * ```ts\n * import * as cKzg from 'c-kzg'\n * import { setupKzg } from 'viem'\n * import { mainnetTrustedSetupPath } from 'viem/node'\n *\n * const kzg = setupKzg(cKzg, mainnetTrustedSetupPath)\n * ```\n */\nexport function setupKzg(\n  parameters: SetupKzgParameters,\n  path: string,\n): SetupKzgReturnType {\n  try {\n    parameters.loadTrustedSetup(path)\n  } catch (e) {\n    const error = e as Error\n    if (!error.message.includes('trusted setup is already loaded')) throw error\n  }\n  return defineKzg(parameters)\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\nexport type CompactSignatureToSignatureErrorType =\n  | BytesToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into signature format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in signature format.\n *\n * @example\n * compactSignatureToSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * //   v: 27n\n * // }\n */\nexport function compactSignatureToSignature({\n  r,\n  yParityAndS,\n}: CompactSignature): Signature {\n  const yParityAndS_bytes = hexToBytes(yParityAndS)\n  const yParity = yParityAndS_bytes[0] & 0x80 ? 1 : 0\n  const s = yParityAndS_bytes\n  if (yParity === 1) s[0] &= 0x7f\n  return { r, s: bytesToHex(s), yParity }\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Hex } from '../../types/misc.js'\nimport { type NumberToHexErrorType, numberToHex } from '../encoding/toHex.js'\n\nexport type ParseCompactSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted compact signature into a structured compact signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseCompactSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', yParityAndS: '0x...' }\n */\nexport function parseCompactSignature(signatureHex: Hex): CompactSignature {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  return {\n    r: numberToHex(r, { size: 32 }),\n    yParityAndS: numberToHex(s, { size: 32 }),\n  }\n}\n", "import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { TransactionSerialized } from '../../types/transaction.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { parseTransaction } from '../transaction/parseTransaction.js'\nimport {\n  type SerializeTransactionErrorType,\n  serializeTransaction,\n} from '../transaction/serializeTransaction.js'\nimport {\n  type RecoverAddressErrorType,\n  recoverAddress,\n} from './recoverAddress.js'\nimport type { SerializeSignatureErrorType } from './serializeSignature.js'\n\nexport type RecoverTransactionAddressParameters = {\n  serializedTransaction: TransactionSerialized\n  signature?: Hex | ByteArray | Signature\n}\n\nexport type RecoverTransactionAddressReturnType = Address\n\nexport type RecoverTransactionAddressErrorType =\n  | SerializeTransactionErrorType\n  | RecoverAddressErrorType\n  | Keccak256ErrorType\n  | SerializeSignatureErrorType\n  | ErrorType\n\nexport async function recoverTransactionAddress(\n  parameters: RecoverTransactionAddressParameters,\n): Promise<RecoverTransactionAddressReturnType> {\n  const { serializedTransaction, signature: signature_ } = parameters\n\n  const transaction = parseTransaction(serializedTransaction)\n\n  const signature = signature_ ?? {\n    r: transaction.r!,\n    s: transaction.s!,\n    v: transaction.v!,\n    yParity: transaction.yParity!,\n  }\n\n  const serialized = serializeTransaction({\n    ...transaction,\n    r: undefined,\n    s: undefined,\n    v: undefined,\n    yParity: undefined,\n    sidecars: undefined,\n  })\n\n  return await recoverAddress({\n    hash: keccak256(serialized),\n    signature,\n  })\n}\n", "import { secp256k1 } from '@noble/curves/secp256k1'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Hex } from '../../types/misc.js'\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\n\nexport type SerializeCompactSignatureErrorType =\n  | HexToBigIntErrorType\n  | ErrorType\n\n/**\n * @description Converts an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098) into hex format.\n *\n * @param signature The compact signature to convert.\n * @returns The compact signature in hex format.\n *\n * @example\n * serializeCompactSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * })\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\n */\nexport function serializeCompactSignature({\n  r,\n  yParityAndS,\n}: CompactSignature): Hex {\n  return `0x${new secp256k1.Signature(\n    hexToBigInt(r),\n    hexToBigInt(yParityAndS),\n  ).toCompactHex()}`\n}\n", "import type { ErrorType } from '../../errors/utils.js'\nimport type { CompactSignature, Signature } from '../../types/misc.js'\nimport { type HexToBytesErrorType, hexToBytes } from '../encoding/toBytes.js'\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\n\nexport type SignatureToCompactSignatureErrorType =\n  | HexToBytesErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\n/**\n * @description Converts a signature into an [EIP-2098 compact signature](https://eips.ethereum.org/EIPS/eip-2098).\n *\n * @param signature The signature to convert.\n * @returns The signature in compact format.\n *\n * @example\n * signatureToCompactSignature({\n *   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   s: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n *   yParity: 0\n * })\n * // {\n * //   r: '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n * //   yParityAndS: '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'\n * // }\n */\nexport function signatureToCompactSignature(\n  signature: Signature,\n): CompactSignature {\n  const { r, s, v, yParity } = signature\n  const yParity_ = Number(yParity ?? v! - 27n)\n  let yParityAndS = s\n  if (yParity_ === 1) {\n    const bytes = hexToBytes(s)\n    bytes[0] |= 0x80\n    yParityAndS = bytesToHex(bytes)\n  }\n  return { r, yParityAndS }\n}\n"],
  "mappings": "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",
  "names": ["client", "uid", "transport", "transports_", "sample", "wait", "body", "length"]
}
