{
  "version": 3,
  "sources": ["../../ox/core/AbiError.ts", "../../viem/experimental/erc7821/errors.ts", "../../viem/experimental/erc7821/utils/getExecuteError.ts", "../../viem/experimental/erc7821/constants.ts", "../../viem/experimental/erc7821/actions/supportsExecutionMode.ts"],
  "sourcesContent": ["import * as abitype from 'abitype'\nimport type * as Abi from './Abi.js'\nimport * as AbiItem from './AbiItem.js'\nimport * as AbiParameters from './AbiParameters.js'\nimport type * as Errors from './Errors.js'\nimport * as Hex from './Hex.js'\nimport type * as internal from './internal/abiError.js'\nimport type * as AbiItem_internal from './internal/abiItem.js'\nimport type { IsNarrowable, IsNever } from './internal/types.js'\n\n/** Root type for an {@link ox#AbiItem.AbiItem} with an `error` type. */\nexport type AbiError = abitype.AbiError & {\n  hash?: Hex.Hex | undefined\n  overloads?: readonly AbiError[] | undefined\n}\n\n/** @internal */\nexport function decode<\n  const abiError extends AbiError,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abiError: abiError,\n  data: Hex.Hex,\n  options?: decode.Options<as> | undefined,\n): decode.ReturnType<abiError, as>\n/**\n * ABI-decodes the provided error input (`inputs`).\n *\n * :::tip\n *\n * This function is typically used to decode contract function reverts (e.g. a JSON-RPC error response).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from('error InvalidSignature(uint r, uint s, uint8 yParity)')\n *\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([...]) // [!code hl]\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\n *\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001')\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * You can pass the error `data` to the `name` property of {@link ox#AbiError.(fromAbi:function)} to extract and infer the error by its 4-byte selector:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const data = '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001'\n *\n * const abi = Abi.from([...])\n * const error = AbiError.fromAbi(abi, data) // [!code hl]\n *\n * const value = AbiError.decode(error, data)\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object as a parameter to {@link ox#AbiError.(decode:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([...])\n *\n * const value = AbiError.decode(\n *   abi, // [!code hl]\n *   'InvalidSignature', // [!code hl]\n *   '0x...'\n * )\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiError.decode` to decode the revert error of an `approve` contract call on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * // @noErrors\n * import 'ox/window'\n * import { Abi, AbiError, AbiFunction } from 'ox'\n *\n * // 1. Extract the Function from the Contract's ABI.\n * const abi = Abi.from([\n *   // ...\n *   {\n *     inputs: [\n *       { name: 'to', type: 'address' },\n *       { name: 'tokenId', type: 'uint256' },\n *     ],\n *     name: 'approve',\n *     outputs: [],\n *     stateMutability: 'nonpayable',\n *     type: 'function',\n *   },\n *   // ...\n * ])\n * const approve = AbiFunction.fromAbi(abi, 'approve')\n *\n * // 2. Encode the Function Input.\n * const data = AbiFunction.encodeData(\n *   approve,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n *\n * try {\n *   // 3. Attempt to perform the the Contract Call.\n *   await window.ethereum!.request({\n *     method: 'eth_call',\n *     params: [\n *       {\n *         data,\n *         to: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       },\n *     ],\n *   })\n * } catch (e) { // [!code focus]\n *   // 4. Extract and decode the Error. // [!code focus]\n *   const error = AbiError.fromAbi(abi, e.data) // [!code focus]\n *   const value = AbiError.decode(error, e.data) // [!code focus]\n *   console.error(`${error.name}(${value})`) // [!code focus]\n * // @error:   Error(ERC721: approve caller is not owner nor approved for all)\n * } // [!code focus]\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiError - The ABI Error to decode.\n * @param data - The error data.\n * @param options - Decoding options.\n * @returns The decoded error.\n */\nexport function decode<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  as extends 'Object' | 'Array' = 'Array',\n  //\n  abiError extends AbiError = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiError\n  >,\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  data: Hex.Hex,\n  options?: decode.Options<as> | undefined,\n): decode.ReturnType<abiError, as>\nexport function decode<\n  const abiError extends AbiError,\n  as extends 'Object' | 'Array' = 'Array',\n>(\n  abiError: abiError | AbiError,\n  data: Hex.Hex,\n  options?: decode.Options<as> | undefined,\n): decode.ReturnType<abiError, as>\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function decode(\n  ...parameters:\n    | [\n        abi: Abi.Abi | readonly unknown[],\n        name: Hex.Hex | string,\n        data: Hex.Hex,\n        options?: decode.Options | undefined,\n      ]\n    | [abiError: AbiError, data: Hex.Hex, options?: decode.Options | undefined]\n): decode.ReturnType {\n  const [abiError, data, options = {}] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, data, options] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        Hex.Hex,\n        decode.Options | undefined,\n      ]\n      return [fromAbi(abi, name), data, options]\n    }\n    return parameters as [AbiError, Hex.Hex, decode.Options | undefined]\n  })()\n  if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({ data })\n  if (abiError.inputs.length === 0) return undefined\n\n  const values = AbiParameters.decode(\n    abiError.inputs,\n    Hex.slice(data, 4),\n    options,\n  )\n  if (values && Object.keys(values).length === 1) {\n    if (Array.isArray(values)) return values[0]\n    return Object.values(values)[0]\n  }\n  return values\n}\n\nexport declare namespace decode {\n  type Options<as extends 'Object' | 'Array' = 'Array'> = {\n    /**\n     * Whether the decoded values should be returned as an `Object` or `Array`.\n     *\n     * @default \"Array\"\n     */\n    as?: as | 'Array' | 'Object' | undefined\n  }\n\n  type ReturnType<\n    abiError extends AbiError = AbiError,\n    as extends 'Object' | 'Array' = 'Array',\n  > = IsNarrowable<abiError, AbiError> extends true\n    ? abiError['inputs'] extends readonly []\n      ? undefined\n      : abiError['inputs'] extends readonly [\n            infer type extends abitype.AbiParameter,\n          ]\n        ? abitype.AbiParameterToPrimitiveType<type>\n        : AbiParameters.decode.ReturnType<\n              abiError['inputs'],\n              as\n            > extends infer types\n          ? types extends readonly []\n            ? undefined\n            : types extends readonly [infer type]\n              ? type\n              : types\n          : never\n    : unknown | readonly unknown[] | undefined\n\n  type ErrorType =\n    | AbiParameters.decode.ErrorType\n    | Hex.size.ErrorType\n    | typeof AbiItem.InvalidSelectorSizeError\n    | Errors.GlobalErrorType\n}\n\n/**\n * ABI-encodes the provided error input (`inputs`), prefixed with the 4 byte error selector.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from(\n *   'error InvalidSignature(uint r, uint s, uint8 yParity)'\n * )\n *\n * const data = AbiError.encode( // [!code focus]\n *   error, // [!code focus]\n *   [1n, 2n, 0] // [!code focus]\n * ) // [!code focus]\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * ### ABI-shorthand\n *\n * You can also specify an entire ABI object and an error name as parameters to `AbiError.encode`.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([...])\n *\n * const data = AbiError.encode(\n *   abi, // [!code hl]\n *   'InvalidSignature', // [!code hl]\n *   [1n, 2n, 0]\n * )\n * ```\n *\n * @param abiError - ABI Error to encode\n * @param args - Error arguments\n * @returns ABI-encoded error name and arguments\n */\nexport function encode<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  abiError extends AbiError = AbiItem.fromAbi.ReturnType<\n    abi,\n    name,\n    args,\n    AbiError\n  >,\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  ...args: encode.Args<abiError>\n): encode.ReturnType\nexport function encode<const abiError extends AbiError>(\n  abiError: abiError,\n  ...args: encode.Args<abiError>\n): encode.ReturnType\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function encode(\n  ...parameters:\n    | [\n        abi: Abi.Abi | readonly unknown[],\n        name: Hex.Hex | string,\n        ...args: readonly unknown[],\n      ]\n    | [abiError: AbiError, ...args: readonly unknown[]]\n) {\n  const [abiError, args] = (() => {\n    if (Array.isArray(parameters[0])) {\n      const [abi, name, ...args] = parameters as [\n        Abi.Abi | readonly unknown[],\n        Hex.Hex | string,\n        ...(readonly unknown[]),\n      ]\n      return [fromAbi(abi, name), args]\n    }\n    const [abiError, ...args] = parameters as [\n      AbiError,\n      ...(readonly unknown[]),\n    ]\n    return [abiError, args]\n  })()\n\n  const selector = getSelector(abiError)\n\n  const data =\n    args.length > 0\n      ? AbiParameters.encode(abiError.inputs, (args as any)[0])\n      : undefined\n\n  return data ? Hex.concat(selector, data) : selector\n}\n\nexport declare namespace encode {\n  type Args<abiError extends AbiError = AbiError> = IsNarrowable<\n    abiError,\n    AbiError\n  > extends true\n    ? abitype.AbiParametersToPrimitiveTypes<\n        abiError['inputs']\n      > extends readonly []\n      ? []\n      : [abitype.AbiParametersToPrimitiveTypes<abiError['inputs']>]\n    : readonly unknown[]\n\n  type ReturnType = Hex.Hex\n\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Formats an {@link ox#AbiError.AbiError} into a **Human Readable ABI Error**.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const formatted = AbiError.format({\n *   type: 'error',\n *   name: 'Example',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiError - The ABI Error to format.\n * @returns The formatted ABI Error.\n */\nexport function format<const abiError extends AbiError>(\n  abiError: abiError | AbiError,\n): abitype.FormatAbiItem<abiError> {\n  return abitype.formatAbiItem(abiError) as never\n}\n\nexport declare namespace format {\n  type ErrorType = Errors.GlobalErrorType\n}\n\n/**\n * Parses an arbitrary **JSON ABI Error** or **Human Readable ABI Error** into a typed {@link ox#AbiError.AbiError}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error',\n * })\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from(\n *   'error BadSignatureV(uint8 v)' // [!code hl]\n * )\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from([\n *   'struct Signature { uint8 v; }', // [!code hl]\n *   'error BadSignatureV(Signature signature)',\n * ])\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiError - The ABI Error to parse.\n * @returns Typed ABI Error.\n */\nexport function from<\n  const abiError extends AbiError | string | readonly string[],\n>(\n  abiError: (abiError | AbiError | string | readonly string[]) &\n    (\n      | (abiError extends string ? internal.Signature<abiError> : never)\n      | (abiError extends readonly string[]\n          ? internal.Signatures<abiError>\n          : never)\n      | AbiError\n    ),\n  options: from.Options = {},\n): from.ReturnType<abiError> {\n  return AbiItem.from(abiError as AbiError, options) as never\n}\n\nexport declare namespace from {\n  type Options = {\n    /**\n     * Whether or not to prepare the extracted function (optimization for encoding performance).\n     * When `true`, the `hash` property is computed and included in the returned value.\n     *\n     * @default true\n     */\n    prepare?: boolean | undefined\n  }\n\n  type ReturnType<abiError extends AbiError | string | readonly string[]> =\n    AbiItem.from.ReturnType<abiError>\n\n  type ErrorType = AbiItem.from.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Extracts an {@link ox#AbiError.AbiError} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Errors can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Errors can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiError.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Error from JSON-RPC error data.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nexport function fromAbi<\n  const abi extends Abi.Abi | readonly unknown[],\n  name extends Name<abi>,\n  const args extends\n    | AbiItem_internal.ExtractArgs<abi, name>\n    | undefined = undefined,\n  //\n  allNames = Name<abi>,\n>(\n  abi: abi | Abi.Abi | readonly unknown[],\n  name: Hex.Hex | (name extends allNames ? name : never),\n  options?: AbiItem.fromAbi.Options<\n    abi,\n    name,\n    args,\n    AbiItem_internal.ExtractArgs<abi, name>\n  >,\n): fromAbi.ReturnType<abi, name, args> {\n  if (name === 'Error') return solidityError as never\n  if (name === 'Panic') return solidityPanic as never\n  if (Hex.validate(name, { strict: false })) {\n    const selector = Hex.slice(name, 0, 4)\n    if (selector === solidityErrorSelector) return solidityError as never\n    if (selector === solidityPanicSelector) return solidityPanic as never\n  }\n\n  const item = AbiItem.fromAbi(abi, name, options as any)\n  if (item.type !== 'error')\n    throw new AbiItem.NotFoundError({ name, type: 'error' })\n  return item as never\n}\n\nexport declare namespace fromAbi {\n  type ReturnType<\n    abi extends Abi.Abi | readonly unknown[] = Abi.Abi,\n    name extends Name<abi> = Name<abi>,\n    args extends\n      | AbiItem_internal.ExtractArgs<abi, name>\n      | undefined = AbiItem_internal.ExtractArgs<abi, name>,\n  > = IsNarrowable<name, Name<abi>> extends true\n    ?\n        | (name extends 'Error' ? typeof solidityError : never)\n        | (name extends 'Panic'\n            ? typeof solidityPanic\n            : never) extends infer result\n      ? IsNever<result> extends true\n        ? AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\n        : result\n      : never\n    :\n        | AbiItem.fromAbi.ReturnType<abi, name, args, AbiError>\n        | typeof solidityError\n        | typeof solidityPanic\n\n  type ErrorType = AbiItem.fromAbi.ErrorType | Errors.GlobalErrorType\n}\n\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiError.AbiError}.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector('error BadSignatureV(uint8 v)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the error signature.\n */\nexport function getSelector(abiItem: string | AbiError): Hex.Hex {\n  return AbiItem.getSelector(abiItem)\n}\n\nexport declare namespace getSelector {\n  type ErrorType = AbiItem.getSelector.ErrorType | Errors.GlobalErrorType\n}\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nexport const panicReasons = {\n  1: 'An `assert` condition failed.',\n  17: 'Arithmetic operation resulted in underflow or overflow.',\n  18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n  33: 'Attempted to convert to an invalid type.',\n  34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n  49: 'Performed `.pop()` on an empty array',\n  50: 'Array index is out of bounds.',\n  65: 'Allocated too much memory or created an array which is too large.',\n  81: 'Attempted to call a zero-initialized variable of internal function type.',\n} as Record<number, string>\n\nexport const solidityError = /*#__PURE__*/ from({\n  inputs: [\n    {\n      name: 'message',\n      type: 'string',\n    },\n  ],\n  name: 'Error',\n  type: 'error',\n})\n\nexport const solidityErrorSelector = '0x08c379a0'\n\nexport const solidityPanic = /*#__PURE__*/ from({\n  inputs: [\n    {\n      name: 'reason',\n      type: 'uint8',\n    },\n  ],\n  name: 'Panic',\n  type: 'error',\n})\n\nexport const solidityPanicSelector = '0x4e487b71'\n\n/**\n * Extracts an {@link ox#AbiError.AbiError} item from an {@link ox#Abi.Abi}, given a name.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'error Bar(uint256)',\n * ])\n *\n * type Foo = AbiError.FromAbi<typeof abi, 'Foo'>\n * //   ^?\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n */\nexport type FromAbi<\n  abi extends Abi.Abi,\n  name extends ExtractNames<abi>,\n> = abitype.ExtractAbiError<abi, name>\n\n/**\n * Extracts the names of all {@link ox#AbiError.AbiError} items in an {@link ox#Abi.Abi}.\n *\n * @example\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'error Foo(string)',\n *   'error Bar(uint256)',\n * ])\n *\n * type names = AbiError.Name<typeof abi>\n * //   ^?\n * ```\n */\nexport type Name<abi extends Abi.Abi | readonly unknown[] = Abi.Abi> =\n  abi extends Abi.Abi ? ExtractNames<abi> : string\n\nexport type ExtractNames<abi extends Abi.Abi> =\n  | abitype.ExtractAbiErrorNames<abi>\n  | 'Panic'\n  | 'Error'\n", "import { BaseError } from '../../errors/base.js'\n\nexport type ExecuteUnsupportedErrorType = ExecuteUnsupportedError & {\n  name: 'ExecuteUnsupportedError'\n}\nexport class ExecuteUnsupportedError extends BaseError {\n  constructor() {\n    super('ERC-7821 execution is not supported.', {\n      name: 'ExecuteUnsupportedError',\n    })\n  }\n}\n\nexport type FunctionSelectorNotRecognizedErrorType =\n  FunctionSelectorNotRecognizedError & {\n    name: 'FunctionSelectorNotRecognizedError'\n  }\nexport class FunctionSelectorNotRecognizedError extends BaseError {\n  constructor() {\n    super('Function is not recognized.', {\n      metaMessages: [\n        'This could be due to any of the following:',\n        '  - The contract does not have the function,',\n        '  - The address is not a contract.',\n      ],\n      name: 'FunctionSelectorNotRecognizedError',\n    })\n  }\n}\n", "import type { Abi, Narrow } from 'abitype'\nimport * as AbiError from 'ox/AbiError'\n\nimport type { BaseError } from '../../../errors/base.js'\nimport type { Call, Calls } from '../../../types/calls.js'\nimport type { Hex } from '../../../types/misc.js'\nimport { decodeErrorResult } from '../../../utils/abi/decodeErrorResult.js'\nimport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from '../../../utils/errors/getContractError.js'\nimport {\n  FunctionSelectorNotRecognizedError,\n  type FunctionSelectorNotRecognizedErrorType,\n} from '../errors.js'\n\nexport type GetExecuteErrorParameters<\n  calls extends readonly unknown[] = readonly unknown[],\n> = {\n  /** Calls to execute. */\n  calls: Calls<Narrow<calls>>\n}\n\nexport type GetExecuteErrorReturnType =\n  | FunctionSelectorNotRecognizedErrorType\n  | GetContractErrorReturnType\n\nexport function getExecuteError<const calls extends readonly unknown[]>(\n  e: BaseError,\n  parameters: GetExecuteErrorParameters<calls>,\n): GetExecuteErrorReturnType {\n  const error = e.walk((e) => 'data' in (e as Error)) as\n    | (BaseError & { data?: Hex | undefined })\n    | undefined\n\n  if (!error?.data) return e as never\n  if (\n    error.data ===\n    AbiError.getSelector(AbiError.from('error FnSelectorNotRecognized()'))\n  )\n    return new FunctionSelectorNotRecognizedError() as never\n\n  let matched: Call | null = null\n  for (const c of parameters.calls) {\n    const call = c as Call\n    if (!call.abi) continue\n    try {\n      const matches = Boolean(\n        decodeErrorResult({\n          abi: call.abi,\n          data: error.data!,\n        }),\n      )\n      if (!matches) continue\n      matched = call\n    } catch {}\n  }\n  if (matched)\n    return getContractError(error as BaseError, {\n      abi: matched.abi as Abi,\n      address: matched.to,\n      args: matched.args,\n      functionName: matched.functionName,\n    })\n\n  return e as never\n}\n", "export const abi = [\n  {\n    type: 'fallback',\n    stateMutability: 'payable',\n  },\n  {\n    type: 'receive',\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'execute',\n    inputs: [\n      {\n        name: 'mode',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n      {\n        name: 'executionData',\n        type: 'bytes',\n        internalType: 'bytes',\n      },\n    ],\n    outputs: [],\n    stateMutability: 'payable',\n  },\n  {\n    type: 'function',\n    name: 'supportsExecutionMode',\n    inputs: [\n      {\n        name: 'mode',\n        type: 'bytes32',\n        internalType: 'bytes32',\n      },\n    ],\n    outputs: [\n      {\n        name: 'result',\n        type: 'bool',\n        internalType: 'bool',\n      },\n    ],\n    stateMutability: 'view',\n  },\n  {\n    type: 'error',\n    name: 'FnSelectorNotRecognized',\n    inputs: [],\n  },\n  {\n    type: 'error',\n    name: 'UnsupportedExecutionMode',\n    inputs: [],\n  },\n] as const\n\nexport const executionMode = {\n  default: '0x0100000000000000000000000000000000000000000000000000000000000000',\n  opData: '0x0100000000007821000100000000000000000000000000000000000000000000',\n  batchOfBatches:\n    '0x0100000000007821000200000000000000000000000000000000000000000000',\n} as const\n", "import type { Address } from '../../../accounts/index.js'\nimport { readContract } from '../../../actions/public/readContract.js'\nimport type { Client } from '../../../clients/createClient.js'\nimport type { Transport } from '../../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../../errors/utils.js'\nimport type { Chain } from '../../../types/chain.js'\nimport type { Hex } from '../../../types/misc.js'\nimport { withCache } from '../../../utils/promise/withCache.js'\nimport { abi, executionMode } from '../constants.js'\n\nexport type SupportsExecutionModeParameters = {\n  address: Address\n  mode?: 'default' | 'opData' | 'batchOfBatches' | Hex\n}\n\nexport type SupportsExecutionModeReturnType = boolean\n\nexport type SupportsExecutionModeErrorType = ErrorType\n\nconst toSerializedMode = {\n  default: executionMode.default,\n  opData: executionMode.opData,\n  batchOfBatches: executionMode.batchOfBatches,\n} as const\n\n/**\n * Checks if the contract supports the ERC-7821 execution mode.\n *\n * @example\n * ```ts\n * import { createClient, http } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { supportsExecutionMode } from 'viem/experimental/erc7821'\n *\n * const client = createClient({\n *   chain: mainnet,\n *   transport: http(),\n * })\n *\n * const supported = await supportsExecutionMode(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * })\n * ```\n *\n * @param client - Client to use.\n * @param parameters - {@link SupportsExecutionModeParameters}\n * @returns If the execution mode is supported. {@link SupportsExecutionModeReturnType}\n */\nexport async function supportsExecutionMode<\n  chain extends Chain | undefined = Chain | undefined,\n>(\n  client: Client<Transport, chain>,\n  parameters: SupportsExecutionModeParameters,\n): Promise<SupportsExecutionModeReturnType> {\n  const { address, mode: m = 'default' } = parameters\n  const mode = m.startsWith('0x') ? m : (toSerializedMode as any)[m]\n  try {\n    return await withCache(\n      () =>\n        readContract(client, {\n          abi,\n          address,\n          functionName: 'supportsExecutionMode',\n          args: [mode],\n        }),\n      {\n        cacheKey: `supportsExecutionMode.${address}.${mode}`,\n      },\n    )\n  } catch {\n    return false\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAmgBM,SAAUA,MAGd,UAQA,UAAwB,CAAA,GAAE;AAE1B,SAAe,KAAK,UAAsB,OAAO;AACnD;AAmFM,SAAUC,SASdC,MACA,MACA,SAKC;AAED,MAAI,SAAS;AAAS,WAAO;AAC7B,MAAI,SAAS;AAAS,WAAO;AAC7B,MAAQ,SAAS,MAAM,EAAE,QAAQ,MAAK,CAAE,GAAG;AACzC,UAAM,WAAe,MAAM,MAAM,GAAG,CAAC;AACrC,QAAI,aAAa;AAAuB,aAAO;AAC/C,QAAI,aAAa;AAAuB,aAAO;EACjD;AAEA,QAAM,OAAe,QAAQA,MAAK,MAAM,OAAc;AACtD,MAAI,KAAK,SAAS;AAChB,UAAM,IAAY,cAAc,EAAE,MAAM,MAAM,QAAO,CAAE;AACzD,SAAO;AACT;AAqDM,SAAUC,aAAY,SAA0B;AACpD,SAAe,YAAY,OAAO;AACpC;AAmBO,IAAM,gBAA8BC,MAAK;EAC9C,QAAQ;IACN;MACE,MAAM;MACN,MAAM;;;EAGV,MAAM;EACN,MAAM;CACP;AAEM,IAAM,wBAAwB;AAE9B,IAAM,gBAA8BA,MAAK;EAC9C,QAAQ;IACN;MACE,MAAM;MACN,MAAM;;;EAGV,MAAM;EACN,MAAM;CACP;AAEM,IAAM,wBAAwB;;;ACntB/B,IAAO,qCAAP,cAAkD,UAAS;EAC/D,cAAA;AACE,UAAM,+BAA+B;MACnC,cAAc;QACZ;QACA;QACA;;MAEF,MAAM;KACP;EACH;;;;ACAI,SAAU,gBACd,GACA,YAA4C;AAE5C,QAAM,QAAQ,EAAE,KAAK,CAACC,OAAM,UAAWA,EAAW;AAIlD,MAAI,CAAC,OAAO;AAAM,WAAO;AACzB,MACE,MAAM,SACGC,aAAqBC,MAAK,iCAAiC,CAAC;AAErE,WAAO,IAAI,mCAAkC;AAE/C,MAAI,UAAuB;AAC3B,aAAW,KAAK,WAAW,OAAO;AAChC,UAAM,OAAO;AACb,QAAI,CAAC,KAAK;AAAK;AACf,QAAI;AACF,YAAM,UAAU,QACd,kBAAkB;QAChB,KAAK,KAAK;QACV,MAAM,MAAM;OACb,CAAC;AAEJ,UAAI,CAAC;AAAS;AACd,gBAAU;IACZ,QAAQ;IAAC;EACX;AACA,MAAI;AACF,WAAO,iBAAiB,OAAoB;MAC1C,KAAK,QAAQ;MACb,SAAS,QAAQ;MACjB,MAAM,QAAQ;MACd,cAAc,QAAQ;KACvB;AAEH,SAAO;AACT;;;ACRO,IAAM,gBAAgB;EAC3B,SAAS;EACT,QAAQ;EACR,gBACE;;;;AC3CJ,IAAM,mBAAmB;EACvB,SAAS,cAAc;EACvB,QAAQ,cAAc;EACtB,gBAAgB,cAAc;;",
  "names": ["from", "fromAbi", "abi", "getSelector", "from", "e", "getSelector", "from"]
}
