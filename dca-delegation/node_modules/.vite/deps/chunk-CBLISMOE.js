import {
  NotFoundError,
  from4 as from,
  fromAbi,
  getContractError,
  getSelector
} from "./chunk-YVTX242E.js";
import {
  decodeErrorResult,
  slice2 as slice,
  validate2 as validate
} from "./chunk-UODDSYY3.js";
import {
  BaseError
} from "./chunk-6YDQJOK2.js";

// node_modules/ox/_esm/core/AbiError.js
function from2(abiError, options = {}) {
  return from(abiError, options);
}
function fromAbi2(abi2, name, options) {
  if (name === "Error")
    return solidityError;
  if (name === "Panic")
    return solidityPanic;
  if (validate(name, { strict: false })) {
    const selector = slice(name, 0, 4);
    if (selector === solidityErrorSelector)
      return solidityError;
    if (selector === solidityPanicSelector)
      return solidityPanic;
  }
  const item = fromAbi(abi2, name, options);
  if (item.type !== "error")
    throw new NotFoundError({ name, type: "error" });
  return item;
}
function getSelector2(abiItem) {
  return getSelector(abiItem);
}
var solidityError = from2({
  inputs: [
    {
      name: "message",
      type: "string"
    }
  ],
  name: "Error",
  type: "error"
});
var solidityErrorSelector = "0x08c379a0";
var solidityPanic = from2({
  inputs: [
    {
      name: "reason",
      type: "uint8"
    }
  ],
  name: "Panic",
  type: "error"
});
var solidityPanicSelector = "0x4e487b71";

// node_modules/viem/_esm/experimental/erc7821/errors.js
var FunctionSelectorNotRecognizedError = class extends BaseError {
  constructor() {
    super("Function is not recognized.", {
      metaMessages: [
        "This could be due to any of the following:",
        "  - The contract does not have the function,",
        "  - The address is not a contract."
      ],
      name: "FunctionSelectorNotRecognizedError"
    });
  }
};

// node_modules/viem/_esm/experimental/erc7821/utils/getExecuteError.js
function getExecuteError(e, parameters) {
  const error = e.walk((e2) => "data" in e2);
  if (!error?.data)
    return e;
  if (error.data === getSelector2(from2("error FnSelectorNotRecognized()")))
    return new FunctionSelectorNotRecognizedError();
  let matched = null;
  for (const c of parameters.calls) {
    const call = c;
    if (!call.abi)
      continue;
    try {
      const matches = Boolean(decodeErrorResult({
        abi: call.abi,
        data: error.data
      }));
      if (!matches)
        continue;
      matched = call;
    } catch {
    }
  }
  if (matched)
    return getContractError(error, {
      abi: matched.abi,
      address: matched.to,
      args: matched.args,
      functionName: matched.functionName
    });
  return e;
}

// node_modules/viem/_esm/experimental/erc7821/constants.js
var executionMode = {
  default: "0x0100000000000000000000000000000000000000000000000000000000000000",
  opData: "0x0100000000007821000100000000000000000000000000000000000000000000",
  batchOfBatches: "0x0100000000007821000200000000000000000000000000000000000000000000"
};

// node_modules/viem/_esm/experimental/erc7821/actions/supportsExecutionMode.js
var toSerializedMode = {
  default: executionMode.default,
  opData: executionMode.opData,
  batchOfBatches: executionMode.batchOfBatches
};

export {
  from2 as from,
  fromAbi2 as fromAbi,
  getExecuteError
};
//# sourceMappingURL=chunk-CBLISMOE.js.map
